'------------------------------------------------------------------------------
' <auto-generated>
'     Ce code a été généré par un outil.
'     Version du runtime :2.0.50727.42
'
'     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
'     le code est régénéré.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System


<System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
 Serializable(), _
 System.ComponentModel.DesignerCategoryAttribute("code"), _
 System.ComponentModel.ToolboxItem(True), _
 System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"), _
 System.Xml.Serialization.XmlRootAttribute("DataSetDiagFeux"), _
 System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")> _
Partial Public Class DataSetDiagFeux
    Inherits System.Data.DataSet

    Private tableSchémaACONDIA As SchémaACONDIADataTable

    Private tableParamétrage As ParamétrageDataTable

    Private tableParamFixe As ParamFixeDataTable

    Private tableTableCycleCapacité As TableCycleCapacitéDataTable

    Private tableDuréeCycle As DuréeCycleDataTable

    Private tableDemandeCarrefour As DemandeCarrefourDataTable

    Private tableCarrefour As CarrefourDataTable

    Private tableVariante As VarianteDataTable

    Private tableParamDessin As ParamDessinDataTable

    Private tableOrigineReelle As OrigineReelleDataTable

    Private tableTaille As TailleDataTable

    Private tableAffichage As AffichageDataTable

    Private tableNord As NordDataTable

    Private tablepNord As pNordDataTable

    Private tableSymEchelle As SymEchelleDataTable

    Private tablepSymEchelle As pSymEchelleDataTable

    Private tableFondPlan As FondPlanDataTable

    Private tableMonDXF As MonDXFDataTable

    Private tableBranche As BrancheDataTable

    Private tableIlot As IlotDataTable

    Private tableVoie As VoieDataTable

    Private tableptFlechesTrafic As ptFlechesTraficDataTable

    Private tableOrigine As OrigineDataTable

    Private tablePassage As PassageDataTable

    Private tablePoint As PointDataTable

    Private tableVoieIntersectee As VoieIntersecteeDataTable

    Private tableLigneDeFeux As LigneDeFeuxDataTable

    Private tableSignal As SignalDataTable

    Private tableRougeDégagement As RougeDégagementDataTable

    Private tableIncompatible As IncompatibleDataTable

    Private tableTrajectoire As TrajectoireDataTable

    Private tablePiétons As PiétonsDataTable

    Private tableVéhicules As VéhiculesDataTable

    Private tablePointManuel As PointManuelDataTable

    Private tableAntagonisme As AntagonismeDataTable

    Private tablepAntago As pAntagoDataTable

    Private tablePlanFeux As PlanFeuxDataTable

    Private tablePhase As PhaseDataTable

    Private tableIDLigneFeux As IDLigneFeuxDataTable

    Private tableIDLigneFeuxComposé As IDLigneFeuxComposéDataTable

    Private tableOrdreLignes As OrdreLignesDataTable

    Private tableIncompatibles As IncompatiblesDataTable

    Private tableRougesDégagement As RougesDégagementDataTable

    Private tableTypesConflit As TypesConflitDataTable

    Private tableTrafic As TraficDataTable

    Private tableQPiéton As QPiétonDataTable

    Private tableQVéhicule As QVéhiculeDataTable

    Private tablePropriétés As PropriétésDataTable

    Private tableCentre As CentreDataTable

    Private tableDXF As DXFDataTable

    Private tableCalque As CalqueDataTable

    Private tableBloc As BlocDataTable

    Private tableLIGNE As LIGNEDataTable

    Private tablePA As PADataTable

    Private tableARC As ARCDataTable

    Private tableCentreArc As CentreArcDataTable

    Private tableCERCLE As CERCLEDataTable

    Private tableCentreCercle As CentreCercleDataTable

    Private tablePOLYARC As POLYARCDataTable

    Private tablePI As PIDataTable

    Private tableP As PDataTable

    Private tableSPLINE As SPLINEDataTable

    Private tablePtDessiné As PtDessinéDataTable

    Private tableINSERT As INSERTDataTable

    Private tablepInsertion As pInsertionDataTable

    Private tableLimites As LimitesDataTable

    Private tablepMin As pMinDataTable

    Private tablepMax As pMaxDataTable

    Private relationSchémaACONDIA_Paramétrage As System.Data.DataRelation

    Private relationSchémaACONDIA_ParamFixe As System.Data.DataRelation

    Private relationSchémaACONDIA_TableCycleCapacité As System.Data.DataRelation

    Private relationTableCycleCapacité_DuréeCycle As System.Data.DataRelation

    Private relationDuréeCycle_DemandeCarrefour As System.Data.DataRelation

    Private relationSchémaACONDIA_Carrefour As System.Data.DataRelation

    Private relationCarrefour_Variante As System.Data.DataRelation

    Private relationVariante_ParamDessin As System.Data.DataRelation

    Private relationParamDessin_OrigineReelle As System.Data.DataRelation

    Private relationParamDessin_Taille As System.Data.DataRelation

    Private relationVariante_Affichage As System.Data.DataRelation

    Private relationAffichage_Nord As System.Data.DataRelation

    Private relationNord_pNord As System.Data.DataRelation

    Private relationAffichage_SymEchelle As System.Data.DataRelation

    Private relationSymEchelle_pSymEchelle As System.Data.DataRelation

    Private relationVariante_FondPlan As System.Data.DataRelation

    Private relationFondPlan_MonDXF As System.Data.DataRelation

    Private relationVariante_Branche As System.Data.DataRelation

    Private relationBranche_Ilot As System.Data.DataRelation

    Private relationBranche_Voie As System.Data.DataRelation

    Private relationBranche_ptFlechesTrafic As System.Data.DataRelation

    Private relationBranche_Origine As System.Data.DataRelation

    Private relationBranche_Passage As System.Data.DataRelation

    Private relationPassage_Point As System.Data.DataRelation

    Private relationPassage_VoieIntersectee As System.Data.DataRelation

    Private relationVariante_LigneDeFeux As System.Data.DataRelation

    Private relationLigneDeFeux_Signal As System.Data.DataRelation

    Private relationLigneDeFeux_RougeDégagement As System.Data.DataRelation

    Private relationLigneDeFeux_Incompatible As System.Data.DataRelation

    Private relationVariante_Trajectoire As System.Data.DataRelation

    Private relationTrajectoire_Piétons As System.Data.DataRelation

    Private relationTrajectoire_Véhicules As System.Data.DataRelation

    Private relationVéhicules_PointManuel As System.Data.DataRelation

    Private relationVariante_Antagonisme As System.Data.DataRelation

    Private relationAntagonisme_pAntago As System.Data.DataRelation

    Private relationVariante_PlanFeux As System.Data.DataRelation

    Private relationPlanFeux_Phase As System.Data.DataRelation

    Private relationPhase_IDLigneFeux As System.Data.DataRelation

    Private relationPlanFeux_IDLigneFeuxComposé As System.Data.DataRelation

    Private relationPlanFeux_OrdreLignes As System.Data.DataRelation

    Private relationPlanFeux_Incompatibles As System.Data.DataRelation

    Private relationPlanFeux_RougesDégagement As System.Data.DataRelation

    Private relationPlanFeux_TypesConflit As System.Data.DataRelation

    Private relationVariante_Trafic As System.Data.DataRelation

    Private relationTrafic_QPiéton As System.Data.DataRelation

    Private relationTrafic_QVéhicule As System.Data.DataRelation

    Private relationCarrefour_Propriétés As System.Data.DataRelation

    Private relationPropriétés_Centre As System.Data.DataRelation

    Private relationSchémaACONDIA_DXF As System.Data.DataRelation

    Private relationDXF_Calque As System.Data.DataRelation

    Private relationDXF_Bloc As System.Data.DataRelation

    Private relationBloc_LIGNE As System.Data.DataRelation

    Private relationLIGNE_PA As System.Data.DataRelation

    Private relationBloc_ARC As System.Data.DataRelation

    Private relationARC_CentreArc As System.Data.DataRelation

    Private relationBloc_CERCLE As System.Data.DataRelation

    Private relationCERCLE_CentreCercle As System.Data.DataRelation

    Private relationBloc_POLYARC As System.Data.DataRelation

    Private relationPOLYARC_PI As System.Data.DataRelation

    Private relationPI_P As System.Data.DataRelation

    Private relationBloc_SPLINE As System.Data.DataRelation

    Private relationSPLINE_PtDessiné As System.Data.DataRelation

    Private relationBloc_INSERT As System.Data.DataRelation

    Private relationINSERT_pInsertion As System.Data.DataRelation

    Private relationDXF_Limites As System.Data.DataRelation

    Private relationLimites_pMin As System.Data.DataRelation

    Private relationLimites_pMax As System.Data.DataRelation

    Private _schemaSerializationMode As System.Data.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Sub New()
        MyBase.New()
        Me.BeginInit()
        Me.InitClass()
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, False)
        If (Me.IsBinarySerialized(info, context) = True) Then
            Me.InitVars(False)
            Dim schemaChangedHandler1 As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)), String)
        If (Me.DetermineSchemaSerializationMode(info, context) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("SchémaACONDIA")) Is Nothing) Then
                MyBase.Tables.Add(New SchémaACONDIADataTable(ds.Tables("SchémaACONDIA")))
            End If
            If (Not (ds.Tables("Paramétrage")) Is Nothing) Then
                MyBase.Tables.Add(New ParamétrageDataTable(ds.Tables("Paramétrage")))
            End If
            If (Not (ds.Tables("ParamFixe")) Is Nothing) Then
                MyBase.Tables.Add(New ParamFixeDataTable(ds.Tables("ParamFixe")))
            End If
            If (Not (ds.Tables("TableCycleCapacité")) Is Nothing) Then
                MyBase.Tables.Add(New TableCycleCapacitéDataTable(ds.Tables("TableCycleCapacité")))
            End If
            If (Not (ds.Tables("DuréeCycle")) Is Nothing) Then
                MyBase.Tables.Add(New DuréeCycleDataTable(ds.Tables("DuréeCycle")))
            End If
            If (Not (ds.Tables("DemandeCarrefour")) Is Nothing) Then
                MyBase.Tables.Add(New DemandeCarrefourDataTable(ds.Tables("DemandeCarrefour")))
            End If
            If (Not (ds.Tables("Carrefour")) Is Nothing) Then
                MyBase.Tables.Add(New CarrefourDataTable(ds.Tables("Carrefour")))
            End If
            If (Not (ds.Tables("Variante")) Is Nothing) Then
                MyBase.Tables.Add(New VarianteDataTable(ds.Tables("Variante")))
            End If
            If (Not (ds.Tables("ParamDessin")) Is Nothing) Then
                MyBase.Tables.Add(New ParamDessinDataTable(ds.Tables("ParamDessin")))
            End If
            If (Not (ds.Tables("OrigineReelle")) Is Nothing) Then
                MyBase.Tables.Add(New OrigineReelleDataTable(ds.Tables("OrigineReelle")))
            End If
            If (Not (ds.Tables("Taille")) Is Nothing) Then
                MyBase.Tables.Add(New TailleDataTable(ds.Tables("Taille")))
            End If
            If (Not (ds.Tables("Affichage")) Is Nothing) Then
                MyBase.Tables.Add(New AffichageDataTable(ds.Tables("Affichage")))
            End If
            If (Not (ds.Tables("Nord")) Is Nothing) Then
                MyBase.Tables.Add(New NordDataTable(ds.Tables("Nord")))
            End If
            If (Not (ds.Tables("pNord")) Is Nothing) Then
                MyBase.Tables.Add(New pNordDataTable(ds.Tables("pNord")))
            End If
            If (Not (ds.Tables("SymEchelle")) Is Nothing) Then
                MyBase.Tables.Add(New SymEchelleDataTable(ds.Tables("SymEchelle")))
            End If
            If (Not (ds.Tables("pSymEchelle")) Is Nothing) Then
                MyBase.Tables.Add(New pSymEchelleDataTable(ds.Tables("pSymEchelle")))
            End If
            If (Not (ds.Tables("FondPlan")) Is Nothing) Then
                MyBase.Tables.Add(New FondPlanDataTable(ds.Tables("FondPlan")))
            End If
            If (Not (ds.Tables("MonDXF")) Is Nothing) Then
                MyBase.Tables.Add(New MonDXFDataTable(ds.Tables("MonDXF")))
            End If
            If (Not (ds.Tables("Branche")) Is Nothing) Then
                MyBase.Tables.Add(New BrancheDataTable(ds.Tables("Branche")))
            End If
            If (Not (ds.Tables("Ilot")) Is Nothing) Then
                MyBase.Tables.Add(New IlotDataTable(ds.Tables("Ilot")))
            End If
            If (Not (ds.Tables("Voie")) Is Nothing) Then
                MyBase.Tables.Add(New VoieDataTable(ds.Tables("Voie")))
            End If
            If (Not (ds.Tables("ptFlechesTrafic")) Is Nothing) Then
                MyBase.Tables.Add(New ptFlechesTraficDataTable(ds.Tables("ptFlechesTrafic")))
            End If
            If (Not (ds.Tables("Origine")) Is Nothing) Then
                MyBase.Tables.Add(New OrigineDataTable(ds.Tables("Origine")))
            End If
            If (Not (ds.Tables("Passage")) Is Nothing) Then
                MyBase.Tables.Add(New PassageDataTable(ds.Tables("Passage")))
            End If
            If (Not (ds.Tables("Point")) Is Nothing) Then
                MyBase.Tables.Add(New PointDataTable(ds.Tables("Point")))
            End If
            If (Not (ds.Tables("VoieIntersectee")) Is Nothing) Then
                MyBase.Tables.Add(New VoieIntersecteeDataTable(ds.Tables("VoieIntersectee")))
            End If
            If (Not (ds.Tables("LigneDeFeux")) Is Nothing) Then
                MyBase.Tables.Add(New LigneDeFeuxDataTable(ds.Tables("LigneDeFeux")))
            End If
            If (Not (ds.Tables("Signal")) Is Nothing) Then
                MyBase.Tables.Add(New SignalDataTable(ds.Tables("Signal")))
            End If
            If (Not (ds.Tables("RougeDégagement")) Is Nothing) Then
                MyBase.Tables.Add(New RougeDégagementDataTable(ds.Tables("RougeDégagement")))
            End If
            If (Not (ds.Tables("Incompatible")) Is Nothing) Then
                MyBase.Tables.Add(New IncompatibleDataTable(ds.Tables("Incompatible")))
            End If
            If (Not (ds.Tables("Trajectoire")) Is Nothing) Then
                MyBase.Tables.Add(New TrajectoireDataTable(ds.Tables("Trajectoire")))
            End If
            If (Not (ds.Tables("Piétons")) Is Nothing) Then
                MyBase.Tables.Add(New PiétonsDataTable(ds.Tables("Piétons")))
            End If
            If (Not (ds.Tables("Véhicules")) Is Nothing) Then
                MyBase.Tables.Add(New VéhiculesDataTable(ds.Tables("Véhicules")))
            End If
            If (Not (ds.Tables("PointManuel")) Is Nothing) Then
                MyBase.Tables.Add(New PointManuelDataTable(ds.Tables("PointManuel")))
            End If
            If (Not (ds.Tables("Antagonisme")) Is Nothing) Then
                MyBase.Tables.Add(New AntagonismeDataTable(ds.Tables("Antagonisme")))
            End If
            If (Not (ds.Tables("pAntago")) Is Nothing) Then
                MyBase.Tables.Add(New pAntagoDataTable(ds.Tables("pAntago")))
            End If
            If (Not (ds.Tables("PlanFeux")) Is Nothing) Then
                MyBase.Tables.Add(New PlanFeuxDataTable(ds.Tables("PlanFeux")))
            End If
            If (Not (ds.Tables("Phase")) Is Nothing) Then
                MyBase.Tables.Add(New PhaseDataTable(ds.Tables("Phase")))
            End If
            If (Not (ds.Tables("IDLigneFeux")) Is Nothing) Then
                MyBase.Tables.Add(New IDLigneFeuxDataTable(ds.Tables("IDLigneFeux")))
            End If
            If (Not (ds.Tables("IDLigneFeuxComposé")) Is Nothing) Then
                MyBase.Tables.Add(New IDLigneFeuxComposéDataTable(ds.Tables("IDLigneFeuxComposé")))
            End If
            If (Not (ds.Tables("OrdreLignes")) Is Nothing) Then
                MyBase.Tables.Add(New OrdreLignesDataTable(ds.Tables("OrdreLignes")))
            End If
            If (Not (ds.Tables("Incompatibles")) Is Nothing) Then
                MyBase.Tables.Add(New IncompatiblesDataTable(ds.Tables("Incompatibles")))
            End If
            If (Not (ds.Tables("RougesDégagement")) Is Nothing) Then
                MyBase.Tables.Add(New RougesDégagementDataTable(ds.Tables("RougesDégagement")))
            End If
            If (Not (ds.Tables("TypesConflit")) Is Nothing) Then
                MyBase.Tables.Add(New TypesConflitDataTable(ds.Tables("TypesConflit")))
            End If
            If (Not (ds.Tables("Trafic")) Is Nothing) Then
                MyBase.Tables.Add(New TraficDataTable(ds.Tables("Trafic")))
            End If
            If (Not (ds.Tables("QPiéton")) Is Nothing) Then
                MyBase.Tables.Add(New QPiétonDataTable(ds.Tables("QPiéton")))
            End If
            If (Not (ds.Tables("QVéhicule")) Is Nothing) Then
                MyBase.Tables.Add(New QVéhiculeDataTable(ds.Tables("QVéhicule")))
            End If
            If (Not (ds.Tables("Propriétés")) Is Nothing) Then
                MyBase.Tables.Add(New PropriétésDataTable(ds.Tables("Propriétés")))
            End If
            If (Not (ds.Tables("Centre")) Is Nothing) Then
                MyBase.Tables.Add(New CentreDataTable(ds.Tables("Centre")))
            End If
            If (Not (ds.Tables("DXF")) Is Nothing) Then
                MyBase.Tables.Add(New DXFDataTable(ds.Tables("DXF")))
            End If
            If (Not (ds.Tables("Calque")) Is Nothing) Then
                MyBase.Tables.Add(New CalqueDataTable(ds.Tables("Calque")))
            End If
            If (Not (ds.Tables("Bloc")) Is Nothing) Then
                MyBase.Tables.Add(New BlocDataTable(ds.Tables("Bloc")))
            End If
            If (Not (ds.Tables("LIGNE")) Is Nothing) Then
                MyBase.Tables.Add(New LIGNEDataTable(ds.Tables("LIGNE")))
            End If
            If (Not (ds.Tables("PA")) Is Nothing) Then
                MyBase.Tables.Add(New PADataTable(ds.Tables("PA")))
            End If
            If (Not (ds.Tables("ARC")) Is Nothing) Then
                MyBase.Tables.Add(New ARCDataTable(ds.Tables("ARC")))
            End If
            If (Not (ds.Tables("CentreArc")) Is Nothing) Then
                MyBase.Tables.Add(New CentreArcDataTable(ds.Tables("CentreArc")))
            End If
            If (Not (ds.Tables("CERCLE")) Is Nothing) Then
                MyBase.Tables.Add(New CERCLEDataTable(ds.Tables("CERCLE")))
            End If
            If (Not (ds.Tables("CentreCercle")) Is Nothing) Then
                MyBase.Tables.Add(New CentreCercleDataTable(ds.Tables("CentreCercle")))
            End If
            If (Not (ds.Tables("POLYARC")) Is Nothing) Then
                MyBase.Tables.Add(New POLYARCDataTable(ds.Tables("POLYARC")))
            End If
            If (Not (ds.Tables("PI")) Is Nothing) Then
                MyBase.Tables.Add(New PIDataTable(ds.Tables("PI")))
            End If
            If (Not (ds.Tables("P")) Is Nothing) Then
                MyBase.Tables.Add(New PDataTable(ds.Tables("P")))
            End If
            If (Not (ds.Tables("SPLINE")) Is Nothing) Then
                MyBase.Tables.Add(New SPLINEDataTable(ds.Tables("SPLINE")))
            End If
            If (Not (ds.Tables("PtDessiné")) Is Nothing) Then
                MyBase.Tables.Add(New PtDessinéDataTable(ds.Tables("PtDessiné")))
            End If
            If (Not (ds.Tables("INSERT")) Is Nothing) Then
                MyBase.Tables.Add(New INSERTDataTable(ds.Tables("INSERT")))
            End If
            If (Not (ds.Tables("pInsertion")) Is Nothing) Then
                MyBase.Tables.Add(New pInsertionDataTable(ds.Tables("pInsertion")))
            End If
            If (Not (ds.Tables("Limites")) Is Nothing) Then
                MyBase.Tables.Add(New LimitesDataTable(ds.Tables("Limites")))
            End If
            If (Not (ds.Tables("pMin")) Is Nothing) Then
                MyBase.Tables.Add(New pMinDataTable(ds.Tables("pMin")))
            End If
            If (Not (ds.Tables("pMax")) Is Nothing) Then
                MyBase.Tables.Add(New pMaxDataTable(ds.Tables("pMax")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, False, System.Data.MissingSchemaAction.Add)
            Me.InitVars()
        Else
            Me.ReadXmlSchema(New System.Xml.XmlTextReader(New System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property SchémaACONDIA() As SchémaACONDIADataTable
        Get
            Return Me.tableSchémaACONDIA
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Paramétrage() As ParamétrageDataTable
        Get
            Return Me.tableParamétrage
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property ParamFixe() As ParamFixeDataTable
        Get
            Return Me.tableParamFixe
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TableCycleCapacité() As TableCycleCapacitéDataTable
        Get
            Return Me.tableTableCycleCapacité
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property DuréeCycle() As DuréeCycleDataTable
        Get
            Return Me.tableDuréeCycle
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property DemandeCarrefour() As DemandeCarrefourDataTable
        Get
            Return Me.tableDemandeCarrefour
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Carrefour() As CarrefourDataTable
        Get
            Return Me.tableCarrefour
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Variante() As VarianteDataTable
        Get
            Return Me.tableVariante
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property ParamDessin() As ParamDessinDataTable
        Get
            Return Me.tableParamDessin
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property OrigineReelle() As OrigineReelleDataTable
        Get
            Return Me.tableOrigineReelle
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Taille() As TailleDataTable
        Get
            Return Me.tableTaille
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Affichage() As AffichageDataTable
        Get
            Return Me.tableAffichage
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Nord() As NordDataTable
        Get
            Return Me.tableNord
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property pNord() As pNordDataTable
        Get
            Return Me.tablepNord
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property SymEchelle() As SymEchelleDataTable
        Get
            Return Me.tableSymEchelle
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property pSymEchelle() As pSymEchelleDataTable
        Get
            Return Me.tablepSymEchelle
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property FondPlan() As FondPlanDataTable
        Get
            Return Me.tableFondPlan
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property MonDXF() As MonDXFDataTable
        Get
            Return Me.tableMonDXF
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Branche() As BrancheDataTable
        Get
            Return Me.tableBranche
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Ilot() As IlotDataTable
        Get
            Return Me.tableIlot
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Voie() As VoieDataTable
        Get
            Return Me.tableVoie
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property ptFlechesTrafic() As ptFlechesTraficDataTable
        Get
            Return Me.tableptFlechesTrafic
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Origine() As OrigineDataTable
        Get
            Return Me.tableOrigine
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Passage() As PassageDataTable
        Get
            Return Me.tablePassage
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Point() As PointDataTable
        Get
            Return Me.tablePoint
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property VoieIntersectee() As VoieIntersecteeDataTable
        Get
            Return Me.tableVoieIntersectee
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property LigneDeFeux() As LigneDeFeuxDataTable
        Get
            Return Me.tableLigneDeFeux
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Signal() As SignalDataTable
        Get
            Return Me.tableSignal
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property RougeDégagement() As RougeDégagementDataTable
        Get
            Return Me.tableRougeDégagement
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Incompatible() As IncompatibleDataTable
        Get
            Return Me.tableIncompatible
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Trajectoire() As TrajectoireDataTable
        Get
            Return Me.tableTrajectoire
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Piétons() As PiétonsDataTable
        Get
            Return Me.tablePiétons
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Véhicules() As VéhiculesDataTable
        Get
            Return Me.tableVéhicules
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property PointManuel() As PointManuelDataTable
        Get
            Return Me.tablePointManuel
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Antagonisme() As AntagonismeDataTable
        Get
            Return Me.tableAntagonisme
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property pAntago() As pAntagoDataTable
        Get
            Return Me.tablepAntago
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property PlanFeux() As PlanFeuxDataTable
        Get
            Return Me.tablePlanFeux
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Phase() As PhaseDataTable
        Get
            Return Me.tablePhase
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property IDLigneFeux() As IDLigneFeuxDataTable
        Get
            Return Me.tableIDLigneFeux
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property IDLigneFeuxComposé() As IDLigneFeuxComposéDataTable
        Get
            Return Me.tableIDLigneFeuxComposé
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property OrdreLignes() As OrdreLignesDataTable
        Get
            Return Me.tableOrdreLignes
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Incompatibles() As IncompatiblesDataTable
        Get
            Return Me.tableIncompatibles
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property RougesDégagement() As RougesDégagementDataTable
        Get
            Return Me.tableRougesDégagement
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property TypesConflit() As TypesConflitDataTable
        Get
            Return Me.tableTypesConflit
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Trafic() As TraficDataTable
        Get
            Return Me.tableTrafic
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property QPiéton() As QPiétonDataTable
        Get
            Return Me.tableQPiéton
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property QVéhicule() As QVéhiculeDataTable
        Get
            Return Me.tableQVéhicule
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Propriétés() As PropriétésDataTable
        Get
            Return Me.tablePropriétés
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Centre() As CentreDataTable
        Get
            Return Me.tableCentre
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property DXF() As DXFDataTable
        Get
            Return Me.tableDXF
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Calque() As CalqueDataTable
        Get
            Return Me.tableCalque
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Bloc() As BlocDataTable
        Get
            Return Me.tableBloc
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property LIGNE() As LIGNEDataTable
        Get
            Return Me.tableLIGNE
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property PA() As PADataTable
        Get
            Return Me.tablePA
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property ARC() As ARCDataTable
        Get
            Return Me.tableARC
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property CentreArc() As CentreArcDataTable
        Get
            Return Me.tableCentreArc
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property CERCLE() As CERCLEDataTable
        Get
            Return Me.tableCERCLE
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property CentreCercle() As CentreCercleDataTable
        Get
            Return Me.tableCentreCercle
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property POLYARC() As POLYARCDataTable
        Get
            Return Me.tablePOLYARC
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property PI() As PIDataTable
        Get
            Return Me.tablePI
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property P() As PDataTable
        Get
            Return Me.tableP
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property SPLINE() As SPLINEDataTable
        Get
            Return Me.tableSPLINE
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property PtDessiné() As PtDessinéDataTable
        Get
            Return Me.tablePtDessiné
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property INSERT() As INSERTDataTable
        Get
            Return Me.tableINSERT
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property pInsertion() As pInsertionDataTable
        Get
            Return Me.tablepInsertion
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property Limites() As LimitesDataTable
        Get
            Return Me.tableLimites
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property pMin() As pMinDataTable
        Get
            Return Me.tablepMin
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.Browsable(False), _
     System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)> _
    Public ReadOnly Property pMax() As pMaxDataTable
        Get
            Return Me.tablepMax
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.BrowsableAttribute(True), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)> _
    Public Overrides Property SchemaSerializationMode() As System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set(ByVal value As System.Data.SchemaSerializationMode)
            Me._schemaSerializationMode = value
        End Set
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Tables() As System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)> _
    Public Shadows ReadOnly Property Relations() As System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit()
        Me.InitClass()
        Me.EndInit()
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Overrides Function Clone() As System.Data.DataSet
        Dim cln As DataSetDiagFeux = CType(MyBase.Clone, DataSetDiagFeux)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As System.Data.DataSet = New System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("SchémaACONDIA")) Is Nothing) Then
                MyBase.Tables.Add(New SchémaACONDIADataTable(ds.Tables("SchémaACONDIA")))
            End If
            If (Not (ds.Tables("Paramétrage")) Is Nothing) Then
                MyBase.Tables.Add(New ParamétrageDataTable(ds.Tables("Paramétrage")))
            End If
            If (Not (ds.Tables("ParamFixe")) Is Nothing) Then
                MyBase.Tables.Add(New ParamFixeDataTable(ds.Tables("ParamFixe")))
            End If
            If (Not (ds.Tables("TableCycleCapacité")) Is Nothing) Then
                MyBase.Tables.Add(New TableCycleCapacitéDataTable(ds.Tables("TableCycleCapacité")))
            End If
            If (Not (ds.Tables("DuréeCycle")) Is Nothing) Then
                MyBase.Tables.Add(New DuréeCycleDataTable(ds.Tables("DuréeCycle")))
            End If
            If (Not (ds.Tables("DemandeCarrefour")) Is Nothing) Then
                MyBase.Tables.Add(New DemandeCarrefourDataTable(ds.Tables("DemandeCarrefour")))
            End If
            If (Not (ds.Tables("Carrefour")) Is Nothing) Then
                MyBase.Tables.Add(New CarrefourDataTable(ds.Tables("Carrefour")))
            End If
            If (Not (ds.Tables("Variante")) Is Nothing) Then
                MyBase.Tables.Add(New VarianteDataTable(ds.Tables("Variante")))
            End If
            If (Not (ds.Tables("ParamDessin")) Is Nothing) Then
                MyBase.Tables.Add(New ParamDessinDataTable(ds.Tables("ParamDessin")))
            End If
            If (Not (ds.Tables("OrigineReelle")) Is Nothing) Then
                MyBase.Tables.Add(New OrigineReelleDataTable(ds.Tables("OrigineReelle")))
            End If
            If (Not (ds.Tables("Taille")) Is Nothing) Then
                MyBase.Tables.Add(New TailleDataTable(ds.Tables("Taille")))
            End If
            If (Not (ds.Tables("Affichage")) Is Nothing) Then
                MyBase.Tables.Add(New AffichageDataTable(ds.Tables("Affichage")))
            End If
            If (Not (ds.Tables("Nord")) Is Nothing) Then
                MyBase.Tables.Add(New NordDataTable(ds.Tables("Nord")))
            End If
            If (Not (ds.Tables("pNord")) Is Nothing) Then
                MyBase.Tables.Add(New pNordDataTable(ds.Tables("pNord")))
            End If
            If (Not (ds.Tables("SymEchelle")) Is Nothing) Then
                MyBase.Tables.Add(New SymEchelleDataTable(ds.Tables("SymEchelle")))
            End If
            If (Not (ds.Tables("pSymEchelle")) Is Nothing) Then
                MyBase.Tables.Add(New pSymEchelleDataTable(ds.Tables("pSymEchelle")))
            End If
            If (Not (ds.Tables("FondPlan")) Is Nothing) Then
                MyBase.Tables.Add(New FondPlanDataTable(ds.Tables("FondPlan")))
            End If
            If (Not (ds.Tables("MonDXF")) Is Nothing) Then
                MyBase.Tables.Add(New MonDXFDataTable(ds.Tables("MonDXF")))
            End If
            If (Not (ds.Tables("Branche")) Is Nothing) Then
                MyBase.Tables.Add(New BrancheDataTable(ds.Tables("Branche")))
            End If
            If (Not (ds.Tables("Ilot")) Is Nothing) Then
                MyBase.Tables.Add(New IlotDataTable(ds.Tables("Ilot")))
            End If
            If (Not (ds.Tables("Voie")) Is Nothing) Then
                MyBase.Tables.Add(New VoieDataTable(ds.Tables("Voie")))
            End If
            If (Not (ds.Tables("ptFlechesTrafic")) Is Nothing) Then
                MyBase.Tables.Add(New ptFlechesTraficDataTable(ds.Tables("ptFlechesTrafic")))
            End If
            If (Not (ds.Tables("Origine")) Is Nothing) Then
                MyBase.Tables.Add(New OrigineDataTable(ds.Tables("Origine")))
            End If
            If (Not (ds.Tables("Passage")) Is Nothing) Then
                MyBase.Tables.Add(New PassageDataTable(ds.Tables("Passage")))
            End If
            If (Not (ds.Tables("Point")) Is Nothing) Then
                MyBase.Tables.Add(New PointDataTable(ds.Tables("Point")))
            End If
            If (Not (ds.Tables("VoieIntersectee")) Is Nothing) Then
                MyBase.Tables.Add(New VoieIntersecteeDataTable(ds.Tables("VoieIntersectee")))
            End If
            If (Not (ds.Tables("LigneDeFeux")) Is Nothing) Then
                MyBase.Tables.Add(New LigneDeFeuxDataTable(ds.Tables("LigneDeFeux")))
            End If
            If (Not (ds.Tables("Signal")) Is Nothing) Then
                MyBase.Tables.Add(New SignalDataTable(ds.Tables("Signal")))
            End If
            If (Not (ds.Tables("RougeDégagement")) Is Nothing) Then
                MyBase.Tables.Add(New RougeDégagementDataTable(ds.Tables("RougeDégagement")))
            End If
            If (Not (ds.Tables("Incompatible")) Is Nothing) Then
                MyBase.Tables.Add(New IncompatibleDataTable(ds.Tables("Incompatible")))
            End If
            If (Not (ds.Tables("Trajectoire")) Is Nothing) Then
                MyBase.Tables.Add(New TrajectoireDataTable(ds.Tables("Trajectoire")))
            End If
            If (Not (ds.Tables("Piétons")) Is Nothing) Then
                MyBase.Tables.Add(New PiétonsDataTable(ds.Tables("Piétons")))
            End If
            If (Not (ds.Tables("Véhicules")) Is Nothing) Then
                MyBase.Tables.Add(New VéhiculesDataTable(ds.Tables("Véhicules")))
            End If
            If (Not (ds.Tables("PointManuel")) Is Nothing) Then
                MyBase.Tables.Add(New PointManuelDataTable(ds.Tables("PointManuel")))
            End If
            If (Not (ds.Tables("Antagonisme")) Is Nothing) Then
                MyBase.Tables.Add(New AntagonismeDataTable(ds.Tables("Antagonisme")))
            End If
            If (Not (ds.Tables("pAntago")) Is Nothing) Then
                MyBase.Tables.Add(New pAntagoDataTable(ds.Tables("pAntago")))
            End If
            If (Not (ds.Tables("PlanFeux")) Is Nothing) Then
                MyBase.Tables.Add(New PlanFeuxDataTable(ds.Tables("PlanFeux")))
            End If
            If (Not (ds.Tables("Phase")) Is Nothing) Then
                MyBase.Tables.Add(New PhaseDataTable(ds.Tables("Phase")))
            End If
            If (Not (ds.Tables("IDLigneFeux")) Is Nothing) Then
                MyBase.Tables.Add(New IDLigneFeuxDataTable(ds.Tables("IDLigneFeux")))
            End If
            If (Not (ds.Tables("IDLigneFeuxComposé")) Is Nothing) Then
                MyBase.Tables.Add(New IDLigneFeuxComposéDataTable(ds.Tables("IDLigneFeuxComposé")))
            End If
            If (Not (ds.Tables("OrdreLignes")) Is Nothing) Then
                MyBase.Tables.Add(New OrdreLignesDataTable(ds.Tables("OrdreLignes")))
            End If
            If (Not (ds.Tables("Incompatibles")) Is Nothing) Then
                MyBase.Tables.Add(New IncompatiblesDataTable(ds.Tables("Incompatibles")))
            End If
            If (Not (ds.Tables("RougesDégagement")) Is Nothing) Then
                MyBase.Tables.Add(New RougesDégagementDataTable(ds.Tables("RougesDégagement")))
            End If
            If (Not (ds.Tables("TypesConflit")) Is Nothing) Then
                MyBase.Tables.Add(New TypesConflitDataTable(ds.Tables("TypesConflit")))
            End If
            If (Not (ds.Tables("Trafic")) Is Nothing) Then
                MyBase.Tables.Add(New TraficDataTable(ds.Tables("Trafic")))
            End If
            If (Not (ds.Tables("QPiéton")) Is Nothing) Then
                MyBase.Tables.Add(New QPiétonDataTable(ds.Tables("QPiéton")))
            End If
            If (Not (ds.Tables("QVéhicule")) Is Nothing) Then
                MyBase.Tables.Add(New QVéhiculeDataTable(ds.Tables("QVéhicule")))
            End If
            If (Not (ds.Tables("Propriétés")) Is Nothing) Then
                MyBase.Tables.Add(New PropriétésDataTable(ds.Tables("Propriétés")))
            End If
            If (Not (ds.Tables("Centre")) Is Nothing) Then
                MyBase.Tables.Add(New CentreDataTable(ds.Tables("Centre")))
            End If
            If (Not (ds.Tables("DXF")) Is Nothing) Then
                MyBase.Tables.Add(New DXFDataTable(ds.Tables("DXF")))
            End If
            If (Not (ds.Tables("Calque")) Is Nothing) Then
                MyBase.Tables.Add(New CalqueDataTable(ds.Tables("Calque")))
            End If
            If (Not (ds.Tables("Bloc")) Is Nothing) Then
                MyBase.Tables.Add(New BlocDataTable(ds.Tables("Bloc")))
            End If
            If (Not (ds.Tables("LIGNE")) Is Nothing) Then
                MyBase.Tables.Add(New LIGNEDataTable(ds.Tables("LIGNE")))
            End If
            If (Not (ds.Tables("PA")) Is Nothing) Then
                MyBase.Tables.Add(New PADataTable(ds.Tables("PA")))
            End If
            If (Not (ds.Tables("ARC")) Is Nothing) Then
                MyBase.Tables.Add(New ARCDataTable(ds.Tables("ARC")))
            End If
            If (Not (ds.Tables("CentreArc")) Is Nothing) Then
                MyBase.Tables.Add(New CentreArcDataTable(ds.Tables("CentreArc")))
            End If
            If (Not (ds.Tables("CERCLE")) Is Nothing) Then
                MyBase.Tables.Add(New CERCLEDataTable(ds.Tables("CERCLE")))
            End If
            If (Not (ds.Tables("CentreCercle")) Is Nothing) Then
                MyBase.Tables.Add(New CentreCercleDataTable(ds.Tables("CentreCercle")))
            End If
            If (Not (ds.Tables("POLYARC")) Is Nothing) Then
                MyBase.Tables.Add(New POLYARCDataTable(ds.Tables("POLYARC")))
            End If
            If (Not (ds.Tables("PI")) Is Nothing) Then
                MyBase.Tables.Add(New PIDataTable(ds.Tables("PI")))
            End If
            If (Not (ds.Tables("P")) Is Nothing) Then
                MyBase.Tables.Add(New PDataTable(ds.Tables("P")))
            End If
            If (Not (ds.Tables("SPLINE")) Is Nothing) Then
                MyBase.Tables.Add(New SPLINEDataTable(ds.Tables("SPLINE")))
            End If
            If (Not (ds.Tables("PtDessiné")) Is Nothing) Then
                MyBase.Tables.Add(New PtDessinéDataTable(ds.Tables("PtDessiné")))
            End If
            If (Not (ds.Tables("INSERT")) Is Nothing) Then
                MyBase.Tables.Add(New INSERTDataTable(ds.Tables("INSERT")))
            End If
            If (Not (ds.Tables("pInsertion")) Is Nothing) Then
                MyBase.Tables.Add(New pInsertionDataTable(ds.Tables("pInsertion")))
            End If
            If (Not (ds.Tables("Limites")) Is Nothing) Then
                MyBase.Tables.Add(New LimitesDataTable(ds.Tables("Limites")))
            End If
            If (Not (ds.Tables("pMin")) Is Nothing) Then
                MyBase.Tables.Add(New pMinDataTable(ds.Tables("pMin")))
            End If
            If (Not (ds.Tables("pMax")) Is Nothing) Then
                MyBase.Tables.Add(New pMaxDataTable(ds.Tables("pMax")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableSchémaACONDIA = CType(MyBase.Tables("SchémaACONDIA"),SchémaACONDIADataTable)
        If (initTable = true) Then
            If (Not (Me.tableSchémaACONDIA) Is Nothing) Then
                Me.tableSchémaACONDIA.InitVars
            End If
        End If
        Me.tableParamétrage = CType(MyBase.Tables("Paramétrage"),ParamétrageDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParamétrage) Is Nothing) Then
                Me.tableParamétrage.InitVars
            End If
        End If
        Me.tableParamFixe = CType(MyBase.Tables("ParamFixe"),ParamFixeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParamFixe) Is Nothing) Then
                Me.tableParamFixe.InitVars
            End If
        End If
        Me.tableTableCycleCapacité = CType(MyBase.Tables("TableCycleCapacité"),TableCycleCapacitéDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTableCycleCapacité) Is Nothing) Then
                Me.tableTableCycleCapacité.InitVars
            End If
        End If
        Me.tableDuréeCycle = CType(MyBase.Tables("DuréeCycle"),DuréeCycleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDuréeCycle) Is Nothing) Then
                Me.tableDuréeCycle.InitVars
            End If
        End If
        Me.tableDemandeCarrefour = CType(MyBase.Tables("DemandeCarrefour"),DemandeCarrefourDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDemandeCarrefour) Is Nothing) Then
                Me.tableDemandeCarrefour.InitVars
            End If
        End If
        Me.tableCarrefour = CType(MyBase.Tables("Carrefour"),CarrefourDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCarrefour) Is Nothing) Then
                Me.tableCarrefour.InitVars
            End If
        End If
        Me.tableVariante = CType(MyBase.Tables("Variante"),VarianteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVariante) Is Nothing) Then
                Me.tableVariante.InitVars
            End If
        End If
        Me.tableParamDessin = CType(MyBase.Tables("ParamDessin"),ParamDessinDataTable)
        If (initTable = true) Then
            If (Not (Me.tableParamDessin) Is Nothing) Then
                Me.tableParamDessin.InitVars
            End If
        End If
        Me.tableOrigineReelle = CType(MyBase.Tables("OrigineReelle"),OrigineReelleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrigineReelle) Is Nothing) Then
                Me.tableOrigineReelle.InitVars
            End If
        End If
        Me.tableTaille = CType(MyBase.Tables("Taille"),TailleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTaille) Is Nothing) Then
                Me.tableTaille.InitVars
            End If
        End If
        Me.tableAffichage = CType(MyBase.Tables("Affichage"),AffichageDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAffichage) Is Nothing) Then
                Me.tableAffichage.InitVars
            End If
        End If
        Me.tableNord = CType(MyBase.Tables("Nord"),NordDataTable)
        If (initTable = true) Then
            If (Not (Me.tableNord) Is Nothing) Then
                Me.tableNord.InitVars
            End If
        End If
        Me.tablepNord = CType(MyBase.Tables("pNord"),pNordDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepNord) Is Nothing) Then
                Me.tablepNord.InitVars
            End If
        End If
        Me.tableSymEchelle = CType(MyBase.Tables("SymEchelle"),SymEchelleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSymEchelle) Is Nothing) Then
                Me.tableSymEchelle.InitVars
            End If
        End If
        Me.tablepSymEchelle = CType(MyBase.Tables("pSymEchelle"),pSymEchelleDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepSymEchelle) Is Nothing) Then
                Me.tablepSymEchelle.InitVars
            End If
        End If
        Me.tableFondPlan = CType(MyBase.Tables("FondPlan"),FondPlanDataTable)
        If (initTable = true) Then
            If (Not (Me.tableFondPlan) Is Nothing) Then
                Me.tableFondPlan.InitVars
            End If
        End If
        Me.tableMonDXF = CType(MyBase.Tables("MonDXF"),MonDXFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableMonDXF) Is Nothing) Then
                Me.tableMonDXF.InitVars
            End If
        End If
        Me.tableBranche = CType(MyBase.Tables("Branche"),BrancheDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBranche) Is Nothing) Then
                Me.tableBranche.InitVars
            End If
        End If
        Me.tableIlot = CType(MyBase.Tables("Ilot"),IlotDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIlot) Is Nothing) Then
                Me.tableIlot.InitVars
            End If
        End If
        Me.tableVoie = CType(MyBase.Tables("Voie"),VoieDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVoie) Is Nothing) Then
                Me.tableVoie.InitVars
            End If
        End If
        Me.tableptFlechesTrafic = CType(MyBase.Tables("ptFlechesTrafic"),ptFlechesTraficDataTable)
        If (initTable = true) Then
            If (Not (Me.tableptFlechesTrafic) Is Nothing) Then
                Me.tableptFlechesTrafic.InitVars
            End If
        End If
        Me.tableOrigine = CType(MyBase.Tables("Origine"),OrigineDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrigine) Is Nothing) Then
                Me.tableOrigine.InitVars
            End If
        End If
        Me.tablePassage = CType(MyBase.Tables("Passage"),PassageDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePassage) Is Nothing) Then
                Me.tablePassage.InitVars
            End If
        End If
        Me.tablePoint = CType(MyBase.Tables("Point"),PointDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePoint) Is Nothing) Then
                Me.tablePoint.InitVars
            End If
        End If
        Me.tableVoieIntersectee = CType(MyBase.Tables("VoieIntersectee"),VoieIntersecteeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVoieIntersectee) Is Nothing) Then
                Me.tableVoieIntersectee.InitVars
            End If
        End If
        Me.tableLigneDeFeux = CType(MyBase.Tables("LigneDeFeux"),LigneDeFeuxDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLigneDeFeux) Is Nothing) Then
                Me.tableLigneDeFeux.InitVars
            End If
        End If
        Me.tableSignal = CType(MyBase.Tables("Signal"),SignalDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSignal) Is Nothing) Then
                Me.tableSignal.InitVars
            End If
        End If
        Me.tableRougeDégagement = CType(MyBase.Tables("RougeDégagement"),RougeDégagementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRougeDégagement) Is Nothing) Then
                Me.tableRougeDégagement.InitVars
            End If
        End If
        Me.tableIncompatible = CType(MyBase.Tables("Incompatible"),IncompatibleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIncompatible) Is Nothing) Then
                Me.tableIncompatible.InitVars
            End If
        End If
        Me.tableTrajectoire = CType(MyBase.Tables("Trajectoire"),TrajectoireDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTrajectoire) Is Nothing) Then
                Me.tableTrajectoire.InitVars
            End If
        End If
        Me.tablePiétons = CType(MyBase.Tables("Piétons"),PiétonsDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePiétons) Is Nothing) Then
                Me.tablePiétons.InitVars
            End If
        End If
        Me.tableVéhicules = CType(MyBase.Tables("Véhicules"),VéhiculesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableVéhicules) Is Nothing) Then
                Me.tableVéhicules.InitVars
            End If
        End If
        Me.tablePointManuel = CType(MyBase.Tables("PointManuel"),PointManuelDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePointManuel) Is Nothing) Then
                Me.tablePointManuel.InitVars
            End If
        End If
        Me.tableAntagonisme = CType(MyBase.Tables("Antagonisme"),AntagonismeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableAntagonisme) Is Nothing) Then
                Me.tableAntagonisme.InitVars
            End If
        End If
        Me.tablepAntago = CType(MyBase.Tables("pAntago"),pAntagoDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepAntago) Is Nothing) Then
                Me.tablepAntago.InitVars
            End If
        End If
        Me.tablePlanFeux = CType(MyBase.Tables("PlanFeux"),PlanFeuxDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePlanFeux) Is Nothing) Then
                Me.tablePlanFeux.InitVars
            End If
        End If
        Me.tablePhase = CType(MyBase.Tables("Phase"),PhaseDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePhase) Is Nothing) Then
                Me.tablePhase.InitVars
            End If
        End If
        Me.tableIDLigneFeux = CType(MyBase.Tables("IDLigneFeux"),IDLigneFeuxDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIDLigneFeux) Is Nothing) Then
                Me.tableIDLigneFeux.InitVars
            End If
        End If
        Me.tableIDLigneFeuxComposé = CType(MyBase.Tables("IDLigneFeuxComposé"),IDLigneFeuxComposéDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIDLigneFeuxComposé) Is Nothing) Then
                Me.tableIDLigneFeuxComposé.InitVars
            End If
        End If
        Me.tableOrdreLignes = CType(MyBase.Tables("OrdreLignes"),OrdreLignesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableOrdreLignes) Is Nothing) Then
                Me.tableOrdreLignes.InitVars
            End If
        End If
        Me.tableIncompatibles = CType(MyBase.Tables("Incompatibles"),IncompatiblesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableIncompatibles) Is Nothing) Then
                Me.tableIncompatibles.InitVars
            End If
        End If
        Me.tableRougesDégagement = CType(MyBase.Tables("RougesDégagement"),RougesDégagementDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRougesDégagement) Is Nothing) Then
                Me.tableRougesDégagement.InitVars
            End If
        End If
        Me.tableTypesConflit = CType(MyBase.Tables("TypesConflit"),TypesConflitDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTypesConflit) Is Nothing) Then
                Me.tableTypesConflit.InitVars
            End If
        End If
        Me.tableTrafic = CType(MyBase.Tables("Trafic"),TraficDataTable)
        If (initTable = true) Then
            If (Not (Me.tableTrafic) Is Nothing) Then
                Me.tableTrafic.InitVars
            End If
        End If
        Me.tableQPiéton = CType(MyBase.Tables("QPiéton"),QPiétonDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQPiéton) Is Nothing) Then
                Me.tableQPiéton.InitVars
            End If
        End If
        Me.tableQVéhicule = CType(MyBase.Tables("QVéhicule"),QVéhiculeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableQVéhicule) Is Nothing) Then
                Me.tableQVéhicule.InitVars
            End If
        End If
        Me.tablePropriétés = CType(MyBase.Tables("Propriétés"),PropriétésDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePropriétés) Is Nothing) Then
                Me.tablePropriétés.InitVars
            End If
        End If
        Me.tableCentre = CType(MyBase.Tables("Centre"),CentreDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCentre) Is Nothing) Then
                Me.tableCentre.InitVars
            End If
        End If
        Me.tableDXF = CType(MyBase.Tables("DXF"),DXFDataTable)
        If (initTable = true) Then
            If (Not (Me.tableDXF) Is Nothing) Then
                Me.tableDXF.InitVars
            End If
        End If
        Me.tableCalque = CType(MyBase.Tables("Calque"),CalqueDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCalque) Is Nothing) Then
                Me.tableCalque.InitVars
            End If
        End If
        Me.tableBloc = CType(MyBase.Tables("Bloc"),BlocDataTable)
        If (initTable = true) Then
            If (Not (Me.tableBloc) Is Nothing) Then
                Me.tableBloc.InitVars
            End If
        End If
        Me.tableLIGNE = CType(MyBase.Tables("LIGNE"),LIGNEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLIGNE) Is Nothing) Then
                Me.tableLIGNE.InitVars
            End If
        End If
        Me.tablePA = CType(MyBase.Tables("PA"),PADataTable)
        If (initTable = true) Then
            If (Not (Me.tablePA) Is Nothing) Then
                Me.tablePA.InitVars
            End If
        End If
        Me.tableARC = CType(MyBase.Tables("ARC"),ARCDataTable)
        If (initTable = true) Then
            If (Not (Me.tableARC) Is Nothing) Then
                Me.tableARC.InitVars
            End If
        End If
        Me.tableCentreArc = CType(MyBase.Tables("CentreArc"),CentreArcDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCentreArc) Is Nothing) Then
                Me.tableCentreArc.InitVars
            End If
        End If
        Me.tableCERCLE = CType(MyBase.Tables("CERCLE"),CERCLEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCERCLE) Is Nothing) Then
                Me.tableCERCLE.InitVars
            End If
        End If
        Me.tableCentreCercle = CType(MyBase.Tables("CentreCercle"),CentreCercleDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCentreCercle) Is Nothing) Then
                Me.tableCentreCercle.InitVars
            End If
        End If
        Me.tablePOLYARC = CType(MyBase.Tables("POLYARC"),POLYARCDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePOLYARC) Is Nothing) Then
                Me.tablePOLYARC.InitVars
            End If
        End If
        Me.tablePI = CType(MyBase.Tables("PI"),PIDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePI) Is Nothing) Then
                Me.tablePI.InitVars
            End If
        End If
        Me.tableP = CType(MyBase.Tables("P"),PDataTable)
        If (initTable = true) Then
            If (Not (Me.tableP) Is Nothing) Then
                Me.tableP.InitVars
            End If
        End If
        Me.tableSPLINE = CType(MyBase.Tables("SPLINE"),SPLINEDataTable)
        If (initTable = true) Then
            If (Not (Me.tableSPLINE) Is Nothing) Then
                Me.tableSPLINE.InitVars
            End If
        End If
        Me.tablePtDessiné = CType(MyBase.Tables("PtDessiné"),PtDessinéDataTable)
        If (initTable = true) Then
            If (Not (Me.tablePtDessiné) Is Nothing) Then
                Me.tablePtDessiné.InitVars
            End If
        End If
        Me.tableINSERT = CType(MyBase.Tables("INSERT"),INSERTDataTable)
        If (initTable = true) Then
            If (Not (Me.tableINSERT) Is Nothing) Then
                Me.tableINSERT.InitVars
            End If
        End If
        Me.tablepInsertion = CType(MyBase.Tables("pInsertion"),pInsertionDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepInsertion) Is Nothing) Then
                Me.tablepInsertion.InitVars
            End If
        End If
        Me.tableLimites = CType(MyBase.Tables("Limites"),LimitesDataTable)
        If (initTable = true) Then
            If (Not (Me.tableLimites) Is Nothing) Then
                Me.tableLimites.InitVars
            End If
        End If
        Me.tablepMin = CType(MyBase.Tables("pMin"),pMinDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepMin) Is Nothing) Then
                Me.tablepMin.InitVars
            End If
        End If
        Me.tablepMax = CType(MyBase.Tables("pMax"),pMaxDataTable)
        If (initTable = true) Then
            If (Not (Me.tablepMax) Is Nothing) Then
                Me.tablepMax.InitVars
            End If
        End If
        Me.relationSchémaACONDIA_Paramétrage = Me.Relations("SchémaACONDIA_Paramétrage")
        Me.relationSchémaACONDIA_ParamFixe = Me.Relations("SchémaACONDIA_ParamFixe")
        Me.relationSchémaACONDIA_TableCycleCapacité = Me.Relations("SchémaACONDIA_TableCycleCapacité")
        Me.relationTableCycleCapacité_DuréeCycle = Me.Relations("TableCycleCapacité_DuréeCycle")
        Me.relationDuréeCycle_DemandeCarrefour = Me.Relations("DuréeCycle_DemandeCarrefour")
        Me.relationSchémaACONDIA_Carrefour = Me.Relations("SchémaACONDIA_Carrefour")
        Me.relationCarrefour_Variante = Me.Relations("Carrefour_Variante")
        Me.relationVariante_ParamDessin = Me.Relations("Variante_ParamDessin")
        Me.relationParamDessin_OrigineReelle = Me.Relations("ParamDessin_OrigineReelle")
        Me.relationParamDessin_Taille = Me.Relations("ParamDessin_Taille")
        Me.relationVariante_Affichage = Me.Relations("Variante_Affichage")
        Me.relationAffichage_Nord = Me.Relations("Affichage_Nord")
        Me.relationNord_pNord = Me.Relations("Nord_pNord")
        Me.relationAffichage_SymEchelle = Me.Relations("Affichage_SymEchelle")
        Me.relationSymEchelle_pSymEchelle = Me.Relations("SymEchelle_pSymEchelle")
        Me.relationVariante_FondPlan = Me.Relations("Variante_FondPlan")
        Me.relationFondPlan_MonDXF = Me.Relations("FondPlan_MonDXF")
        Me.relationVariante_Branche = Me.Relations("Variante_Branche")
        Me.relationBranche_Ilot = Me.Relations("Branche_Ilot")
        Me.relationBranche_Voie = Me.Relations("Branche_Voie")
        Me.relationBranche_ptFlechesTrafic = Me.Relations("Branche_ptFlechesTrafic")
        Me.relationBranche_Origine = Me.Relations("Branche_Origine")
        Me.relationBranche_Passage = Me.Relations("Branche_Passage")
        Me.relationPassage_Point = Me.Relations("Passage_Point")
        Me.relationPassage_VoieIntersectee = Me.Relations("Passage_VoieIntersectee")
        Me.relationVariante_LigneDeFeux = Me.Relations("Variante_LigneDeFeux")
        Me.relationLigneDeFeux_Signal = Me.Relations("LigneDeFeux_Signal")
        Me.relationLigneDeFeux_RougeDégagement = Me.Relations("LigneDeFeux_RougeDégagement")
        Me.relationLigneDeFeux_Incompatible = Me.Relations("LigneDeFeux_Incompatible")
        Me.relationVariante_Trajectoire = Me.Relations("Variante_Trajectoire")
        Me.relationTrajectoire_Piétons = Me.Relations("Trajectoire_Piétons")
        Me.relationTrajectoire_Véhicules = Me.Relations("Trajectoire_Véhicules")
        Me.relationVéhicules_PointManuel = Me.Relations("Véhicules_PointManuel")
        Me.relationVariante_Antagonisme = Me.Relations("Variante_Antagonisme")
        Me.relationAntagonisme_pAntago = Me.Relations("Antagonisme_pAntago")
        Me.relationVariante_PlanFeux = Me.Relations("Variante_PlanFeux")
        Me.relationPlanFeux_Phase = Me.Relations("PlanFeux_Phase")
        Me.relationPhase_IDLigneFeux = Me.Relations("Phase_IDLigneFeux")
        Me.relationPlanFeux_IDLigneFeuxComposé = Me.Relations("PlanFeux_IDLigneFeuxComposé")
        Me.relationPlanFeux_OrdreLignes = Me.Relations("PlanFeux_OrdreLignes")
        Me.relationPlanFeux_Incompatibles = Me.Relations("PlanFeux_Incompatibles")
        Me.relationPlanFeux_RougesDégagement = Me.Relations("PlanFeux_RougesDégagement")
        Me.relationPlanFeux_TypesConflit = Me.Relations("PlanFeux_TypesConflit")
        Me.relationVariante_Trafic = Me.Relations("Variante_Trafic")
        Me.relationTrafic_QPiéton = Me.Relations("Trafic_QPiéton")
        Me.relationTrafic_QVéhicule = Me.Relations("Trafic_QVéhicule")
        Me.relationCarrefour_Propriétés = Me.Relations("Carrefour_Propriétés")
        Me.relationPropriétés_Centre = Me.Relations("Propriétés_Centre")
        Me.relationSchémaACONDIA_DXF = Me.Relations("SchémaACONDIA_DXF")
        Me.relationDXF_Calque = Me.Relations("DXF_Calque")
        Me.relationDXF_Bloc = Me.Relations("DXF_Bloc")
        Me.relationBloc_LIGNE = Me.Relations("Bloc_LIGNE")
        Me.relationLIGNE_PA = Me.Relations("LIGNE_PA")
        Me.relationBloc_ARC = Me.Relations("Bloc_ARC")
        Me.relationARC_CentreArc = Me.Relations("ARC_CentreArc")
        Me.relationBloc_CERCLE = Me.Relations("Bloc_CERCLE")
        Me.relationCERCLE_CentreCercle = Me.Relations("CERCLE_CentreCercle")
        Me.relationBloc_POLYARC = Me.Relations("Bloc_POLYARC")
        Me.relationPOLYARC_PI = Me.Relations("POLYARC_PI")
        Me.relationPI_P = Me.Relations("PI_P")
        Me.relationBloc_SPLINE = Me.Relations("Bloc_SPLINE")
        Me.relationSPLINE_PtDessiné = Me.Relations("SPLINE_PtDessiné")
        Me.relationBloc_INSERT = Me.Relations("Bloc_INSERT")
        Me.relationINSERT_pInsertion = Me.Relations("INSERT_pInsertion")
        Me.relationDXF_Limites = Me.Relations("DXF_Limites")
        Me.relationLimites_pMin = Me.Relations("Limites_pMin")
        Me.relationLimites_pMax = Me.Relations("Limites_pMax")
    End Sub
    
    <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "DataSetDiagFeux"
        Me.Prefix = ""
        Me.Namespace = "http://cete.fr/namespace"
        Me.Locale = New System.Globalization.CultureInfo("")
        Me.EnforceConstraints = True
        Me.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableSchémaACONDIA = New SchémaACONDIADataTable
        MyBase.Tables.Add(Me.tableSchémaACONDIA)
        Me.tableParamétrage = New ParamétrageDataTable
        MyBase.Tables.Add(Me.tableParamétrage)
        Me.tableParamFixe = New ParamFixeDataTable
        MyBase.Tables.Add(Me.tableParamFixe)
        Me.tableTableCycleCapacité = New TableCycleCapacitéDataTable
        MyBase.Tables.Add(Me.tableTableCycleCapacité)
        Me.tableDuréeCycle = New DuréeCycleDataTable
        MyBase.Tables.Add(Me.tableDuréeCycle)
        Me.tableDemandeCarrefour = New DemandeCarrefourDataTable
        MyBase.Tables.Add(Me.tableDemandeCarrefour)
        Me.tableCarrefour = New CarrefourDataTable
        MyBase.Tables.Add(Me.tableCarrefour)
        Me.tableVariante = New VarianteDataTable
        MyBase.Tables.Add(Me.tableVariante)
        Me.tableParamDessin = New ParamDessinDataTable
        MyBase.Tables.Add(Me.tableParamDessin)
        Me.tableOrigineReelle = New OrigineReelleDataTable
        MyBase.Tables.Add(Me.tableOrigineReelle)
        Me.tableTaille = New TailleDataTable
        MyBase.Tables.Add(Me.tableTaille)
        Me.tableAffichage = New AffichageDataTable
        MyBase.Tables.Add(Me.tableAffichage)
        Me.tableNord = New NordDataTable
        MyBase.Tables.Add(Me.tableNord)
        Me.tablepNord = New pNordDataTable
        MyBase.Tables.Add(Me.tablepNord)
        Me.tableSymEchelle = New SymEchelleDataTable
        MyBase.Tables.Add(Me.tableSymEchelle)
        Me.tablepSymEchelle = New pSymEchelleDataTable
        MyBase.Tables.Add(Me.tablepSymEchelle)
        Me.tableFondPlan = New FondPlanDataTable
        MyBase.Tables.Add(Me.tableFondPlan)
        Me.tableMonDXF = New MonDXFDataTable
        MyBase.Tables.Add(Me.tableMonDXF)
        Me.tableBranche = New BrancheDataTable
        MyBase.Tables.Add(Me.tableBranche)
        Me.tableIlot = New IlotDataTable
        MyBase.Tables.Add(Me.tableIlot)
        Me.tableVoie = New VoieDataTable
        MyBase.Tables.Add(Me.tableVoie)
        Me.tableptFlechesTrafic = New ptFlechesTraficDataTable
        MyBase.Tables.Add(Me.tableptFlechesTrafic)
        Me.tableOrigine = New OrigineDataTable
        MyBase.Tables.Add(Me.tableOrigine)
        Me.tablePassage = New PassageDataTable
        MyBase.Tables.Add(Me.tablePassage)
        Me.tablePoint = New PointDataTable
        MyBase.Tables.Add(Me.tablePoint)
        Me.tableVoieIntersectee = New VoieIntersecteeDataTable
        MyBase.Tables.Add(Me.tableVoieIntersectee)
        Me.tableLigneDeFeux = New LigneDeFeuxDataTable
        MyBase.Tables.Add(Me.tableLigneDeFeux)
        Me.tableSignal = New SignalDataTable
        MyBase.Tables.Add(Me.tableSignal)
        Me.tableRougeDégagement = New RougeDégagementDataTable
        MyBase.Tables.Add(Me.tableRougeDégagement)
        Me.tableIncompatible = New IncompatibleDataTable
        MyBase.Tables.Add(Me.tableIncompatible)
        Me.tableTrajectoire = New TrajectoireDataTable
        MyBase.Tables.Add(Me.tableTrajectoire)
        Me.tablePiétons = New PiétonsDataTable
        MyBase.Tables.Add(Me.tablePiétons)
        Me.tableVéhicules = New VéhiculesDataTable
        MyBase.Tables.Add(Me.tableVéhicules)
        Me.tablePointManuel = New PointManuelDataTable
        MyBase.Tables.Add(Me.tablePointManuel)
        Me.tableAntagonisme = New AntagonismeDataTable
        MyBase.Tables.Add(Me.tableAntagonisme)
        Me.tablepAntago = New pAntagoDataTable
        MyBase.Tables.Add(Me.tablepAntago)
        Me.tablePlanFeux = New PlanFeuxDataTable
        MyBase.Tables.Add(Me.tablePlanFeux)
        Me.tablePhase = New PhaseDataTable
        MyBase.Tables.Add(Me.tablePhase)
        Me.tableIDLigneFeux = New IDLigneFeuxDataTable
        MyBase.Tables.Add(Me.tableIDLigneFeux)
        Me.tableIDLigneFeuxComposé = New IDLigneFeuxComposéDataTable
        MyBase.Tables.Add(Me.tableIDLigneFeuxComposé)
        Me.tableOrdreLignes = New OrdreLignesDataTable
        MyBase.Tables.Add(Me.tableOrdreLignes)
        Me.tableIncompatibles = New IncompatiblesDataTable
        MyBase.Tables.Add(Me.tableIncompatibles)
        Me.tableRougesDégagement = New RougesDégagementDataTable
        MyBase.Tables.Add(Me.tableRougesDégagement)
        Me.tableTypesConflit = New TypesConflitDataTable
        MyBase.Tables.Add(Me.tableTypesConflit)
        Me.tableTrafic = New TraficDataTable
        MyBase.Tables.Add(Me.tableTrafic)
        Me.tableQPiéton = New QPiétonDataTable
        MyBase.Tables.Add(Me.tableQPiéton)
        Me.tableQVéhicule = New QVéhiculeDataTable
        MyBase.Tables.Add(Me.tableQVéhicule)
        Me.tablePropriétés = New PropriétésDataTable
        MyBase.Tables.Add(Me.tablePropriétés)
        Me.tableCentre = New CentreDataTable
        MyBase.Tables.Add(Me.tableCentre)
        Me.tableDXF = New DXFDataTable
        MyBase.Tables.Add(Me.tableDXF)
        Me.tableCalque = New CalqueDataTable
        MyBase.Tables.Add(Me.tableCalque)
        Me.tableBloc = New BlocDataTable
        MyBase.Tables.Add(Me.tableBloc)
        Me.tableLIGNE = New LIGNEDataTable
        MyBase.Tables.Add(Me.tableLIGNE)
        Me.tablePA = New PADataTable
        MyBase.Tables.Add(Me.tablePA)
        Me.tableARC = New ARCDataTable
        MyBase.Tables.Add(Me.tableARC)
        Me.tableCentreArc = New CentreArcDataTable
        MyBase.Tables.Add(Me.tableCentreArc)
        Me.tableCERCLE = New CERCLEDataTable
        MyBase.Tables.Add(Me.tableCERCLE)
        Me.tableCentreCercle = New CentreCercleDataTable
        MyBase.Tables.Add(Me.tableCentreCercle)
        Me.tablePOLYARC = New POLYARCDataTable
        MyBase.Tables.Add(Me.tablePOLYARC)
        Me.tablePI = New PIDataTable
        MyBase.Tables.Add(Me.tablePI)
        Me.tableP = New PDataTable
        MyBase.Tables.Add(Me.tableP)
        Me.tableSPLINE = New SPLINEDataTable
        MyBase.Tables.Add(Me.tableSPLINE)
        Me.tablePtDessiné = New PtDessinéDataTable
        MyBase.Tables.Add(Me.tablePtDessiné)
        Me.tableINSERT = New INSERTDataTable
        MyBase.Tables.Add(Me.tableINSERT)
        Me.tablepInsertion = New pInsertionDataTable
        MyBase.Tables.Add(Me.tablepInsertion)
        Me.tableLimites = New LimitesDataTable
        MyBase.Tables.Add(Me.tableLimites)
        Me.tablepMin = New pMinDataTable
        MyBase.Tables.Add(Me.tablepMin)
        Me.tablepMax = New pMaxDataTable
        MyBase.Tables.Add(Me.tablepMax)
        Dim fkc As System.Data.ForeignKeyConstraint
        fkc = New System.Data.ForeignKeyConstraint("SchémaACONDIA_Paramétrage", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableParamétrage.SchémaACONDIA_IdColumn})
        Me.tableParamétrage.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("SchémaACONDIA_ParamFixe", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableParamFixe.SchémaACONDIA_IdColumn})
        Me.tableParamFixe.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("SchémaACONDIA_TableCycleCapacité", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableTableCycleCapacité.SchémaACONDIA_IdColumn})
        Me.tableTableCycleCapacité.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("TableCycleCapacité_DuréeCycle", New System.Data.DataColumn() {Me.tableTableCycleCapacité.TableCycleCapacité_IdColumn}, New System.Data.DataColumn() {Me.tableDuréeCycle.TableCycleCapacité_IdColumn})
        Me.tableDuréeCycle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("DuréeCycle_DemandeCarrefour", New System.Data.DataColumn() {Me.tableDuréeCycle.DuréeCycle_IdColumn}, New System.Data.DataColumn() {Me.tableDemandeCarrefour.DuréeCycle_IdColumn})
        Me.tableDemandeCarrefour.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("SchémaACONDIA_Carrefour", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableCarrefour.SchémaACONDIA_IdColumn})
        Me.tableCarrefour.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Carrefour_Variante", New System.Data.DataColumn() {Me.tableCarrefour.Carrefour_IdColumn}, New System.Data.DataColumn() {Me.tableVariante.Carrefour_IdColumn})
        Me.tableVariante.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_ParamDessin", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableParamDessin.Variante_IdColumn})
        Me.tableParamDessin.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("ParamDessin_OrigineReelle", New System.Data.DataColumn() {Me.tableParamDessin.ParamDessin_IdColumn}, New System.Data.DataColumn() {Me.tableOrigineReelle.ParamDessin_IdColumn})
        Me.tableOrigineReelle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("ParamDessin_Taille", New System.Data.DataColumn() {Me.tableParamDessin.ParamDessin_IdColumn}, New System.Data.DataColumn() {Me.tableTaille.ParamDessin_IdColumn})
        Me.tableTaille.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_Affichage", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableAffichage.Variante_IdColumn})
        Me.tableAffichage.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Affichage_Nord", New System.Data.DataColumn() {Me.tableAffichage.Affichage_IdColumn}, New System.Data.DataColumn() {Me.tableNord.Affichage_IdColumn})
        Me.tableNord.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Nord_pNord", New System.Data.DataColumn() {Me.tableNord.Nord_IdColumn}, New System.Data.DataColumn() {Me.tablepNord.Nord_IdColumn})
        Me.tablepNord.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Affichage_SymEchelle", New System.Data.DataColumn() {Me.tableAffichage.Affichage_IdColumn}, New System.Data.DataColumn() {Me.tableSymEchelle.Affichage_IdColumn})
        Me.tableSymEchelle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("SymEchelle_pSymEchelle", New System.Data.DataColumn() {Me.tableSymEchelle.SymEchelle_IdColumn}, New System.Data.DataColumn() {Me.tablepSymEchelle.SymEchelle_IdColumn})
        Me.tablepSymEchelle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_FondPlan", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableFondPlan.Variante_IdColumn})
        Me.tableFondPlan.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("FondPlan_MonDXF", New System.Data.DataColumn() {Me.tableFondPlan.FondPlan_IdColumn}, New System.Data.DataColumn() {Me.tableMonDXF.FondPlan_IdColumn})
        Me.tableMonDXF.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_Branche", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableBranche.Variante_IdColumn})
        Me.tableBranche.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Branche_Ilot", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tableIlot.Branche_IdColumn})
        Me.tableIlot.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Branche_Voie", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tableVoie.Branche_IdColumn})
        Me.tableVoie.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Branche_ptFlechesTrafic", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tableptFlechesTrafic.Branche_IdColumn})
        Me.tableptFlechesTrafic.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Branche_Origine", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tableOrigine.Branche_IdColumn})
        Me.tableOrigine.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Branche_Passage", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tablePassage.Branche_IdColumn})
        Me.tablePassage.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Passage_Point", New System.Data.DataColumn() {Me.tablePassage.Passage_IdColumn}, New System.Data.DataColumn() {Me.tablePoint.Passage_IdColumn})
        Me.tablePoint.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Passage_VoieIntersectee", New System.Data.DataColumn() {Me.tablePassage.Passage_IdColumn}, New System.Data.DataColumn() {Me.tableVoieIntersectee.Passage_IdColumn})
        Me.tableVoieIntersectee.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_LigneDeFeux", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableLigneDeFeux.Variante_IdColumn})
        Me.tableLigneDeFeux.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("LigneDeFeux_Signal", New System.Data.DataColumn() {Me.tableLigneDeFeux.LigneDeFeux_IdColumn}, New System.Data.DataColumn() {Me.tableSignal.LigneDeFeux_IdColumn})
        Me.tableSignal.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("LigneDeFeux_RougeDégagement", New System.Data.DataColumn() {Me.tableLigneDeFeux.LigneDeFeux_IdColumn}, New System.Data.DataColumn() {Me.tableRougeDégagement.LigneDeFeux_IdColumn})
        Me.tableRougeDégagement.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("LigneDeFeux_Incompatible", New System.Data.DataColumn() {Me.tableLigneDeFeux.LigneDeFeux_IdColumn}, New System.Data.DataColumn() {Me.tableIncompatible.LigneDeFeux_IdColumn})
        Me.tableIncompatible.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_Trajectoire", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableTrajectoire.Variante_IdColumn})
        Me.tableTrajectoire.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Trajectoire_Piétons", New System.Data.DataColumn() {Me.tableTrajectoire.Trajectoire_IdColumn}, New System.Data.DataColumn() {Me.tablePiétons.Trajectoire_IdColumn})
        Me.tablePiétons.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Trajectoire_Véhicules", New System.Data.DataColumn() {Me.tableTrajectoire.Trajectoire_IdColumn}, New System.Data.DataColumn() {Me.tableVéhicules.Trajectoire_IdColumn})
        Me.tableVéhicules.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Véhicules_PointManuel", New System.Data.DataColumn() {Me.tableVéhicules.Véhicules_IdColumn}, New System.Data.DataColumn() {Me.tablePointManuel.Véhicules_IdColumn})
        Me.tablePointManuel.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_Antagonisme", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableAntagonisme.Variante_IdColumn})
        Me.tableAntagonisme.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Antagonisme_pAntago", New System.Data.DataColumn() {Me.tableAntagonisme.Antagonisme_IdColumn}, New System.Data.DataColumn() {Me.tablepAntago.Antagonisme_IdColumn})
        Me.tablepAntago.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_PlanFeux", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tablePlanFeux.Variante_IdColumn})
        Me.tablePlanFeux.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("PlanFeux_Phase", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tablePhase.PlanFeux_IdColumn})
        Me.tablePhase.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Phase_IDLigneFeux", New System.Data.DataColumn() {Me.tablePhase.Phase_IdColumn}, New System.Data.DataColumn() {Me.tableIDLigneFeux.Phase_IdColumn})
        Me.tableIDLigneFeux.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("PlanFeux_IDLigneFeuxComposé", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableIDLigneFeuxComposé.PlanFeux_IdColumn})
        Me.tableIDLigneFeuxComposé.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("PlanFeux_OrdreLignes", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableOrdreLignes.PlanFeux_IdColumn})
        Me.tableOrdreLignes.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("PlanFeux_Incompatibles", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableIncompatibles.PlanFeux_IdColumn})
        Me.tableIncompatibles.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("PlanFeux_RougesDégagement", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableRougesDégagement.PlanFeux_IdColumn})
        Me.tableRougesDégagement.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("PlanFeux_TypesConflit", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableTypesConflit.PlanFeux_IdColumn})
        Me.tableTypesConflit.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Variante_Trafic", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableTrafic.Variante_IdColumn})
        Me.tableTrafic.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Trafic_QPiéton", New System.Data.DataColumn() {Me.tableTrafic.Trafic_IdColumn}, New System.Data.DataColumn() {Me.tableQPiéton.Trafic_IdColumn})
        Me.tableQPiéton.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Trafic_QVéhicule", New System.Data.DataColumn() {Me.tableTrafic.Trafic_IdColumn}, New System.Data.DataColumn() {Me.tableQVéhicule.Trafic_IdColumn})
        Me.tableQVéhicule.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Carrefour_Propriétés", New System.Data.DataColumn() {Me.tableCarrefour.Carrefour_IdColumn}, New System.Data.DataColumn() {Me.tablePropriétés.Carrefour_IdColumn})
        Me.tablePropriétés.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Propriétés_Centre", New System.Data.DataColumn() {Me.tablePropriétés.Propriétés_IdColumn}, New System.Data.DataColumn() {Me.tableCentre.Propriétés_IdColumn})
        Me.tableCentre.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("SchémaACONDIA_DXF", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableDXF.SchémaACONDIA_IdColumn})
        Me.tableDXF.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("DXF_Calque", New System.Data.DataColumn() {Me.tableDXF.DXF_IdColumn}, New System.Data.DataColumn() {Me.tableCalque.DXF_IdColumn})
        Me.tableCalque.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("DXF_Bloc", New System.Data.DataColumn() {Me.tableDXF.DXF_IdColumn}, New System.Data.DataColumn() {Me.tableBloc.DXF_IdColumn})
        Me.tableBloc.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Bloc_LIGNE", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableLIGNE.Bloc_IdColumn})
        Me.tableLIGNE.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("LIGNE_PA", New System.Data.DataColumn() {Me.tableLIGNE.LIGNE_IdColumn}, New System.Data.DataColumn() {Me.tablePA.LIGNE_IdColumn})
        Me.tablePA.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Bloc_ARC", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableARC.Bloc_IdColumn})
        Me.tableARC.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("ARC_CentreArc", New System.Data.DataColumn() {Me.tableARC.ARC_IdColumn}, New System.Data.DataColumn() {Me.tableCentreArc.ARC_IdColumn})
        Me.tableCentreArc.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Bloc_CERCLE", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableCERCLE.Bloc_IdColumn})
        Me.tableCERCLE.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("CERCLE_CentreCercle", New System.Data.DataColumn() {Me.tableCERCLE.CERCLE_IdColumn}, New System.Data.DataColumn() {Me.tableCentreCercle.CERCLE_IdColumn})
        Me.tableCentreCercle.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Bloc_POLYARC", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tablePOLYARC.Bloc_IdColumn})
        Me.tablePOLYARC.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("POLYARC_PI", New System.Data.DataColumn() {Me.tablePOLYARC.POLYARC_IdColumn}, New System.Data.DataColumn() {Me.tablePI.POLYARC_IdColumn})
        Me.tablePI.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("PI_P", New System.Data.DataColumn() {Me.tablePI.PI_IdColumn}, New System.Data.DataColumn() {Me.tableP.PI_IdColumn})
        Me.tableP.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Bloc_SPLINE", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableSPLINE.Bloc_IdColumn})
        Me.tableSPLINE.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("SPLINE_PtDessiné", New System.Data.DataColumn() {Me.tableSPLINE.SPLINE_IdColumn}, New System.Data.DataColumn() {Me.tablePtDessiné.SPLINE_IdColumn})
        Me.tablePtDessiné.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Bloc_INSERT", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableINSERT.Bloc_IdColumn})
        Me.tableINSERT.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("INSERT_pInsertion", New System.Data.DataColumn() {Me.tableINSERT.INSERT_IdColumn}, New System.Data.DataColumn() {Me.tablepInsertion.INSERT_IdColumn})
        Me.tablepInsertion.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("DXF_Limites", New System.Data.DataColumn() {Me.tableDXF.DXF_IdColumn}, New System.Data.DataColumn() {Me.tableLimites.DXF_IdColumn})
        Me.tableLimites.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Limites_pMin", New System.Data.DataColumn() {Me.tableLimites.Limites_IdColumn}, New System.Data.DataColumn() {Me.tablepMin.Limites_IdColumn})
        Me.tablepMin.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        fkc = New System.Data.ForeignKeyConstraint("Limites_pMax", New System.Data.DataColumn() {Me.tableLimites.Limites_IdColumn}, New System.Data.DataColumn() {Me.tablepMax.Limites_IdColumn})
        Me.tablepMax.Constraints.Add(fkc)
        fkc.AcceptRejectRule = System.Data.AcceptRejectRule.None
        fkc.DeleteRule = System.Data.Rule.Cascade
        fkc.UpdateRule = System.Data.Rule.Cascade
        Me.relationSchémaACONDIA_Paramétrage = New System.Data.DataRelation("SchémaACONDIA_Paramétrage", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableParamétrage.SchémaACONDIA_IdColumn}, False)
        Me.relationSchémaACONDIA_Paramétrage.Nested = True
        Me.Relations.Add(Me.relationSchémaACONDIA_Paramétrage)
        Me.relationSchémaACONDIA_ParamFixe = New System.Data.DataRelation("SchémaACONDIA_ParamFixe", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableParamFixe.SchémaACONDIA_IdColumn}, False)
        Me.relationSchémaACONDIA_ParamFixe.Nested = True
        Me.Relations.Add(Me.relationSchémaACONDIA_ParamFixe)
        Me.relationSchémaACONDIA_TableCycleCapacité = New System.Data.DataRelation("SchémaACONDIA_TableCycleCapacité", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableTableCycleCapacité.SchémaACONDIA_IdColumn}, False)
        Me.relationSchémaACONDIA_TableCycleCapacité.Nested = True
        Me.Relations.Add(Me.relationSchémaACONDIA_TableCycleCapacité)
        Me.relationTableCycleCapacité_DuréeCycle = New System.Data.DataRelation("TableCycleCapacité_DuréeCycle", New System.Data.DataColumn() {Me.tableTableCycleCapacité.TableCycleCapacité_IdColumn}, New System.Data.DataColumn() {Me.tableDuréeCycle.TableCycleCapacité_IdColumn}, False)
        Me.relationTableCycleCapacité_DuréeCycle.Nested = True
        Me.Relations.Add(Me.relationTableCycleCapacité_DuréeCycle)
        Me.relationDuréeCycle_DemandeCarrefour = New System.Data.DataRelation("DuréeCycle_DemandeCarrefour", New System.Data.DataColumn() {Me.tableDuréeCycle.DuréeCycle_IdColumn}, New System.Data.DataColumn() {Me.tableDemandeCarrefour.DuréeCycle_IdColumn}, False)
        Me.relationDuréeCycle_DemandeCarrefour.Nested = True
        Me.Relations.Add(Me.relationDuréeCycle_DemandeCarrefour)
        Me.relationSchémaACONDIA_Carrefour = New System.Data.DataRelation("SchémaACONDIA_Carrefour", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableCarrefour.SchémaACONDIA_IdColumn}, False)
        Me.relationSchémaACONDIA_Carrefour.Nested = True
        Me.Relations.Add(Me.relationSchémaACONDIA_Carrefour)
        Me.relationCarrefour_Variante = New System.Data.DataRelation("Carrefour_Variante", New System.Data.DataColumn() {Me.tableCarrefour.Carrefour_IdColumn}, New System.Data.DataColumn() {Me.tableVariante.Carrefour_IdColumn}, False)
        Me.relationCarrefour_Variante.Nested = True
        Me.Relations.Add(Me.relationCarrefour_Variante)
        Me.relationVariante_ParamDessin = New System.Data.DataRelation("Variante_ParamDessin", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableParamDessin.Variante_IdColumn}, False)
        Me.relationVariante_ParamDessin.Nested = True
        Me.Relations.Add(Me.relationVariante_ParamDessin)
        Me.relationParamDessin_OrigineReelle = New System.Data.DataRelation("ParamDessin_OrigineReelle", New System.Data.DataColumn() {Me.tableParamDessin.ParamDessin_IdColumn}, New System.Data.DataColumn() {Me.tableOrigineReelle.ParamDessin_IdColumn}, False)
        Me.relationParamDessin_OrigineReelle.Nested = True
        Me.Relations.Add(Me.relationParamDessin_OrigineReelle)
        Me.relationParamDessin_Taille = New System.Data.DataRelation("ParamDessin_Taille", New System.Data.DataColumn() {Me.tableParamDessin.ParamDessin_IdColumn}, New System.Data.DataColumn() {Me.tableTaille.ParamDessin_IdColumn}, False)
        Me.relationParamDessin_Taille.Nested = True
        Me.Relations.Add(Me.relationParamDessin_Taille)
        Me.relationVariante_Affichage = New System.Data.DataRelation("Variante_Affichage", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableAffichage.Variante_IdColumn}, False)
        Me.relationVariante_Affichage.Nested = True
        Me.Relations.Add(Me.relationVariante_Affichage)
        Me.relationAffichage_Nord = New System.Data.DataRelation("Affichage_Nord", New System.Data.DataColumn() {Me.tableAffichage.Affichage_IdColumn}, New System.Data.DataColumn() {Me.tableNord.Affichage_IdColumn}, False)
        Me.relationAffichage_Nord.Nested = True
        Me.Relations.Add(Me.relationAffichage_Nord)
        Me.relationNord_pNord = New System.Data.DataRelation("Nord_pNord", New System.Data.DataColumn() {Me.tableNord.Nord_IdColumn}, New System.Data.DataColumn() {Me.tablepNord.Nord_IdColumn}, False)
        Me.relationNord_pNord.Nested = True
        Me.Relations.Add(Me.relationNord_pNord)
        Me.relationAffichage_SymEchelle = New System.Data.DataRelation("Affichage_SymEchelle", New System.Data.DataColumn() {Me.tableAffichage.Affichage_IdColumn}, New System.Data.DataColumn() {Me.tableSymEchelle.Affichage_IdColumn}, False)
        Me.relationAffichage_SymEchelle.Nested = True
        Me.Relations.Add(Me.relationAffichage_SymEchelle)
        Me.relationSymEchelle_pSymEchelle = New System.Data.DataRelation("SymEchelle_pSymEchelle", New System.Data.DataColumn() {Me.tableSymEchelle.SymEchelle_IdColumn}, New System.Data.DataColumn() {Me.tablepSymEchelle.SymEchelle_IdColumn}, False)
        Me.relationSymEchelle_pSymEchelle.Nested = True
        Me.Relations.Add(Me.relationSymEchelle_pSymEchelle)
        Me.relationVariante_FondPlan = New System.Data.DataRelation("Variante_FondPlan", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableFondPlan.Variante_IdColumn}, False)
        Me.relationVariante_FondPlan.Nested = True
        Me.Relations.Add(Me.relationVariante_FondPlan)
        Me.relationFondPlan_MonDXF = New System.Data.DataRelation("FondPlan_MonDXF", New System.Data.DataColumn() {Me.tableFondPlan.FondPlan_IdColumn}, New System.Data.DataColumn() {Me.tableMonDXF.FondPlan_IdColumn}, False)
        Me.relationFondPlan_MonDXF.Nested = True
        Me.Relations.Add(Me.relationFondPlan_MonDXF)
        Me.relationVariante_Branche = New System.Data.DataRelation("Variante_Branche", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableBranche.Variante_IdColumn}, False)
        Me.relationVariante_Branche.Nested = True
        Me.Relations.Add(Me.relationVariante_Branche)
        Me.relationBranche_Ilot = New System.Data.DataRelation("Branche_Ilot", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tableIlot.Branche_IdColumn}, False)
        Me.relationBranche_Ilot.Nested = True
        Me.Relations.Add(Me.relationBranche_Ilot)
        Me.relationBranche_Voie = New System.Data.DataRelation("Branche_Voie", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tableVoie.Branche_IdColumn}, False)
        Me.relationBranche_Voie.Nested = True
        Me.Relations.Add(Me.relationBranche_Voie)
        Me.relationBranche_ptFlechesTrafic = New System.Data.DataRelation("Branche_ptFlechesTrafic", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tableptFlechesTrafic.Branche_IdColumn}, False)
        Me.relationBranche_ptFlechesTrafic.Nested = True
        Me.Relations.Add(Me.relationBranche_ptFlechesTrafic)
        Me.relationBranche_Origine = New System.Data.DataRelation("Branche_Origine", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tableOrigine.Branche_IdColumn}, False)
        Me.relationBranche_Origine.Nested = True
        Me.Relations.Add(Me.relationBranche_Origine)
        Me.relationBranche_Passage = New System.Data.DataRelation("Branche_Passage", New System.Data.DataColumn() {Me.tableBranche.Branche_IdColumn}, New System.Data.DataColumn() {Me.tablePassage.Branche_IdColumn}, False)
        Me.relationBranche_Passage.Nested = True
        Me.Relations.Add(Me.relationBranche_Passage)
        Me.relationPassage_Point = New System.Data.DataRelation("Passage_Point", New System.Data.DataColumn() {Me.tablePassage.Passage_IdColumn}, New System.Data.DataColumn() {Me.tablePoint.Passage_IdColumn}, False)
        Me.relationPassage_Point.Nested = True
        Me.Relations.Add(Me.relationPassage_Point)
        Me.relationPassage_VoieIntersectee = New System.Data.DataRelation("Passage_VoieIntersectee", New System.Data.DataColumn() {Me.tablePassage.Passage_IdColumn}, New System.Data.DataColumn() {Me.tableVoieIntersectee.Passage_IdColumn}, False)
        Me.relationPassage_VoieIntersectee.Nested = True
        Me.Relations.Add(Me.relationPassage_VoieIntersectee)
        Me.relationVariante_LigneDeFeux = New System.Data.DataRelation("Variante_LigneDeFeux", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableLigneDeFeux.Variante_IdColumn}, False)
        Me.relationVariante_LigneDeFeux.Nested = True
        Me.Relations.Add(Me.relationVariante_LigneDeFeux)
        Me.relationLigneDeFeux_Signal = New System.Data.DataRelation("LigneDeFeux_Signal", New System.Data.DataColumn() {Me.tableLigneDeFeux.LigneDeFeux_IdColumn}, New System.Data.DataColumn() {Me.tableSignal.LigneDeFeux_IdColumn}, False)
        Me.relationLigneDeFeux_Signal.Nested = True
        Me.Relations.Add(Me.relationLigneDeFeux_Signal)
        Me.relationLigneDeFeux_RougeDégagement = New System.Data.DataRelation("LigneDeFeux_RougeDégagement", New System.Data.DataColumn() {Me.tableLigneDeFeux.LigneDeFeux_IdColumn}, New System.Data.DataColumn() {Me.tableRougeDégagement.LigneDeFeux_IdColumn}, False)
        Me.relationLigneDeFeux_RougeDégagement.Nested = True
        Me.Relations.Add(Me.relationLigneDeFeux_RougeDégagement)
        Me.relationLigneDeFeux_Incompatible = New System.Data.DataRelation("LigneDeFeux_Incompatible", New System.Data.DataColumn() {Me.tableLigneDeFeux.LigneDeFeux_IdColumn}, New System.Data.DataColumn() {Me.tableIncompatible.LigneDeFeux_IdColumn}, False)
        Me.relationLigneDeFeux_Incompatible.Nested = True
        Me.Relations.Add(Me.relationLigneDeFeux_Incompatible)
        Me.relationVariante_Trajectoire = New System.Data.DataRelation("Variante_Trajectoire", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableTrajectoire.Variante_IdColumn}, False)
        Me.relationVariante_Trajectoire.Nested = True
        Me.Relations.Add(Me.relationVariante_Trajectoire)
        Me.relationTrajectoire_Piétons = New System.Data.DataRelation("Trajectoire_Piétons", New System.Data.DataColumn() {Me.tableTrajectoire.Trajectoire_IdColumn}, New System.Data.DataColumn() {Me.tablePiétons.Trajectoire_IdColumn}, False)
        Me.relationTrajectoire_Piétons.Nested = True
        Me.Relations.Add(Me.relationTrajectoire_Piétons)
        Me.relationTrajectoire_Véhicules = New System.Data.DataRelation("Trajectoire_Véhicules", New System.Data.DataColumn() {Me.tableTrajectoire.Trajectoire_IdColumn}, New System.Data.DataColumn() {Me.tableVéhicules.Trajectoire_IdColumn}, False)
        Me.relationTrajectoire_Véhicules.Nested = True
        Me.Relations.Add(Me.relationTrajectoire_Véhicules)
        Me.relationVéhicules_PointManuel = New System.Data.DataRelation("Véhicules_PointManuel", New System.Data.DataColumn() {Me.tableVéhicules.Véhicules_IdColumn}, New System.Data.DataColumn() {Me.tablePointManuel.Véhicules_IdColumn}, False)
        Me.relationVéhicules_PointManuel.Nested = True
        Me.Relations.Add(Me.relationVéhicules_PointManuel)
        Me.relationVariante_Antagonisme = New System.Data.DataRelation("Variante_Antagonisme", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableAntagonisme.Variante_IdColumn}, False)
        Me.relationVariante_Antagonisme.Nested = True
        Me.Relations.Add(Me.relationVariante_Antagonisme)
        Me.relationAntagonisme_pAntago = New System.Data.DataRelation("Antagonisme_pAntago", New System.Data.DataColumn() {Me.tableAntagonisme.Antagonisme_IdColumn}, New System.Data.DataColumn() {Me.tablepAntago.Antagonisme_IdColumn}, False)
        Me.relationAntagonisme_pAntago.Nested = True
        Me.Relations.Add(Me.relationAntagonisme_pAntago)
        Me.relationVariante_PlanFeux = New System.Data.DataRelation("Variante_PlanFeux", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tablePlanFeux.Variante_IdColumn}, False)
        Me.relationVariante_PlanFeux.Nested = True
        Me.Relations.Add(Me.relationVariante_PlanFeux)
        Me.relationPlanFeux_Phase = New System.Data.DataRelation("PlanFeux_Phase", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tablePhase.PlanFeux_IdColumn}, False)
        Me.relationPlanFeux_Phase.Nested = True
        Me.Relations.Add(Me.relationPlanFeux_Phase)
        Me.relationPhase_IDLigneFeux = New System.Data.DataRelation("Phase_IDLigneFeux", New System.Data.DataColumn() {Me.tablePhase.Phase_IdColumn}, New System.Data.DataColumn() {Me.tableIDLigneFeux.Phase_IdColumn}, False)
        Me.relationPhase_IDLigneFeux.Nested = True
        Me.Relations.Add(Me.relationPhase_IDLigneFeux)
        Me.relationPlanFeux_IDLigneFeuxComposé = New System.Data.DataRelation("PlanFeux_IDLigneFeuxComposé", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableIDLigneFeuxComposé.PlanFeux_IdColumn}, False)
        Me.relationPlanFeux_IDLigneFeuxComposé.Nested = True
        Me.Relations.Add(Me.relationPlanFeux_IDLigneFeuxComposé)
        Me.relationPlanFeux_OrdreLignes = New System.Data.DataRelation("PlanFeux_OrdreLignes", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableOrdreLignes.PlanFeux_IdColumn}, False)
        Me.relationPlanFeux_OrdreLignes.Nested = True
        Me.Relations.Add(Me.relationPlanFeux_OrdreLignes)
        Me.relationPlanFeux_Incompatibles = New System.Data.DataRelation("PlanFeux_Incompatibles", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableIncompatibles.PlanFeux_IdColumn}, False)
        Me.relationPlanFeux_Incompatibles.Nested = True
        Me.Relations.Add(Me.relationPlanFeux_Incompatibles)
        Me.relationPlanFeux_RougesDégagement = New System.Data.DataRelation("PlanFeux_RougesDégagement", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableRougesDégagement.PlanFeux_IdColumn}, False)
        Me.relationPlanFeux_RougesDégagement.Nested = True
        Me.Relations.Add(Me.relationPlanFeux_RougesDégagement)
        Me.relationPlanFeux_TypesConflit = New System.Data.DataRelation("PlanFeux_TypesConflit", New System.Data.DataColumn() {Me.tablePlanFeux.PlanFeux_IdColumn}, New System.Data.DataColumn() {Me.tableTypesConflit.PlanFeux_IdColumn}, False)
        Me.relationPlanFeux_TypesConflit.Nested = True
        Me.Relations.Add(Me.relationPlanFeux_TypesConflit)
        Me.relationVariante_Trafic = New System.Data.DataRelation("Variante_Trafic", New System.Data.DataColumn() {Me.tableVariante.Variante_IdColumn}, New System.Data.DataColumn() {Me.tableTrafic.Variante_IdColumn}, False)
        Me.relationVariante_Trafic.Nested = True
        Me.Relations.Add(Me.relationVariante_Trafic)
        Me.relationTrafic_QPiéton = New System.Data.DataRelation("Trafic_QPiéton", New System.Data.DataColumn() {Me.tableTrafic.Trafic_IdColumn}, New System.Data.DataColumn() {Me.tableQPiéton.Trafic_IdColumn}, False)
        Me.relationTrafic_QPiéton.Nested = True
        Me.Relations.Add(Me.relationTrafic_QPiéton)
        Me.relationTrafic_QVéhicule = New System.Data.DataRelation("Trafic_QVéhicule", New System.Data.DataColumn() {Me.tableTrafic.Trafic_IdColumn}, New System.Data.DataColumn() {Me.tableQVéhicule.Trafic_IdColumn}, False)
        Me.relationTrafic_QVéhicule.Nested = True
        Me.Relations.Add(Me.relationTrafic_QVéhicule)
        Me.relationCarrefour_Propriétés = New System.Data.DataRelation("Carrefour_Propriétés", New System.Data.DataColumn() {Me.tableCarrefour.Carrefour_IdColumn}, New System.Data.DataColumn() {Me.tablePropriétés.Carrefour_IdColumn}, False)
        Me.relationCarrefour_Propriétés.Nested = True
        Me.Relations.Add(Me.relationCarrefour_Propriétés)
        Me.relationPropriétés_Centre = New System.Data.DataRelation("Propriétés_Centre", New System.Data.DataColumn() {Me.tablePropriétés.Propriétés_IdColumn}, New System.Data.DataColumn() {Me.tableCentre.Propriétés_IdColumn}, False)
        Me.relationPropriétés_Centre.Nested = True
        Me.Relations.Add(Me.relationPropriétés_Centre)
        Me.relationSchémaACONDIA_DXF = New System.Data.DataRelation("SchémaACONDIA_DXF", New System.Data.DataColumn() {Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn}, New System.Data.DataColumn() {Me.tableDXF.SchémaACONDIA_IdColumn}, False)
        Me.relationSchémaACONDIA_DXF.Nested = True
        Me.Relations.Add(Me.relationSchémaACONDIA_DXF)
        Me.relationDXF_Calque = New System.Data.DataRelation("DXF_Calque", New System.Data.DataColumn() {Me.tableDXF.DXF_IdColumn}, New System.Data.DataColumn() {Me.tableCalque.DXF_IdColumn}, False)
        Me.relationDXF_Calque.Nested = True
        Me.Relations.Add(Me.relationDXF_Calque)
        Me.relationDXF_Bloc = New System.Data.DataRelation("DXF_Bloc", New System.Data.DataColumn() {Me.tableDXF.DXF_IdColumn}, New System.Data.DataColumn() {Me.tableBloc.DXF_IdColumn}, False)
        Me.relationDXF_Bloc.Nested = True
        Me.Relations.Add(Me.relationDXF_Bloc)
        Me.relationBloc_LIGNE = New System.Data.DataRelation("Bloc_LIGNE", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableLIGNE.Bloc_IdColumn}, False)
        Me.relationBloc_LIGNE.Nested = True
        Me.Relations.Add(Me.relationBloc_LIGNE)
        Me.relationLIGNE_PA = New System.Data.DataRelation("LIGNE_PA", New System.Data.DataColumn() {Me.tableLIGNE.LIGNE_IdColumn}, New System.Data.DataColumn() {Me.tablePA.LIGNE_IdColumn}, False)
        Me.relationLIGNE_PA.Nested = True
        Me.Relations.Add(Me.relationLIGNE_PA)
        Me.relationBloc_ARC = New System.Data.DataRelation("Bloc_ARC", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableARC.Bloc_IdColumn}, False)
        Me.relationBloc_ARC.Nested = True
        Me.Relations.Add(Me.relationBloc_ARC)
        Me.relationARC_CentreArc = New System.Data.DataRelation("ARC_CentreArc", New System.Data.DataColumn() {Me.tableARC.ARC_IdColumn}, New System.Data.DataColumn() {Me.tableCentreArc.ARC_IdColumn}, False)
        Me.relationARC_CentreArc.Nested = True
        Me.Relations.Add(Me.relationARC_CentreArc)
        Me.relationBloc_CERCLE = New System.Data.DataRelation("Bloc_CERCLE", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableCERCLE.Bloc_IdColumn}, False)
        Me.relationBloc_CERCLE.Nested = True
        Me.Relations.Add(Me.relationBloc_CERCLE)
        Me.relationCERCLE_CentreCercle = New System.Data.DataRelation("CERCLE_CentreCercle", New System.Data.DataColumn() {Me.tableCERCLE.CERCLE_IdColumn}, New System.Data.DataColumn() {Me.tableCentreCercle.CERCLE_IdColumn}, False)
        Me.relationCERCLE_CentreCercle.Nested = True
        Me.Relations.Add(Me.relationCERCLE_CentreCercle)
        Me.relationBloc_POLYARC = New System.Data.DataRelation("Bloc_POLYARC", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tablePOLYARC.Bloc_IdColumn}, False)
        Me.relationBloc_POLYARC.Nested = True
        Me.Relations.Add(Me.relationBloc_POLYARC)
        Me.relationPOLYARC_PI = New System.Data.DataRelation("POLYARC_PI", New System.Data.DataColumn() {Me.tablePOLYARC.POLYARC_IdColumn}, New System.Data.DataColumn() {Me.tablePI.POLYARC_IdColumn}, False)
        Me.relationPOLYARC_PI.Nested = True
        Me.Relations.Add(Me.relationPOLYARC_PI)
        Me.relationPI_P = New System.Data.DataRelation("PI_P", New System.Data.DataColumn() {Me.tablePI.PI_IdColumn}, New System.Data.DataColumn() {Me.tableP.PI_IdColumn}, False)
        Me.relationPI_P.Nested = True
        Me.Relations.Add(Me.relationPI_P)
        Me.relationBloc_SPLINE = New System.Data.DataRelation("Bloc_SPLINE", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableSPLINE.Bloc_IdColumn}, False)
        Me.relationBloc_SPLINE.Nested = True
        Me.Relations.Add(Me.relationBloc_SPLINE)
        Me.relationSPLINE_PtDessiné = New System.Data.DataRelation("SPLINE_PtDessiné", New System.Data.DataColumn() {Me.tableSPLINE.SPLINE_IdColumn}, New System.Data.DataColumn() {Me.tablePtDessiné.SPLINE_IdColumn}, False)
        Me.relationSPLINE_PtDessiné.Nested = True
        Me.Relations.Add(Me.relationSPLINE_PtDessiné)
        Me.relationBloc_INSERT = New System.Data.DataRelation("Bloc_INSERT", New System.Data.DataColumn() {Me.tableBloc.Bloc_IdColumn}, New System.Data.DataColumn() {Me.tableINSERT.Bloc_IdColumn}, False)
        Me.relationBloc_INSERT.Nested = True
        Me.Relations.Add(Me.relationBloc_INSERT)
        Me.relationINSERT_pInsertion = New System.Data.DataRelation("INSERT_pInsertion", New System.Data.DataColumn() {Me.tableINSERT.INSERT_IdColumn}, New System.Data.DataColumn() {Me.tablepInsertion.INSERT_IdColumn}, False)
        Me.relationINSERT_pInsertion.Nested = True
        Me.Relations.Add(Me.relationINSERT_pInsertion)
        Me.relationDXF_Limites = New System.Data.DataRelation("DXF_Limites", New System.Data.DataColumn() {Me.tableDXF.DXF_IdColumn}, New System.Data.DataColumn() {Me.tableLimites.DXF_IdColumn}, False)
        Me.relationDXF_Limites.Nested = True
        Me.Relations.Add(Me.relationDXF_Limites)
        Me.relationLimites_pMin = New System.Data.DataRelation("Limites_pMin", New System.Data.DataColumn() {Me.tableLimites.Limites_IdColumn}, New System.Data.DataColumn() {Me.tablepMin.Limites_IdColumn}, False)
        Me.relationLimites_pMin.Nested = True
        Me.Relations.Add(Me.relationLimites_pMin)
        Me.relationLimites_pMax = New System.Data.DataRelation("Limites_pMax", New System.Data.DataColumn() {Me.tableLimites.Limites_IdColumn}, New System.Data.DataColumn() {Me.tablepMax.Limites_IdColumn}, False)
        Me.relationLimites_pMax.Nested = True
        Me.Relations.Add(Me.relationLimites_pMax)
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeSchémaACONDIA() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeParamétrage() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeParamFixe() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTableCycleCapacité() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeDuréeCycle() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeDemandeCarrefour() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeCarrefour() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeVariante() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeParamDessin() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeOrigineReelle() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTaille() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeAffichage() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeNord() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializepNord() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeSymEchelle() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializepSymEchelle() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeFondPlan() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeMonDXF() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeBranche() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeIlot() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeVoie() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeptFlechesTrafic() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeOrigine() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePassage() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePoint() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeVoieIntersectee() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeLigneDeFeux() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeSignal() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeRougeDégagement() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeIncompatible() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTrajectoire() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePiétons() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeVéhicules() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePointManuel() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeAntagonisme() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializepAntago() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePlanFeux() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePhase() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeIDLigneFeux() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeIDLigneFeuxComposé() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeOrdreLignes() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeIncompatibles() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeRougesDégagement() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTypesConflit() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeTrafic() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeQPiéton() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeQVéhicule() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePropriétés() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeCentre() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeDXF() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeCalque() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeBloc() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeLIGNE() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePA() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeARC() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeCentreArc() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeCERCLE() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeCentreCercle() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePOLYARC() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePI() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeP() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeSPLINE() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializePtDessiné() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeINSERT() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializepInsertion() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializeLimites() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializepMin() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Function ShouldSerializepMax() As Boolean
        Return False
    End Function

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars()
        End If
    End Sub

    <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
        Dim ds As DataSetDiagFeux = New DataSetDiagFeux
        Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
        xs.Add(ds.GetSchemaSerializable)
        Dim any As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Return type
    End Function

    Public Delegate Sub SchémaACONDIARowChangeEventHandler(ByVal sender As Object, ByVal e As SchémaACONDIARowChangeEvent)

    Public Delegate Sub ParamétrageRowChangeEventHandler(ByVal sender As Object, ByVal e As ParamétrageRowChangeEvent)

    Public Delegate Sub ParamFixeRowChangeEventHandler(ByVal sender As Object, ByVal e As ParamFixeRowChangeEvent)

    Public Delegate Sub TableCycleCapacitéRowChangeEventHandler(ByVal sender As Object, ByVal e As TableCycleCapacitéRowChangeEvent)

    Public Delegate Sub DuréeCycleRowChangeEventHandler(ByVal sender As Object, ByVal e As DuréeCycleRowChangeEvent)

    Public Delegate Sub DemandeCarrefourRowChangeEventHandler(ByVal sender As Object, ByVal e As DemandeCarrefourRowChangeEvent)

    Public Delegate Sub CarrefourRowChangeEventHandler(ByVal sender As Object, ByVal e As CarrefourRowChangeEvent)

    Public Delegate Sub VarianteRowChangeEventHandler(ByVal sender As Object, ByVal e As VarianteRowChangeEvent)

    Public Delegate Sub ParamDessinRowChangeEventHandler(ByVal sender As Object, ByVal e As ParamDessinRowChangeEvent)

    Public Delegate Sub OrigineReelleRowChangeEventHandler(ByVal sender As Object, ByVal e As OrigineReelleRowChangeEvent)

    Public Delegate Sub TailleRowChangeEventHandler(ByVal sender As Object, ByVal e As TailleRowChangeEvent)

    Public Delegate Sub AffichageRowChangeEventHandler(ByVal sender As Object, ByVal e As AffichageRowChangeEvent)

    Public Delegate Sub NordRowChangeEventHandler(ByVal sender As Object, ByVal e As NordRowChangeEvent)

    Public Delegate Sub pNordRowChangeEventHandler(ByVal sender As Object, ByVal e As pNordRowChangeEvent)

    Public Delegate Sub SymEchelleRowChangeEventHandler(ByVal sender As Object, ByVal e As SymEchelleRowChangeEvent)

    Public Delegate Sub pSymEchelleRowChangeEventHandler(ByVal sender As Object, ByVal e As pSymEchelleRowChangeEvent)

    Public Delegate Sub FondPlanRowChangeEventHandler(ByVal sender As Object, ByVal e As FondPlanRowChangeEvent)

    Public Delegate Sub MonDXFRowChangeEventHandler(ByVal sender As Object, ByVal e As MonDXFRowChangeEvent)

    Public Delegate Sub BrancheRowChangeEventHandler(ByVal sender As Object, ByVal e As BrancheRowChangeEvent)

    Public Delegate Sub IlotRowChangeEventHandler(ByVal sender As Object, ByVal e As IlotRowChangeEvent)

    Public Delegate Sub VoieRowChangeEventHandler(ByVal sender As Object, ByVal e As VoieRowChangeEvent)

    Public Delegate Sub ptFlechesTraficRowChangeEventHandler(ByVal sender As Object, ByVal e As ptFlechesTraficRowChangeEvent)

    Public Delegate Sub OrigineRowChangeEventHandler(ByVal sender As Object, ByVal e As OrigineRowChangeEvent)

    Public Delegate Sub PassageRowChangeEventHandler(ByVal sender As Object, ByVal e As PassageRowChangeEvent)

    Public Delegate Sub PointRowChangeEventHandler(ByVal sender As Object, ByVal e As PointRowChangeEvent)

    Public Delegate Sub VoieIntersecteeRowChangeEventHandler(ByVal sender As Object, ByVal e As VoieIntersecteeRowChangeEvent)

    Public Delegate Sub LigneDeFeuxRowChangeEventHandler(ByVal sender As Object, ByVal e As LigneDeFeuxRowChangeEvent)

    Public Delegate Sub SignalRowChangeEventHandler(ByVal sender As Object, ByVal e As SignalRowChangeEvent)

    Public Delegate Sub RougeDégagementRowChangeEventHandler(ByVal sender As Object, ByVal e As RougeDégagementRowChangeEvent)

    Public Delegate Sub IncompatibleRowChangeEventHandler(ByVal sender As Object, ByVal e As IncompatibleRowChangeEvent)

    Public Delegate Sub TrajectoireRowChangeEventHandler(ByVal sender As Object, ByVal e As TrajectoireRowChangeEvent)

    Public Delegate Sub PiétonsRowChangeEventHandler(ByVal sender As Object, ByVal e As PiétonsRowChangeEvent)

    Public Delegate Sub VéhiculesRowChangeEventHandler(ByVal sender As Object, ByVal e As VéhiculesRowChangeEvent)

    Public Delegate Sub PointManuelRowChangeEventHandler(ByVal sender As Object, ByVal e As PointManuelRowChangeEvent)

    Public Delegate Sub AntagonismeRowChangeEventHandler(ByVal sender As Object, ByVal e As AntagonismeRowChangeEvent)

    Public Delegate Sub pAntagoRowChangeEventHandler(ByVal sender As Object, ByVal e As pAntagoRowChangeEvent)

    Public Delegate Sub PlanFeuxRowChangeEventHandler(ByVal sender As Object, ByVal e As PlanFeuxRowChangeEvent)

    Public Delegate Sub PhaseRowChangeEventHandler(ByVal sender As Object, ByVal e As PhaseRowChangeEvent)

    Public Delegate Sub IDLigneFeuxRowChangeEventHandler(ByVal sender As Object, ByVal e As IDLigneFeuxRowChangeEvent)

    Public Delegate Sub IDLigneFeuxComposéRowChangeEventHandler(ByVal sender As Object, ByVal e As IDLigneFeuxComposéRowChangeEvent)

    Public Delegate Sub OrdreLignesRowChangeEventHandler(ByVal sender As Object, ByVal e As OrdreLignesRowChangeEvent)

    Public Delegate Sub IncompatiblesRowChangeEventHandler(ByVal sender As Object, ByVal e As IncompatiblesRowChangeEvent)

    Public Delegate Sub RougesDégagementRowChangeEventHandler(ByVal sender As Object, ByVal e As RougesDégagementRowChangeEvent)

    Public Delegate Sub TypesConflitRowChangeEventHandler(ByVal sender As Object, ByVal e As TypesConflitRowChangeEvent)

    Public Delegate Sub TraficRowChangeEventHandler(ByVal sender As Object, ByVal e As TraficRowChangeEvent)

    Public Delegate Sub QPiétonRowChangeEventHandler(ByVal sender As Object, ByVal e As QPiétonRowChangeEvent)

    Public Delegate Sub QVéhiculeRowChangeEventHandler(ByVal sender As Object, ByVal e As QVéhiculeRowChangeEvent)

    Public Delegate Sub PropriétésRowChangeEventHandler(ByVal sender As Object, ByVal e As PropriétésRowChangeEvent)

    Public Delegate Sub CentreRowChangeEventHandler(ByVal sender As Object, ByVal e As CentreRowChangeEvent)

    Public Delegate Sub DXFRowChangeEventHandler(ByVal sender As Object, ByVal e As DXFRowChangeEvent)

    Public Delegate Sub CalqueRowChangeEventHandler(ByVal sender As Object, ByVal e As CalqueRowChangeEvent)

    Public Delegate Sub BlocRowChangeEventHandler(ByVal sender As Object, ByVal e As BlocRowChangeEvent)

    Public Delegate Sub LIGNERowChangeEventHandler(ByVal sender As Object, ByVal e As LIGNERowChangeEvent)

    Public Delegate Sub PARowChangeEventHandler(ByVal sender As Object, ByVal e As PARowChangeEvent)

    Public Delegate Sub ARCRowChangeEventHandler(ByVal sender As Object, ByVal e As ARCRowChangeEvent)

    Public Delegate Sub CentreArcRowChangeEventHandler(ByVal sender As Object, ByVal e As CentreArcRowChangeEvent)

    Public Delegate Sub CERCLERowChangeEventHandler(ByVal sender As Object, ByVal e As CERCLERowChangeEvent)

    Public Delegate Sub CentreCercleRowChangeEventHandler(ByVal sender As Object, ByVal e As CentreCercleRowChangeEvent)

    Public Delegate Sub POLYARCRowChangeEventHandler(ByVal sender As Object, ByVal e As POLYARCRowChangeEvent)

    Public Delegate Sub PIRowChangeEventHandler(ByVal sender As Object, ByVal e As PIRowChangeEvent)

    Public Delegate Sub PRowChangeEventHandler(ByVal sender As Object, ByVal e As PRowChangeEvent)

    Public Delegate Sub SPLINERowChangeEventHandler(ByVal sender As Object, ByVal e As SPLINERowChangeEvent)

    Public Delegate Sub PtDessinéRowChangeEventHandler(ByVal sender As Object, ByVal e As PtDessinéRowChangeEvent)

    Public Delegate Sub INSERTRowChangeEventHandler(ByVal sender As Object, ByVal e As INSERTRowChangeEvent)

    Public Delegate Sub pInsertionRowChangeEventHandler(ByVal sender As Object, ByVal e As pInsertionRowChangeEvent)

    Public Delegate Sub LimitesRowChangeEventHandler(ByVal sender As Object, ByVal e As LimitesRowChangeEvent)

    Public Delegate Sub pMinRowChangeEventHandler(ByVal sender As Object, ByVal e As pMinRowChangeEvent)

    Public Delegate Sub pMaxRowChangeEventHandler(ByVal sender As Object, ByVal e As pMaxRowChangeEvent)

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class SchémaACONDIADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnSchémaACONDIA_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "SchémaACONDIA"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SchémaACONDIA_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSchémaACONDIA_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As SchémaACONDIARow
            Get
                Return CType(Me.Rows(index), SchémaACONDIARow)
            End Get
        End Property

        Public Event SchémaACONDIARowChanging As SchémaACONDIARowChangeEventHandler

        Public Event SchémaACONDIARowChanged As SchémaACONDIARowChangeEventHandler

        Public Event SchémaACONDIARowDeleting As SchémaACONDIARowChangeEventHandler

        Public Event SchémaACONDIARowDeleted As SchémaACONDIARowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddSchémaACONDIARow(ByVal row As SchémaACONDIARow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSchémaACONDIARow() As SchémaACONDIARow
            Dim rowSchémaACONDIARow As SchémaACONDIARow = CType(Me.NewRow, SchémaACONDIARow)
            rowSchémaACONDIARow.ItemArray = New Object() {Nothing}
            Me.Rows.Add(rowSchémaACONDIARow)
            Return rowSchémaACONDIARow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SchémaACONDIADataTable = CType(MyBase.Clone, SchémaACONDIADataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SchémaACONDIADataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnSchémaACONDIA_Id = MyBase.Columns("SchémaACONDIA_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnSchémaACONDIA_Id = New System.Data.DataColumn("SchémaACONDIA_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSchémaACONDIA_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSchémaACONDIA_Id}, True))
            Me.columnSchémaACONDIA_Id.AutoIncrement = True
            Me.columnSchémaACONDIA_Id.AllowDBNull = False
            Me.columnSchémaACONDIA_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSchémaACONDIARow() As SchémaACONDIARow
            Return CType(Me.NewRow, SchémaACONDIARow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SchémaACONDIARow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SchémaACONDIARow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SchémaACONDIARowChangedEvent) Is Nothing) Then
                RaiseEvent SchémaACONDIARowChanged(Me, New SchémaACONDIARowChangeEvent(CType(e.Row, SchémaACONDIARow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SchémaACONDIARowChangingEvent) Is Nothing) Then
                RaiseEvent SchémaACONDIARowChanging(Me, New SchémaACONDIARowChangeEvent(CType(e.Row, SchémaACONDIARow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SchémaACONDIARowDeletedEvent) Is Nothing) Then
                RaiseEvent SchémaACONDIARowDeleted(Me, New SchémaACONDIARowChangeEvent(CType(e.Row, SchémaACONDIARow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SchémaACONDIARowDeletingEvent) Is Nothing) Then
                RaiseEvent SchémaACONDIARowDeleting(Me, New SchémaACONDIARowChangeEvent(CType(e.Row, SchémaACONDIARow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSchémaACONDIARow(ByVal row As SchémaACONDIARow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SchémaACONDIADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class ParamétrageDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnVersion As System.Data.DataColumn

        Private columnOrganisme As System.Data.DataColumn

        Private columnService As System.Data.DataColumn

        Private columnStockage As System.Data.DataColumn

        Private columnLogo As System.Data.DataColumn

        Private columnVitessePiétons As System.Data.DataColumn

        Private columnVitesseVéhicules As System.Data.DataColumn

        Private columnVitesseVélos As System.Data.DataColumn

        Private columnDébitSaturation As System.Data.DataColumn

        Private columnTempsPerduDémarrage As System.Data.DataColumn

        Private columnTempsPerduDémarrageCampagne As System.Data.DataColumn

        Private columnJauneInutiliséAgglo As System.Data.DataColumn

        Private columnJauneInutiliséCampagne As System.Data.DataColumn

        Private columnSignalPiétonsSonore As System.Data.DataColumn

        Private columnSchémaACONDIA_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Paramétrage"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VersionColumn() As System.Data.DataColumn
            Get
                Return Me.columnVersion
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property OrganismeColumn() As System.Data.DataColumn
            Get
                Return Me.columnOrganisme
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ServiceColumn() As System.Data.DataColumn
            Get
                Return Me.columnService
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property StockageColumn() As System.Data.DataColumn
            Get
                Return Me.columnStockage
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LogoColumn() As System.Data.DataColumn
            Get
                Return Me.columnLogo
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VitessePiétonsColumn() As System.Data.DataColumn
            Get
                Return Me.columnVitessePiétons
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VitesseVéhiculesColumn() As System.Data.DataColumn
            Get
                Return Me.columnVitesseVéhicules
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VitesseVélosColumn() As System.Data.DataColumn
            Get
                Return Me.columnVitesseVélos
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DébitSaturationColumn() As System.Data.DataColumn
            Get
                Return Me.columnDébitSaturation
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TempsPerduDémarrageColumn() As System.Data.DataColumn
            Get
                Return Me.columnTempsPerduDémarrage
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TempsPerduDémarrageCampagneColumn() As System.Data.DataColumn
            Get
                Return Me.columnTempsPerduDémarrageCampagne
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property JauneInutiliséAggloColumn() As System.Data.DataColumn
            Get
                Return Me.columnJauneInutiliséAgglo
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property JauneInutiliséCampagneColumn() As System.Data.DataColumn
            Get
                Return Me.columnJauneInutiliséCampagne
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SignalPiétonsSonoreColumn() As System.Data.DataColumn
            Get
                Return Me.columnSignalPiétonsSonore
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SchémaACONDIA_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSchémaACONDIA_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As ParamétrageRow
            Get
                Return CType(Me.Rows(index), ParamétrageRow)
            End Get
        End Property

        Public Event ParamétrageRowChanging As ParamétrageRowChangeEventHandler

        Public Event ParamétrageRowChanged As ParamétrageRowChangeEventHandler

        Public Event ParamétrageRowDeleting As ParamétrageRowChangeEventHandler

        Public Event ParamétrageRowDeleted As ParamétrageRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddParamétrageRow(ByVal row As ParamétrageRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddParamétrageRow(ByVal Version As Short, ByVal Organisme As String, ByVal Service As String, ByVal Stockage As String, ByVal Logo As String, ByVal VitessePiétons As Decimal, ByVal VitesseVéhicules As Decimal, ByVal VitesseVélos As Decimal, ByVal DébitSaturation As Short, ByVal TempsPerduDémarrage As Short, ByVal TempsPerduDémarrageCampagne As Short, ByVal JauneInutiliséAgglo As Short, ByVal JauneInutiliséCampagne As Short, ByVal SignalPiétonsSonore As Boolean, ByVal parentSchémaACONDIARowBySchémaACONDIA_Paramétrage As SchémaACONDIARow) As ParamétrageRow
            Dim rowParamétrageRow As ParamétrageRow = CType(Me.NewRow, ParamétrageRow)
            rowParamétrageRow.ItemArray = New Object() {Version, Organisme, Service, Stockage, Logo, VitessePiétons, VitesseVéhicules, VitesseVélos, DébitSaturation, TempsPerduDémarrage, TempsPerduDémarrageCampagne, JauneInutiliséAgglo, JauneInutiliséCampagne, SignalPiétonsSonore, parentSchémaACONDIARowBySchémaACONDIA_Paramétrage(0)}
            Me.Rows.Add(rowParamétrageRow)
            Return rowParamétrageRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ParamétrageDataTable = CType(MyBase.Clone, ParamétrageDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ParamétrageDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnVersion = MyBase.Columns("Version")
            Me.columnOrganisme = MyBase.Columns("Organisme")
            Me.columnService = MyBase.Columns("Service")
            Me.columnStockage = MyBase.Columns("Stockage")
            Me.columnLogo = MyBase.Columns("Logo")
            Me.columnVitessePiétons = MyBase.Columns("VitessePiétons")
            Me.columnVitesseVéhicules = MyBase.Columns("VitesseVéhicules")
            Me.columnVitesseVélos = MyBase.Columns("VitesseVélos")
            Me.columnDébitSaturation = MyBase.Columns("DébitSaturation")
            Me.columnTempsPerduDémarrage = MyBase.Columns("TempsPerduDémarrage")
            Me.columnTempsPerduDémarrageCampagne = MyBase.Columns("TempsPerduDémarrageCampagne")
            Me.columnJauneInutiliséAgglo = MyBase.Columns("JauneInutiliséAgglo")
            Me.columnJauneInutiliséCampagne = MyBase.Columns("JauneInutiliséCampagne")
            Me.columnSignalPiétonsSonore = MyBase.Columns("SignalPiétonsSonore")
            Me.columnSchémaACONDIA_Id = MyBase.Columns("SchémaACONDIA_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnVersion = New System.Data.DataColumn("Version", GetType(Short), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnVersion)
            Me.columnOrganisme = New System.Data.DataColumn("Organisme", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrganisme)
            Me.columnService = New System.Data.DataColumn("Service", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnService)
            Me.columnStockage = New System.Data.DataColumn("Stockage", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStockage)
            Me.columnLogo = New System.Data.DataColumn("Logo", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLogo)
            Me.columnVitessePiétons = New System.Data.DataColumn("VitessePiétons", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVitessePiétons)
            Me.columnVitesseVéhicules = New System.Data.DataColumn("VitesseVéhicules", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVitesseVéhicules)
            Me.columnVitesseVélos = New System.Data.DataColumn("VitesseVélos", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVitesseVélos)
            Me.columnDébitSaturation = New System.Data.DataColumn("DébitSaturation", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDébitSaturation)
            Me.columnTempsPerduDémarrage = New System.Data.DataColumn("TempsPerduDémarrage", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTempsPerduDémarrage)
            Me.columnTempsPerduDémarrageCampagne = New System.Data.DataColumn("TempsPerduDémarrageCampagne", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTempsPerduDémarrageCampagne)
            Me.columnJauneInutiliséAgglo = New System.Data.DataColumn("JauneInutiliséAgglo", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJauneInutiliséAgglo)
            Me.columnJauneInutiliséCampagne = New System.Data.DataColumn("JauneInutiliséCampagne", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJauneInutiliséCampagne)
            Me.columnSignalPiétonsSonore = New System.Data.DataColumn("SignalPiétonsSonore", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSignalPiétonsSonore)
            Me.columnSchémaACONDIA_Id = New System.Data.DataColumn("SchémaACONDIA_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSchémaACONDIA_Id)
            Me.columnVersion.Namespace = ""
            Me.columnVersion.DefaultValue = CType(0, Short)
            Me.columnOrganisme.AllowDBNull = False
            Me.columnService.AllowDBNull = False
            Me.columnVitessePiétons.AllowDBNull = False
            Me.columnVitessePiétons.Caption = "Vitesse dégagement piétons"
            Me.columnVitessePiétons.DefaultValue = CType(1, Decimal)
            Me.columnVitesseVéhicules.AllowDBNull = False
            Me.columnVitesseVéhicules.Caption = "Vitesse dégagement véhicules"
            Me.columnVitesseVéhicules.DefaultValue = CType(10, Decimal)
            Me.columnVitesseVélos.AllowDBNull = False
            Me.columnVitesseVélos.Caption = "Vitesse dégagement vélos"
            Me.columnVitesseVélos.DefaultValue = CType(10, Decimal)
            Me.columnDébitSaturation.AllowDBNull = False
            Me.columnTempsPerduDémarrage.DefaultValue = CType(0, Short)
            Me.columnJauneInutiliséAgglo.DefaultValue = CType(3, Short)
            Me.columnJauneInutiliséCampagne.DefaultValue = CType(5, Short)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewParamétrageRow() As ParamétrageRow
            Return CType(Me.NewRow, ParamétrageRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ParamétrageRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ParamétrageRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParamétrageRowChangedEvent) Is Nothing) Then
                RaiseEvent ParamétrageRowChanged(Me, New ParamétrageRowChangeEvent(CType(e.Row, ParamétrageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParamétrageRowChangingEvent) Is Nothing) Then
                RaiseEvent ParamétrageRowChanging(Me, New ParamétrageRowChangeEvent(CType(e.Row, ParamétrageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParamétrageRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParamétrageRowDeleted(Me, New ParamétrageRowChangeEvent(CType(e.Row, ParamétrageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParamétrageRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParamétrageRowDeleting(Me, New ParamétrageRowChangeEvent(CType(e.Row, ParamétrageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveParamétrageRow(ByVal row As ParamétrageRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParamétrageDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class ParamFixeDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnVertMini As System.Data.DataColumn

        Private columnVertMiniVeh As System.Data.DataColumn

        Private columnJauneAgglo As System.Data.DataColumn

        Private columnJauneHorsAgglo As System.Data.DataColumn

        Private columnEqvUVP2R As System.Data.DataColumn

        Private columnEqvUVPPL As System.Data.DataColumn

        Private columnMiniRouge As System.Data.DataColumn

        Private columnTempsPerdu As System.Data.DataColumn

        Private columnTempsMaxAttente As System.Data.DataColumn

        Private columnSchémaACONDIA_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ParamFixe"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VertMiniColumn() As System.Data.DataColumn
            Get
                Return Me.columnVertMini
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VertMiniVehColumn() As System.Data.DataColumn
            Get
                Return Me.columnVertMiniVeh
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property JauneAggloColumn() As System.Data.DataColumn
            Get
                Return Me.columnJauneAgglo
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property JauneHorsAggloColumn() As System.Data.DataColumn
            Get
                Return Me.columnJauneHorsAgglo
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EqvUVP2RColumn() As System.Data.DataColumn
            Get
                Return Me.columnEqvUVP2R
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EqvUVPPLColumn() As System.Data.DataColumn
            Get
                Return Me.columnEqvUVPPL
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property MiniRougeColumn() As System.Data.DataColumn
            Get
                Return Me.columnMiniRouge
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TempsPerduColumn() As System.Data.DataColumn
            Get
                Return Me.columnTempsPerdu
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TempsMaxAttenteColumn() As System.Data.DataColumn
            Get
                Return Me.columnTempsMaxAttente
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SchémaACONDIA_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSchémaACONDIA_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As ParamFixeRow
            Get
                Return CType(Me.Rows(index), ParamFixeRow)
            End Get
        End Property

        Public Event ParamFixeRowChanging As ParamFixeRowChangeEventHandler

        Public Event ParamFixeRowChanged As ParamFixeRowChangeEventHandler

        Public Event ParamFixeRowDeleting As ParamFixeRowChangeEventHandler

        Public Event ParamFixeRowDeleted As ParamFixeRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddParamFixeRow(ByVal row As ParamFixeRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddParamFixeRow(ByVal VertMini As Short, ByVal VertMiniVeh As Short, ByVal JauneAgglo As Short, ByVal JauneHorsAgglo As Short, ByVal EqvUVP2R As Decimal, ByVal EqvUVPPL As Short, ByVal MiniRouge As Short, ByVal TempsPerdu As Short, ByVal TempsMaxAttente As Short, ByVal parentSchémaACONDIARowBySchémaACONDIA_ParamFixe As SchémaACONDIARow) As ParamFixeRow
            Dim rowParamFixeRow As ParamFixeRow = CType(Me.NewRow, ParamFixeRow)
            rowParamFixeRow.ItemArray = New Object() {VertMini, VertMiniVeh, JauneAgglo, JauneHorsAgglo, EqvUVP2R, EqvUVPPL, MiniRouge, TempsPerdu, TempsMaxAttente, parentSchémaACONDIARowBySchémaACONDIA_ParamFixe(0)}
            Me.Rows.Add(rowParamFixeRow)
            Return rowParamFixeRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ParamFixeDataTable = CType(MyBase.Clone, ParamFixeDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ParamFixeDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnVertMini = MyBase.Columns("VertMini")
            Me.columnVertMiniVeh = MyBase.Columns("VertMiniVeh")
            Me.columnJauneAgglo = MyBase.Columns("JauneAgglo")
            Me.columnJauneHorsAgglo = MyBase.Columns("JauneHorsAgglo")
            Me.columnEqvUVP2R = MyBase.Columns("EqvUVP2R")
            Me.columnEqvUVPPL = MyBase.Columns("EqvUVPPL")
            Me.columnMiniRouge = MyBase.Columns("MiniRouge")
            Me.columnTempsPerdu = MyBase.Columns("TempsPerdu")
            Me.columnTempsMaxAttente = MyBase.Columns("TempsMaxAttente")
            Me.columnSchémaACONDIA_Id = MyBase.Columns("SchémaACONDIA_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnVertMini = New System.Data.DataColumn("VertMini", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVertMini)
            Me.columnVertMiniVeh = New System.Data.DataColumn("VertMiniVeh", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVertMiniVeh)
            Me.columnJauneAgglo = New System.Data.DataColumn("JauneAgglo", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJauneAgglo)
            Me.columnJauneHorsAgglo = New System.Data.DataColumn("JauneHorsAgglo", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJauneHorsAgglo)
            Me.columnEqvUVP2R = New System.Data.DataColumn("EqvUVP2R", GetType(Decimal), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEqvUVP2R)
            Me.columnEqvUVPPL = New System.Data.DataColumn("EqvUVPPL", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEqvUVPPL)
            Me.columnMiniRouge = New System.Data.DataColumn("MiniRouge", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMiniRouge)
            Me.columnTempsPerdu = New System.Data.DataColumn("TempsPerdu", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTempsPerdu)
            Me.columnTempsMaxAttente = New System.Data.DataColumn("TempsMaxAttente", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTempsMaxAttente)
            Me.columnSchémaACONDIA_Id = New System.Data.DataColumn("SchémaACONDIA_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSchémaACONDIA_Id)
            Me.columnVertMini.AllowDBNull = False
            Me.columnVertMini.DefaultValue = CType(6, Short)
            Me.columnVertMiniVeh.AllowDBNull = False
            Me.columnVertMiniVeh.DefaultValue = CType(6, Short)
            Me.columnJauneAgglo.AllowDBNull = False
            Me.columnJauneAgglo.DefaultValue = CType(3, Short)
            Me.columnJauneHorsAgglo.AllowDBNull = False
            Me.columnJauneHorsAgglo.DefaultValue = CType(5, Short)
            Me.columnEqvUVP2R.AllowDBNull = False
            Me.columnEqvUVP2R.DefaultValue = CType(0.3, Decimal)
            Me.columnEqvUVPPL.AllowDBNull = False
            Me.columnEqvUVPPL.DefaultValue = CType(2, Short)
            Me.columnMiniRouge.AllowDBNull = False
            Me.columnMiniRouge.DefaultValue = CType(5, Short)
            Me.columnTempsPerdu.AllowDBNull = False
            Me.columnTempsPerdu.DefaultValue = CType(5, Short)
            Me.columnTempsMaxAttente.AllowDBNull = False
            Me.columnTempsMaxAttente.DefaultValue = CType(120, Short)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewParamFixeRow() As ParamFixeRow
            Return CType(Me.NewRow, ParamFixeRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ParamFixeRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ParamFixeRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParamFixeRowChangedEvent) Is Nothing) Then
                RaiseEvent ParamFixeRowChanged(Me, New ParamFixeRowChangeEvent(CType(e.Row, ParamFixeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParamFixeRowChangingEvent) Is Nothing) Then
                RaiseEvent ParamFixeRowChanging(Me, New ParamFixeRowChangeEvent(CType(e.Row, ParamFixeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParamFixeRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParamFixeRowDeleted(Me, New ParamFixeRowChangeEvent(CType(e.Row, ParamFixeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParamFixeRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParamFixeRowDeleting(Me, New ParamFixeRowChangeEvent(CType(e.Row, ParamFixeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveParamFixeRow(ByVal row As ParamFixeRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParamFixeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TableCycleCapacitéDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnDuréeCycleMini As System.Data.DataColumn

        Private columnTempsPerduMini As System.Data.DataColumn

        Private columnTableCycleCapacité_Id As System.Data.DataColumn

        Private columnSchémaACONDIA_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TableCycleCapacité"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DuréeCycleMiniColumn() As System.Data.DataColumn
            Get
                Return Me.columnDuréeCycleMini
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TempsPerduMiniColumn() As System.Data.DataColumn
            Get
                Return Me.columnTempsPerduMini
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TableCycleCapacité_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTableCycleCapacité_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SchémaACONDIA_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSchémaACONDIA_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TableCycleCapacitéRow
            Get
                Return CType(Me.Rows(index), TableCycleCapacitéRow)
            End Get
        End Property

        Public Event TableCycleCapacitéRowChanging As TableCycleCapacitéRowChangeEventHandler

        Public Event TableCycleCapacitéRowChanged As TableCycleCapacitéRowChangeEventHandler

        Public Event TableCycleCapacitéRowDeleting As TableCycleCapacitéRowChangeEventHandler

        Public Event TableCycleCapacitéRowDeleted As TableCycleCapacitéRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTableCycleCapacitéRow(ByVal row As TableCycleCapacitéRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTableCycleCapacitéRow(ByVal DuréeCycleMini As Short, ByVal TempsPerduMini As Short, ByVal parentSchémaACONDIARowBySchémaACONDIA_TableCycleCapacité As SchémaACONDIARow) As TableCycleCapacitéRow
            Dim rowTableCycleCapacitéRow As TableCycleCapacitéRow = CType(Me.NewRow, TableCycleCapacitéRow)
            rowTableCycleCapacitéRow.ItemArray = New Object() {DuréeCycleMini, TempsPerduMini, Nothing, parentSchémaACONDIARowBySchémaACONDIA_TableCycleCapacité(0)}
            Me.Rows.Add(rowTableCycleCapacitéRow)
            Return rowTableCycleCapacitéRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TableCycleCapacitéDataTable = CType(MyBase.Clone, TableCycleCapacitéDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TableCycleCapacitéDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnDuréeCycleMini = MyBase.Columns("DuréeCycleMini")
            Me.columnTempsPerduMini = MyBase.Columns("TempsPerduMini")
            Me.columnTableCycleCapacité_Id = MyBase.Columns("TableCycleCapacité_Id")
            Me.columnSchémaACONDIA_Id = MyBase.Columns("SchémaACONDIA_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnDuréeCycleMini = New System.Data.DataColumn("DuréeCycleMini", GetType(Short), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnDuréeCycleMini)
            Me.columnTempsPerduMini = New System.Data.DataColumn("TempsPerduMini", GetType(Short), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnTempsPerduMini)
            Me.columnTableCycleCapacité_Id = New System.Data.DataColumn("TableCycleCapacité_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTableCycleCapacité_Id)
            Me.columnSchémaACONDIA_Id = New System.Data.DataColumn("SchémaACONDIA_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSchémaACONDIA_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTableCycleCapacité_Id}, True))
            Me.columnDuréeCycleMini.AllowDBNull = False
            Me.columnDuréeCycleMini.Namespace = ""
            Me.columnTempsPerduMini.AllowDBNull = False
            Me.columnTempsPerduMini.Namespace = ""
            Me.columnTableCycleCapacité_Id.AutoIncrement = True
            Me.columnTableCycleCapacité_Id.AllowDBNull = False
            Me.columnTableCycleCapacité_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTableCycleCapacitéRow() As TableCycleCapacitéRow
            Return CType(Me.NewRow, TableCycleCapacitéRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TableCycleCapacitéRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TableCycleCapacitéRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TableCycleCapacitéRowChangedEvent) Is Nothing) Then
                RaiseEvent TableCycleCapacitéRowChanged(Me, New TableCycleCapacitéRowChangeEvent(CType(e.Row, TableCycleCapacitéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TableCycleCapacitéRowChangingEvent) Is Nothing) Then
                RaiseEvent TableCycleCapacitéRowChanging(Me, New TableCycleCapacitéRowChangeEvent(CType(e.Row, TableCycleCapacitéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TableCycleCapacitéRowDeletedEvent) Is Nothing) Then
                RaiseEvent TableCycleCapacitéRowDeleted(Me, New TableCycleCapacitéRowChangeEvent(CType(e.Row, TableCycleCapacitéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TableCycleCapacitéRowDeletingEvent) Is Nothing) Then
                RaiseEvent TableCycleCapacitéRowDeleting(Me, New TableCycleCapacitéRowChangeEvent(CType(e.Row, TableCycleCapacitéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTableCycleCapacitéRow(ByVal row As TableCycleCapacitéRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TableCycleCapacitéDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class DuréeCycleDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnDuréeCycle_Id As System.Data.DataColumn

        Private columnTableCycleCapacité_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "DuréeCycle"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DuréeCycle_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnDuréeCycle_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TableCycleCapacité_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTableCycleCapacité_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As DuréeCycleRow
            Get
                Return CType(Me.Rows(index), DuréeCycleRow)
            End Get
        End Property

        Public Event DuréeCycleRowChanging As DuréeCycleRowChangeEventHandler

        Public Event DuréeCycleRowChanged As DuréeCycleRowChangeEventHandler

        Public Event DuréeCycleRowDeleting As DuréeCycleRowChangeEventHandler

        Public Event DuréeCycleRowDeleted As DuréeCycleRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddDuréeCycleRow(ByVal row As DuréeCycleRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddDuréeCycleRow(ByVal parentTableCycleCapacitéRowByTableCycleCapacité_DuréeCycle As TableCycleCapacitéRow) As DuréeCycleRow
            Dim rowDuréeCycleRow As DuréeCycleRow = CType(Me.NewRow, DuréeCycleRow)
            rowDuréeCycleRow.ItemArray = New Object() {Nothing, parentTableCycleCapacitéRowByTableCycleCapacité_DuréeCycle(2)}
            Me.Rows.Add(rowDuréeCycleRow)
            Return rowDuréeCycleRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DuréeCycleDataTable = CType(MyBase.Clone, DuréeCycleDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DuréeCycleDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnDuréeCycle_Id = MyBase.Columns("DuréeCycle_Id")
            Me.columnTableCycleCapacité_Id = MyBase.Columns("TableCycleCapacité_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnDuréeCycle_Id = New System.Data.DataColumn("DuréeCycle_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnDuréeCycle_Id)
            Me.columnTableCycleCapacité_Id = New System.Data.DataColumn("TableCycleCapacité_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTableCycleCapacité_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnDuréeCycle_Id}, True))
            Me.columnDuréeCycle_Id.AutoIncrement = True
            Me.columnDuréeCycle_Id.AllowDBNull = False
            Me.columnDuréeCycle_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewDuréeCycleRow() As DuréeCycleRow
            Return CType(Me.NewRow, DuréeCycleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DuréeCycleRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DuréeCycleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DuréeCycleRowChangedEvent) Is Nothing) Then
                RaiseEvent DuréeCycleRowChanged(Me, New DuréeCycleRowChangeEvent(CType(e.Row, DuréeCycleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DuréeCycleRowChangingEvent) Is Nothing) Then
                RaiseEvent DuréeCycleRowChanging(Me, New DuréeCycleRowChangeEvent(CType(e.Row, DuréeCycleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DuréeCycleRowDeletedEvent) Is Nothing) Then
                RaiseEvent DuréeCycleRowDeleted(Me, New DuréeCycleRowChangeEvent(CType(e.Row, DuréeCycleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DuréeCycleRowDeletingEvent) Is Nothing) Then
                RaiseEvent DuréeCycleRowDeleting(Me, New DuréeCycleRowChangeEvent(CType(e.Row, DuréeCycleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveDuréeCycleRow(ByVal row As DuréeCycleRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DuréeCycleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class DemandeCarrefourDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnDemandeCarrefour_Column As System.Data.DataColumn

        Private columnDuréeCycle_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "DemandeCarrefour"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DemandeCarrefour_ColumnColumn() As System.Data.DataColumn
            Get
                Return Me.columnDemandeCarrefour_Column
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DuréeCycle_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnDuréeCycle_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As DemandeCarrefourRow
            Get
                Return CType(Me.Rows(index), DemandeCarrefourRow)
            End Get
        End Property

        Public Event DemandeCarrefourRowChanging As DemandeCarrefourRowChangeEventHandler

        Public Event DemandeCarrefourRowChanged As DemandeCarrefourRowChangeEventHandler

        Public Event DemandeCarrefourRowDeleting As DemandeCarrefourRowChangeEventHandler

        Public Event DemandeCarrefourRowDeleted As DemandeCarrefourRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddDemandeCarrefourRow(ByVal row As DemandeCarrefourRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddDemandeCarrefourRow(ByVal DemandeCarrefour_Column As Short, ByVal parentDuréeCycleRowByDuréeCycle_DemandeCarrefour As DuréeCycleRow) As DemandeCarrefourRow
            Dim rowDemandeCarrefourRow As DemandeCarrefourRow = CType(Me.NewRow, DemandeCarrefourRow)
            rowDemandeCarrefourRow.ItemArray = New Object() {DemandeCarrefour_Column, parentDuréeCycleRowByDuréeCycle_DemandeCarrefour(0)}
            Me.Rows.Add(rowDemandeCarrefourRow)
            Return rowDemandeCarrefourRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DemandeCarrefourDataTable = CType(MyBase.Clone, DemandeCarrefourDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DemandeCarrefourDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnDemandeCarrefour_Column = MyBase.Columns("DemandeCarrefour_Column")
            Me.columnDuréeCycle_Id = MyBase.Columns("DuréeCycle_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnDemandeCarrefour_Column = New System.Data.DataColumn("DemandeCarrefour_Column", GetType(Short), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnDemandeCarrefour_Column)
            Me.columnDuréeCycle_Id = New System.Data.DataColumn("DuréeCycle_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnDuréeCycle_Id)
            Me.columnDemandeCarrefour_Column.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewDemandeCarrefourRow() As DemandeCarrefourRow
            Return CType(Me.NewRow, DemandeCarrefourRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DemandeCarrefourRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DemandeCarrefourRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DemandeCarrefourRowChangedEvent) Is Nothing) Then
                RaiseEvent DemandeCarrefourRowChanged(Me, New DemandeCarrefourRowChangeEvent(CType(e.Row, DemandeCarrefourRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DemandeCarrefourRowChangingEvent) Is Nothing) Then
                RaiseEvent DemandeCarrefourRowChanging(Me, New DemandeCarrefourRowChangeEvent(CType(e.Row, DemandeCarrefourRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DemandeCarrefourRowDeletedEvent) Is Nothing) Then
                RaiseEvent DemandeCarrefourRowDeleted(Me, New DemandeCarrefourRowChangeEvent(CType(e.Row, DemandeCarrefourRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DemandeCarrefourRowDeletingEvent) Is Nothing) Then
                RaiseEvent DemandeCarrefourRowDeleting(Me, New DemandeCarrefourRowChangeEvent(CType(e.Row, DemandeCarrefourRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveDemandeCarrefourRow(ByVal row As DemandeCarrefourRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DemandeCarrefourDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class CarrefourDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnCarrefour_Id As System.Data.DataColumn

        Private columnSchémaACONDIA_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Carrefour"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Carrefour_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnCarrefour_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SchémaACONDIA_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSchémaACONDIA_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As CarrefourRow
            Get
                Return CType(Me.Rows(index), CarrefourRow)
            End Get
        End Property

        Public Event CarrefourRowChanging As CarrefourRowChangeEventHandler

        Public Event CarrefourRowChanged As CarrefourRowChangeEventHandler

        Public Event CarrefourRowDeleting As CarrefourRowChangeEventHandler

        Public Event CarrefourRowDeleted As CarrefourRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddCarrefourRow(ByVal row As CarrefourRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCarrefourRow(ByVal parentSchémaACONDIARowBySchémaACONDIA_Carrefour As SchémaACONDIARow) As CarrefourRow
            Dim rowCarrefourRow As CarrefourRow = CType(Me.NewRow, CarrefourRow)
            rowCarrefourRow.ItemArray = New Object() {Nothing, parentSchémaACONDIARowBySchémaACONDIA_Carrefour(0)}
            Me.Rows.Add(rowCarrefourRow)
            Return rowCarrefourRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CarrefourDataTable = CType(MyBase.Clone, CarrefourDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CarrefourDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCarrefour_Id = MyBase.Columns("Carrefour_Id")
            Me.columnSchémaACONDIA_Id = MyBase.Columns("SchémaACONDIA_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCarrefour_Id = New System.Data.DataColumn("Carrefour_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnCarrefour_Id)
            Me.columnSchémaACONDIA_Id = New System.Data.DataColumn("SchémaACONDIA_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSchémaACONDIA_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCarrefour_Id}, True))
            Me.columnCarrefour_Id.AutoIncrement = True
            Me.columnCarrefour_Id.AllowDBNull = False
            Me.columnCarrefour_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewCarrefourRow() As CarrefourRow
            Return CType(Me.NewRow, CarrefourRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CarrefourRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CarrefourRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CarrefourRowChangedEvent) Is Nothing) Then
                RaiseEvent CarrefourRowChanged(Me, New CarrefourRowChangeEvent(CType(e.Row, CarrefourRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CarrefourRowChangingEvent) Is Nothing) Then
                RaiseEvent CarrefourRowChanging(Me, New CarrefourRowChangeEvent(CType(e.Row, CarrefourRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CarrefourRowDeletedEvent) Is Nothing) Then
                RaiseEvent CarrefourRowDeleted(Me, New CarrefourRowChangeEvent(CType(e.Row, CarrefourRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CarrefourRowDeletingEvent) Is Nothing) Then
                RaiseEvent CarrefourRowDeleting(Me, New CarrefourRowChangeEvent(CType(e.Row, CarrefourRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveCarrefourRow(ByVal row As CarrefourRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CarrefourDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class VarianteDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnPlanFeuxCourant As System.Data.DataColumn

        Private columnModeGraphique As System.Data.DataColumn

        Private columnVerrou As System.Data.DataColumn

        Private columnVertMiniVéhicules As System.Data.DataColumn

        Private columnVertMiniPiétons As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        Private columnCarrefour_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Variante"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PlanFeuxCourantColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlanFeuxCourant
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ModeGraphiqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnModeGraphique
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VerrouColumn() As System.Data.DataColumn
            Get
                Return Me.columnVerrou
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VertMiniVéhiculesColumn() As System.Data.DataColumn
            Get
                Return Me.columnVertMiniVéhicules
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VertMiniPiétonsColumn() As System.Data.DataColumn
            Get
                Return Me.columnVertMiniPiétons
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Carrefour_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnCarrefour_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As VarianteRow
            Get
                Return CType(Me.Rows(index), VarianteRow)
            End Get
        End Property

        Public Event VarianteRowChanging As VarianteRowChangeEventHandler

        Public Event VarianteRowChanged As VarianteRowChangeEventHandler

        Public Event VarianteRowDeleting As VarianteRowChangeEventHandler

        Public Event VarianteRowDeleted As VarianteRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddVarianteRow(ByVal row As VarianteRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddVarianteRow(ByVal PlanFeuxCourant As String, ByVal ModeGraphique As Boolean, ByVal Verrou As Short, ByVal VertMiniVéhicules As Short, ByVal VertMiniPiétons As Short, ByVal parentCarrefourRowByCarrefour_Variante As CarrefourRow) As VarianteRow
            Dim rowVarianteRow As VarianteRow = CType(Me.NewRow, VarianteRow)
            rowVarianteRow.ItemArray = New Object() {PlanFeuxCourant, ModeGraphique, Verrou, VertMiniVéhicules, VertMiniPiétons, Nothing, parentCarrefourRowByCarrefour_Variante(0)}
            Me.Rows.Add(rowVarianteRow)
            Return rowVarianteRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As VarianteDataTable = CType(MyBase.Clone, VarianteDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New VarianteDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnPlanFeuxCourant = MyBase.Columns("PlanFeuxCourant")
            Me.columnModeGraphique = MyBase.Columns("ModeGraphique")
            Me.columnVerrou = MyBase.Columns("Verrou")
            Me.columnVertMiniVéhicules = MyBase.Columns("VertMiniVéhicules")
            Me.columnVertMiniPiétons = MyBase.Columns("VertMiniPiétons")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
            Me.columnCarrefour_Id = MyBase.Columns("Carrefour_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnPlanFeuxCourant = New System.Data.DataColumn("PlanFeuxCourant", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnPlanFeuxCourant)
            Me.columnModeGraphique = New System.Data.DataColumn("ModeGraphique", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModeGraphique)
            Me.columnVerrou = New System.Data.DataColumn("Verrou", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerrou)
            Me.columnVertMiniVéhicules = New System.Data.DataColumn("VertMiniVéhicules", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVertMiniVéhicules)
            Me.columnVertMiniPiétons = New System.Data.DataColumn("VertMiniPiétons", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVertMiniPiétons)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.columnCarrefour_Id = New System.Data.DataColumn("Carrefour_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnCarrefour_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnVariante_Id}, True))
            Me.columnPlanFeuxCourant.Namespace = ""
            Me.columnModeGraphique.AllowDBNull = False
            Me.columnVerrou.AllowDBNull = False
            Me.columnVariante_Id.AutoIncrement = True
            Me.columnVariante_Id.AllowDBNull = False
            Me.columnVariante_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewVarianteRow() As VarianteRow
            Return CType(Me.NewRow, VarianteRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New VarianteRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VarianteRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VarianteRowChangedEvent) Is Nothing) Then
                RaiseEvent VarianteRowChanged(Me, New VarianteRowChangeEvent(CType(e.Row, VarianteRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VarianteRowChangingEvent) Is Nothing) Then
                RaiseEvent VarianteRowChanging(Me, New VarianteRowChangeEvent(CType(e.Row, VarianteRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VarianteRowDeletedEvent) Is Nothing) Then
                RaiseEvent VarianteRowDeleted(Me, New VarianteRowChangeEvent(CType(e.Row, VarianteRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VarianteRowDeletingEvent) Is Nothing) Then
                RaiseEvent VarianteRowDeleting(Me, New VarianteRowChangeEvent(CType(e.Row, VarianteRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveVarianteRow(ByVal row As VarianteRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VarianteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class ParamDessinDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnEchelle As System.Data.DataColumn

        Private columnParamDessin_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ParamDessin"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EchelleColumn() As System.Data.DataColumn
            Get
                Return Me.columnEchelle
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ParamDessin_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnParamDessin_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As ParamDessinRow
            Get
                Return CType(Me.Rows(index), ParamDessinRow)
            End Get
        End Property

        Public Event ParamDessinRowChanging As ParamDessinRowChangeEventHandler

        Public Event ParamDessinRowChanged As ParamDessinRowChangeEventHandler

        Public Event ParamDessinRowDeleting As ParamDessinRowChangeEventHandler

        Public Event ParamDessinRowDeleted As ParamDessinRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddParamDessinRow(ByVal row As ParamDessinRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddParamDessinRow(ByVal Echelle As Single, ByVal parentVarianteRowByVariante_ParamDessin As VarianteRow) As ParamDessinRow
            Dim rowParamDessinRow As ParamDessinRow = CType(Me.NewRow, ParamDessinRow)
            rowParamDessinRow.ItemArray = New Object() {Echelle, Nothing, parentVarianteRowByVariante_ParamDessin(5)}
            Me.Rows.Add(rowParamDessinRow)
            Return rowParamDessinRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ParamDessinDataTable = CType(MyBase.Clone, ParamDessinDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ParamDessinDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnEchelle = MyBase.Columns("Echelle")
            Me.columnParamDessin_Id = MyBase.Columns("ParamDessin_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnEchelle = New System.Data.DataColumn("Echelle", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEchelle)
            Me.columnParamDessin_Id = New System.Data.DataColumn("ParamDessin_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnParamDessin_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnParamDessin_Id}, True))
            Me.columnEchelle.AllowDBNull = False
            Me.columnParamDessin_Id.AutoIncrement = True
            Me.columnParamDessin_Id.AllowDBNull = False
            Me.columnParamDessin_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewParamDessinRow() As ParamDessinRow
            Return CType(Me.NewRow, ParamDessinRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ParamDessinRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ParamDessinRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ParamDessinRowChangedEvent) Is Nothing) Then
                RaiseEvent ParamDessinRowChanged(Me, New ParamDessinRowChangeEvent(CType(e.Row, ParamDessinRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ParamDessinRowChangingEvent) Is Nothing) Then
                RaiseEvent ParamDessinRowChanging(Me, New ParamDessinRowChangeEvent(CType(e.Row, ParamDessinRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ParamDessinRowDeletedEvent) Is Nothing) Then
                RaiseEvent ParamDessinRowDeleted(Me, New ParamDessinRowChangeEvent(CType(e.Row, ParamDessinRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ParamDessinRowDeletingEvent) Is Nothing) Then
                RaiseEvent ParamDessinRowDeleting(Me, New ParamDessinRowChangeEvent(CType(e.Row, ParamDessinRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveParamDessinRow(ByVal row As ParamDessinRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ParamDessinDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class OrigineReelleDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnParamDessin_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "OrigineReelle"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ParamDessin_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnParamDessin_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As OrigineReelleRow
            Get
                Return CType(Me.Rows(index), OrigineReelleRow)
            End Get
        End Property

        Public Event OrigineReelleRowChanging As OrigineReelleRowChangeEventHandler

        Public Event OrigineReelleRowChanged As OrigineReelleRowChangeEventHandler

        Public Event OrigineReelleRowDeleting As OrigineReelleRowChangeEventHandler

        Public Event OrigineReelleRowDeleted As OrigineReelleRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddOrigineReelleRow(ByVal row As OrigineReelleRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddOrigineReelleRow(ByVal X As Single, ByVal Y As Single, ByVal parentParamDessinRowByParamDessin_OrigineReelle As ParamDessinRow) As OrigineReelleRow
            Dim rowOrigineReelleRow As OrigineReelleRow = CType(Me.NewRow, OrigineReelleRow)
            rowOrigineReelleRow.ItemArray = New Object() {X, Y, parentParamDessinRowByParamDessin_OrigineReelle(1)}
            Me.Rows.Add(rowOrigineReelleRow)
            Return rowOrigineReelleRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As OrigineReelleDataTable = CType(MyBase.Clone, OrigineReelleDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New OrigineReelleDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnParamDessin_Id = MyBase.Columns("ParamDessin_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnParamDessin_Id = New System.Data.DataColumn("ParamDessin_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnParamDessin_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewOrigineReelleRow() As OrigineReelleRow
            Return CType(Me.NewRow, OrigineReelleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New OrigineReelleRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrigineReelleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrigineReelleRowChangedEvent) Is Nothing) Then
                RaiseEvent OrigineReelleRowChanged(Me, New OrigineReelleRowChangeEvent(CType(e.Row, OrigineReelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrigineReelleRowChangingEvent) Is Nothing) Then
                RaiseEvent OrigineReelleRowChanging(Me, New OrigineReelleRowChangeEvent(CType(e.Row, OrigineReelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrigineReelleRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrigineReelleRowDeleted(Me, New OrigineReelleRowChangeEvent(CType(e.Row, OrigineReelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrigineReelleRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrigineReelleRowDeleting(Me, New OrigineReelleRowChangeEvent(CType(e.Row, OrigineReelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveOrigineReelleRow(ByVal row As OrigineReelleRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrigineReelleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TailleDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnParamDessin_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Taille"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ParamDessin_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnParamDessin_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TailleRow
            Get
                Return CType(Me.Rows(index), TailleRow)
            End Get
        End Property

        Public Event TailleRowChanging As TailleRowChangeEventHandler

        Public Event TailleRowChanged As TailleRowChangeEventHandler

        Public Event TailleRowDeleting As TailleRowChangeEventHandler

        Public Event TailleRowDeleted As TailleRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTailleRow(ByVal row As TailleRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTailleRow(ByVal X As Short, ByVal Y As Short, ByVal parentParamDessinRowByParamDessin_Taille As ParamDessinRow) As TailleRow
            Dim rowTailleRow As TailleRow = CType(Me.NewRow, TailleRow)
            rowTailleRow.ItemArray = New Object() {X, Y, parentParamDessinRowByParamDessin_Taille(1)}
            Me.Rows.Add(rowTailleRow)
            Return rowTailleRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TailleDataTable = CType(MyBase.Clone, TailleDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TailleDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnParamDessin_Id = MyBase.Columns("ParamDessin_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnParamDessin_Id = New System.Data.DataColumn("ParamDessin_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnParamDessin_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTailleRow() As TailleRow
            Return CType(Me.NewRow, TailleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TailleRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TailleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TailleRowChangedEvent) Is Nothing) Then
                RaiseEvent TailleRowChanged(Me, New TailleRowChangeEvent(CType(e.Row, TailleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TailleRowChangingEvent) Is Nothing) Then
                RaiseEvent TailleRowChanging(Me, New TailleRowChangeEvent(CType(e.Row, TailleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TailleRowDeletedEvent) Is Nothing) Then
                RaiseEvent TailleRowDeleted(Me, New TailleRowChangeEvent(CType(e.Row, TailleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TailleRowDeletingEvent) Is Nothing) Then
                RaiseEvent TailleRowDeleting(Me, New TailleRowChangeEvent(CType(e.Row, TailleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTailleRow(ByVal row As TailleRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TailleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class AffichageDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnSensTrajectoires As System.Data.DataColumn

        Private columnSensCirculation As System.Data.DataColumn

        Private columnAffichage_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Affichage"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SensTrajectoiresColumn() As System.Data.DataColumn
            Get
                Return Me.columnSensTrajectoires
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SensCirculationColumn() As System.Data.DataColumn
            Get
                Return Me.columnSensCirculation
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Affichage_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnAffichage_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As AffichageRow
            Get
                Return CType(Me.Rows(index), AffichageRow)
            End Get
        End Property

        Public Event AffichageRowChanging As AffichageRowChangeEventHandler

        Public Event AffichageRowChanged As AffichageRowChangeEventHandler

        Public Event AffichageRowDeleting As AffichageRowChangeEventHandler

        Public Event AffichageRowDeleted As AffichageRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddAffichageRow(ByVal row As AffichageRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddAffichageRow(ByVal SensTrajectoires As Boolean, ByVal SensCirculation As Boolean, ByVal parentVarianteRowByVariante_Affichage As VarianteRow) As AffichageRow
            Dim rowAffichageRow As AffichageRow = CType(Me.NewRow, AffichageRow)
            rowAffichageRow.ItemArray = New Object() {SensTrajectoires, SensCirculation, Nothing, parentVarianteRowByVariante_Affichage(5)}
            Me.Rows.Add(rowAffichageRow)
            Return rowAffichageRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AffichageDataTable = CType(MyBase.Clone, AffichageDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AffichageDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnSensTrajectoires = MyBase.Columns("SensTrajectoires")
            Me.columnSensCirculation = MyBase.Columns("SensCirculation")
            Me.columnAffichage_Id = MyBase.Columns("Affichage_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnSensTrajectoires = New System.Data.DataColumn("SensTrajectoires", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSensTrajectoires)
            Me.columnSensCirculation = New System.Data.DataColumn("SensCirculation", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSensCirculation)
            Me.columnAffichage_Id = New System.Data.DataColumn("Affichage_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnAffichage_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnAffichage_Id}, True))
            Me.columnAffichage_Id.AutoIncrement = True
            Me.columnAffichage_Id.AllowDBNull = False
            Me.columnAffichage_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewAffichageRow() As AffichageRow
            Return CType(Me.NewRow, AffichageRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AffichageRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AffichageRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AffichageRowChangedEvent) Is Nothing) Then
                RaiseEvent AffichageRowChanged(Me, New AffichageRowChangeEvent(CType(e.Row, AffichageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AffichageRowChangingEvent) Is Nothing) Then
                RaiseEvent AffichageRowChanging(Me, New AffichageRowChangeEvent(CType(e.Row, AffichageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AffichageRowDeletedEvent) Is Nothing) Then
                RaiseEvent AffichageRowDeleted(Me, New AffichageRowChangeEvent(CType(e.Row, AffichageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AffichageRowDeletingEvent) Is Nothing) Then
                RaiseEvent AffichageRowDeleting(Me, New AffichageRowChangeEvent(CType(e.Row, AffichageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveAffichageRow(ByVal row As AffichageRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AffichageDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class NordDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnRotation As System.Data.DataColumn

        Private columnVisible As System.Data.DataColumn

        Private columnNord_Id As System.Data.DataColumn

        Private columnAffichage_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Nord"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RotationColumn() As System.Data.DataColumn
            Get
                Return Me.columnRotation
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VisibleColumn() As System.Data.DataColumn
            Get
                Return Me.columnVisible
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Nord_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnNord_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Affichage_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnAffichage_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As NordRow
            Get
                Return CType(Me.Rows(index), NordRow)
            End Get
        End Property

        Public Event NordRowChanging As NordRowChangeEventHandler

        Public Event NordRowChanged As NordRowChangeEventHandler

        Public Event NordRowDeleting As NordRowChangeEventHandler

        Public Event NordRowDeleted As NordRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddNordRow(ByVal row As NordRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddNordRow(ByVal Rotation As Single, ByVal Visible As Boolean, ByVal parentAffichageRowByAffichage_Nord As AffichageRow) As NordRow
            Dim rowNordRow As NordRow = CType(Me.NewRow, NordRow)
            rowNordRow.ItemArray = New Object() {Rotation, Visible, Nothing, parentAffichageRowByAffichage_Nord(2)}
            Me.Rows.Add(rowNordRow)
            Return rowNordRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As NordDataTable = CType(MyBase.Clone, NordDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New NordDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnRotation = MyBase.Columns("Rotation")
            Me.columnVisible = MyBase.Columns("Visible")
            Me.columnNord_Id = MyBase.Columns("Nord_Id")
            Me.columnAffichage_Id = MyBase.Columns("Affichage_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnRotation = New System.Data.DataColumn("Rotation", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRotation)
            Me.columnVisible = New System.Data.DataColumn("Visible", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisible)
            Me.columnNord_Id = New System.Data.DataColumn("Nord_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnNord_Id)
            Me.columnAffichage_Id = New System.Data.DataColumn("Affichage_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnAffichage_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnNord_Id}, True))
            Me.columnRotation.AllowDBNull = False
            Me.columnVisible.AllowDBNull = False
            Me.columnNord_Id.AutoIncrement = True
            Me.columnNord_Id.AllowDBNull = False
            Me.columnNord_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewNordRow() As NordRow
            Return CType(Me.NewRow, NordRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New NordRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(NordRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.NordRowChangedEvent) Is Nothing) Then
                RaiseEvent NordRowChanged(Me, New NordRowChangeEvent(CType(e.Row, NordRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.NordRowChangingEvent) Is Nothing) Then
                RaiseEvent NordRowChanging(Me, New NordRowChangeEvent(CType(e.Row, NordRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.NordRowDeletedEvent) Is Nothing) Then
                RaiseEvent NordRowDeleted(Me, New NordRowChangeEvent(CType(e.Row, NordRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.NordRowDeletingEvent) Is Nothing) Then
                RaiseEvent NordRowDeleting(Me, New NordRowChangeEvent(CType(e.Row, NordRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveNordRow(ByVal row As NordRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "NordDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class pNordDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnNord_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "pNord"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Nord_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnNord_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As pNordRow
            Get
                Return CType(Me.Rows(index), pNordRow)
            End Get
        End Property

        Public Event pNordRowChanging As pNordRowChangeEventHandler

        Public Event pNordRowChanged As pNordRowChangeEventHandler

        Public Event pNordRowDeleting As pNordRowChangeEventHandler

        Public Event pNordRowDeleted As pNordRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddpNordRow(ByVal row As pNordRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddpNordRow(ByVal X As Short, ByVal Y As Short, ByVal parentNordRowByNord_pNord As NordRow) As pNordRow
            Dim rowpNordRow As pNordRow = CType(Me.NewRow, pNordRow)
            rowpNordRow.ItemArray = New Object() {X, Y, parentNordRowByNord_pNord(2)}
            Me.Rows.Add(rowpNordRow)
            Return rowpNordRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pNordDataTable = CType(MyBase.Clone, pNordDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pNordDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnNord_Id = MyBase.Columns("Nord_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnNord_Id = New System.Data.DataColumn("Nord_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnNord_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewpNordRow() As pNordRow
            Return CType(Me.NewRow, pNordRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pNordRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pNordRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pNordRowChangedEvent) Is Nothing) Then
                RaiseEvent pNordRowChanged(Me, New pNordRowChangeEvent(CType(e.Row, pNordRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pNordRowChangingEvent) Is Nothing) Then
                RaiseEvent pNordRowChanging(Me, New pNordRowChangeEvent(CType(e.Row, pNordRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pNordRowDeletedEvent) Is Nothing) Then
                RaiseEvent pNordRowDeleted(Me, New pNordRowChangeEvent(CType(e.Row, pNordRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pNordRowDeletingEvent) Is Nothing) Then
                RaiseEvent pNordRowDeleting(Me, New pNordRowChangeEvent(CType(e.Row, pNordRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovepNordRow(ByVal row As pNordRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pNordDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class SymEchelleDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnVisible As System.Data.DataColumn

        Private columnSymEchelle_Id As System.Data.DataColumn

        Private columnAffichage_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "SymEchelle"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VisibleColumn() As System.Data.DataColumn
            Get
                Return Me.columnVisible
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SymEchelle_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSymEchelle_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Affichage_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnAffichage_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As SymEchelleRow
            Get
                Return CType(Me.Rows(index), SymEchelleRow)
            End Get
        End Property

        Public Event SymEchelleRowChanging As SymEchelleRowChangeEventHandler

        Public Event SymEchelleRowChanged As SymEchelleRowChangeEventHandler

        Public Event SymEchelleRowDeleting As SymEchelleRowChangeEventHandler

        Public Event SymEchelleRowDeleted As SymEchelleRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddSymEchelleRow(ByVal row As SymEchelleRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSymEchelleRow(ByVal Visible As Boolean, ByVal parentAffichageRowByAffichage_SymEchelle As AffichageRow) As SymEchelleRow
            Dim rowSymEchelleRow As SymEchelleRow = CType(Me.NewRow, SymEchelleRow)
            rowSymEchelleRow.ItemArray = New Object() {Visible, Nothing, parentAffichageRowByAffichage_SymEchelle(2)}
            Me.Rows.Add(rowSymEchelleRow)
            Return rowSymEchelleRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SymEchelleDataTable = CType(MyBase.Clone, SymEchelleDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SymEchelleDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnVisible = MyBase.Columns("Visible")
            Me.columnSymEchelle_Id = MyBase.Columns("SymEchelle_Id")
            Me.columnAffichage_Id = MyBase.Columns("Affichage_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnVisible = New System.Data.DataColumn("Visible", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisible)
            Me.columnSymEchelle_Id = New System.Data.DataColumn("SymEchelle_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSymEchelle_Id)
            Me.columnAffichage_Id = New System.Data.DataColumn("Affichage_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnAffichage_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSymEchelle_Id}, True))
            Me.columnVisible.AllowDBNull = False
            Me.columnSymEchelle_Id.AutoIncrement = True
            Me.columnSymEchelle_Id.AllowDBNull = False
            Me.columnSymEchelle_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSymEchelleRow() As SymEchelleRow
            Return CType(Me.NewRow, SymEchelleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SymEchelleRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SymEchelleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SymEchelleRowChangedEvent) Is Nothing) Then
                RaiseEvent SymEchelleRowChanged(Me, New SymEchelleRowChangeEvent(CType(e.Row, SymEchelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SymEchelleRowChangingEvent) Is Nothing) Then
                RaiseEvent SymEchelleRowChanging(Me, New SymEchelleRowChangeEvent(CType(e.Row, SymEchelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SymEchelleRowDeletedEvent) Is Nothing) Then
                RaiseEvent SymEchelleRowDeleted(Me, New SymEchelleRowChangeEvent(CType(e.Row, SymEchelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SymEchelleRowDeletingEvent) Is Nothing) Then
                RaiseEvent SymEchelleRowDeleting(Me, New SymEchelleRowChangeEvent(CType(e.Row, SymEchelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSymEchelleRow(ByVal row As SymEchelleRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SymEchelleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class pSymEchelleDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnSymEchelle_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "pSymEchelle"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SymEchelle_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSymEchelle_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As pSymEchelleRow
            Get
                Return CType(Me.Rows(index), pSymEchelleRow)
            End Get
        End Property

        Public Event pSymEchelleRowChanging As pSymEchelleRowChangeEventHandler

        Public Event pSymEchelleRowChanged As pSymEchelleRowChangeEventHandler

        Public Event pSymEchelleRowDeleting As pSymEchelleRowChangeEventHandler

        Public Event pSymEchelleRowDeleted As pSymEchelleRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddpSymEchelleRow(ByVal row As pSymEchelleRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddpSymEchelleRow(ByVal X As Short, ByVal Y As Short, ByVal parentSymEchelleRowBySymEchelle_pSymEchelle As SymEchelleRow) As pSymEchelleRow
            Dim rowpSymEchelleRow As pSymEchelleRow = CType(Me.NewRow, pSymEchelleRow)
            rowpSymEchelleRow.ItemArray = New Object() {X, Y, parentSymEchelleRowBySymEchelle_pSymEchelle(1)}
            Me.Rows.Add(rowpSymEchelleRow)
            Return rowpSymEchelleRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pSymEchelleDataTable = CType(MyBase.Clone, pSymEchelleDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pSymEchelleDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnSymEchelle_Id = MyBase.Columns("SymEchelle_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnSymEchelle_Id = New System.Data.DataColumn("SymEchelle_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSymEchelle_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewpSymEchelleRow() As pSymEchelleRow
            Return CType(Me.NewRow, pSymEchelleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pSymEchelleRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pSymEchelleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pSymEchelleRowChangedEvent) Is Nothing) Then
                RaiseEvent pSymEchelleRowChanged(Me, New pSymEchelleRowChangeEvent(CType(e.Row, pSymEchelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pSymEchelleRowChangingEvent) Is Nothing) Then
                RaiseEvent pSymEchelleRowChanging(Me, New pSymEchelleRowChangeEvent(CType(e.Row, pSymEchelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pSymEchelleRowDeletedEvent) Is Nothing) Then
                RaiseEvent pSymEchelleRowDeleted(Me, New pSymEchelleRowChangeEvent(CType(e.Row, pSymEchelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pSymEchelleRowDeletingEvent) Is Nothing) Then
                RaiseEvent pSymEchelleRowDeleting(Me, New pSymEchelleRowChangeEvent(CType(e.Row, pSymEchelleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovepSymEchelleRow(ByVal row As pSymEchelleRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pSymEchelleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class FondPlanDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnNom As System.Data.DataColumn

        Private columnEchelle As System.Data.DataColumn

        Private columnEstDXF As System.Data.DataColumn

        Private columnRotation As System.Data.DataColumn

        Private columnFondPlan_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "FondPlan"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomColumn() As System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EchelleColumn() As System.Data.DataColumn
            Get
                Return Me.columnEchelle
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EstDXFColumn() As System.Data.DataColumn
            Get
                Return Me.columnEstDXF
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RotationColumn() As System.Data.DataColumn
            Get
                Return Me.columnRotation
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property FondPlan_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnFondPlan_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As FondPlanRow
            Get
                Return CType(Me.Rows(index), FondPlanRow)
            End Get
        End Property

        Public Event FondPlanRowChanging As FondPlanRowChangeEventHandler

        Public Event FondPlanRowChanged As FondPlanRowChangeEventHandler

        Public Event FondPlanRowDeleting As FondPlanRowChangeEventHandler

        Public Event FondPlanRowDeleted As FondPlanRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddFondPlanRow(ByVal row As FondPlanRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddFondPlanRow(ByVal Nom As String, ByVal Echelle As Short, ByVal EstDXF As Boolean, ByVal Rotation As Short, ByVal parentVarianteRowByVariante_FondPlan As VarianteRow) As FondPlanRow
            Dim rowFondPlanRow As FondPlanRow = CType(Me.NewRow, FondPlanRow)
            rowFondPlanRow.ItemArray = New Object() {Nom, Echelle, EstDXF, Rotation, Nothing, parentVarianteRowByVariante_FondPlan(5)}
            Me.Rows.Add(rowFondPlanRow)
            Return rowFondPlanRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As FondPlanDataTable = CType(MyBase.Clone, FondPlanDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New FondPlanDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnEchelle = MyBase.Columns("Echelle")
            Me.columnEstDXF = MyBase.Columns("EstDXF")
            Me.columnRotation = MyBase.Columns("Rotation")
            Me.columnFondPlan_Id = MyBase.Columns("FondPlan_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnNom = New System.Data.DataColumn("Nom", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnEchelle = New System.Data.DataColumn("Echelle", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEchelle)
            Me.columnEstDXF = New System.Data.DataColumn("EstDXF", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEstDXF)
            Me.columnRotation = New System.Data.DataColumn("Rotation", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRotation)
            Me.columnFondPlan_Id = New System.Data.DataColumn("FondPlan_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnFondPlan_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnFondPlan_Id}, True))
            Me.columnNom.AllowDBNull = False
            Me.columnEchelle.AllowDBNull = False
            Me.columnEstDXF.AllowDBNull = False
            Me.columnFondPlan_Id.AutoIncrement = True
            Me.columnFondPlan_Id.AllowDBNull = False
            Me.columnFondPlan_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewFondPlanRow() As FondPlanRow
            Return CType(Me.NewRow, FondPlanRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New FondPlanRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(FondPlanRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.FondPlanRowChangedEvent) Is Nothing) Then
                RaiseEvent FondPlanRowChanged(Me, New FondPlanRowChangeEvent(CType(e.Row, FondPlanRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.FondPlanRowChangingEvent) Is Nothing) Then
                RaiseEvent FondPlanRowChanging(Me, New FondPlanRowChangeEvent(CType(e.Row, FondPlanRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.FondPlanRowDeletedEvent) Is Nothing) Then
                RaiseEvent FondPlanRowDeleted(Me, New FondPlanRowChangeEvent(CType(e.Row, FondPlanRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.FondPlanRowDeletingEvent) Is Nothing) Then
                RaiseEvent FondPlanRowDeleting(Me, New FondPlanRowChangeEvent(CType(e.Row, FondPlanRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveFondPlanRow(ByVal row As FondPlanRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "FondPlanDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class MonDXFDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnds As System.Data.DataColumn

        Private columnFondPlan_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "MonDXF"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property dsColumn() As System.Data.DataColumn
            Get
                Return Me.columnds
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property FondPlan_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnFondPlan_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As MonDXFRow
            Get
                Return CType(Me.Rows(index), MonDXFRow)
            End Get
        End Property

        Public Event MonDXFRowChanging As MonDXFRowChangeEventHandler

        Public Event MonDXFRowChanged As MonDXFRowChangeEventHandler

        Public Event MonDXFRowDeleting As MonDXFRowChangeEventHandler

        Public Event MonDXFRowDeleted As MonDXFRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddMonDXFRow(ByVal row As MonDXFRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddMonDXFRow(ByVal ds As String, ByVal parentFondPlanRowByFondPlan_MonDXF As FondPlanRow) As MonDXFRow
            Dim rowMonDXFRow As MonDXFRow = CType(Me.NewRow, MonDXFRow)
            rowMonDXFRow.ItemArray = New Object() {ds, parentFondPlanRowByFondPlan_MonDXF(4)}
            Me.Rows.Add(rowMonDXFRow)
            Return rowMonDXFRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As MonDXFDataTable = CType(MyBase.Clone, MonDXFDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New MonDXFDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnds = MyBase.Columns("ds")
            Me.columnFondPlan_Id = MyBase.Columns("FondPlan_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnds = New System.Data.DataColumn("ds", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnds)
            Me.columnFondPlan_Id = New System.Data.DataColumn("FondPlan_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnFondPlan_Id)
            Me.columnds.Namespace = ""
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewMonDXFRow() As MonDXFRow
            Return CType(Me.NewRow, MonDXFRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New MonDXFRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(MonDXFRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.MonDXFRowChangedEvent) Is Nothing) Then
                RaiseEvent MonDXFRowChanged(Me, New MonDXFRowChangeEvent(CType(e.Row, MonDXFRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.MonDXFRowChangingEvent) Is Nothing) Then
                RaiseEvent MonDXFRowChanging(Me, New MonDXFRowChangeEvent(CType(e.Row, MonDXFRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.MonDXFRowDeletedEvent) Is Nothing) Then
                RaiseEvent MonDXFRowDeleted(Me, New MonDXFRowChangeEvent(CType(e.Row, MonDXFRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.MonDXFRowDeletingEvent) Is Nothing) Then
                RaiseEvent MonDXFRowDeleting(Me, New MonDXFRowChangeEvent(CType(e.Row, MonDXFRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveMonDXFRow(ByVal row As MonDXFRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "MonDXFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class BrancheDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnAngle As System.Data.DataColumn

        Private columnLargeurVoies As System.Data.DataColumn

        Private columnLongueur As System.Data.DataColumn

        Private columnNomRue As System.Data.DataColumn

        Private columnBranche_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Branche"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property AngleColumn() As System.Data.DataColumn
            Get
                Return Me.columnAngle
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LargeurVoiesColumn() As System.Data.DataColumn
            Get
                Return Me.columnLargeurVoies
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LongueurColumn() As System.Data.DataColumn
            Get
                Return Me.columnLongueur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomRueColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomRue
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Branche_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBranche_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As BrancheRow
            Get
                Return CType(Me.Rows(index), BrancheRow)
            End Get
        End Property

        Public Event BrancheRowChanging As BrancheRowChangeEventHandler

        Public Event BrancheRowChanged As BrancheRowChangeEventHandler

        Public Event BrancheRowDeleting As BrancheRowChangeEventHandler

        Public Event BrancheRowDeleted As BrancheRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddBrancheRow(ByVal row As BrancheRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddBrancheRow(ByVal Angle As Short, ByVal LargeurVoies As Single, ByVal Longueur As Short, ByVal NomRue As String, ByVal parentVarianteRowByVariante_Branche As VarianteRow) As BrancheRow
            Dim rowBrancheRow As BrancheRow = CType(Me.NewRow, BrancheRow)
            rowBrancheRow.ItemArray = New Object() {Angle, LargeurVoies, Longueur, NomRue, Nothing, parentVarianteRowByVariante_Branche(5)}
            Me.Rows.Add(rowBrancheRow)
            Return rowBrancheRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As BrancheDataTable = CType(MyBase.Clone, BrancheDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New BrancheDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnAngle = MyBase.Columns("Angle")
            Me.columnLargeurVoies = MyBase.Columns("LargeurVoies")
            Me.columnLongueur = MyBase.Columns("Longueur")
            Me.columnNomRue = MyBase.Columns("NomRue")
            Me.columnBranche_Id = MyBase.Columns("Branche_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnAngle = New System.Data.DataColumn("Angle", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAngle)
            Me.columnLargeurVoies = New System.Data.DataColumn("LargeurVoies", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLargeurVoies)
            Me.columnLongueur = New System.Data.DataColumn("Longueur", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongueur)
            Me.columnNomRue = New System.Data.DataColumn("NomRue", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomRue)
            Me.columnBranche_Id = New System.Data.DataColumn("Branche_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBranche_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnBranche_Id}, True))
            Me.columnAngle.AllowDBNull = False
            Me.columnLargeurVoies.AllowDBNull = False
            Me.columnLongueur.AllowDBNull = False
            Me.columnLongueur.DefaultValue = CType(25, Short)
            Me.columnBranche_Id.AutoIncrement = True
            Me.columnBranche_Id.AllowDBNull = False
            Me.columnBranche_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewBrancheRow() As BrancheRow
            Return CType(Me.NewRow, BrancheRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New BrancheRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BrancheRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BrancheRowChangedEvent) Is Nothing) Then
                RaiseEvent BrancheRowChanged(Me, New BrancheRowChangeEvent(CType(e.Row, BrancheRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BrancheRowChangingEvent) Is Nothing) Then
                RaiseEvent BrancheRowChanging(Me, New BrancheRowChangeEvent(CType(e.Row, BrancheRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BrancheRowDeletedEvent) Is Nothing) Then
                RaiseEvent BrancheRowDeleted(Me, New BrancheRowChangeEvent(CType(e.Row, BrancheRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BrancheRowDeletingEvent) Is Nothing) Then
                RaiseEvent BrancheRowDeleting(Me, New BrancheRowChangeEvent(CType(e.Row, BrancheRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveBrancheRow(ByVal row As BrancheRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BrancheDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class IlotDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnLargeur As System.Data.DataColumn

        Private columnRayon As System.Data.DataColumn

        Private columnDécalage As System.Data.DataColumn

        Private columnRetrait As System.Data.DataColumn

        Private columnBranche_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Ilot"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LargeurColumn() As System.Data.DataColumn
            Get
                Return Me.columnLargeur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RayonColumn() As System.Data.DataColumn
            Get
                Return Me.columnRayon
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DécalageColumn() As System.Data.DataColumn
            Get
                Return Me.columnDécalage
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RetraitColumn() As System.Data.DataColumn
            Get
                Return Me.columnRetrait
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Branche_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBranche_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As IlotRow
            Get
                Return CType(Me.Rows(index), IlotRow)
            End Get
        End Property

        Public Event IlotRowChanging As IlotRowChangeEventHandler

        Public Event IlotRowChanged As IlotRowChangeEventHandler

        Public Event IlotRowDeleting As IlotRowChangeEventHandler

        Public Event IlotRowDeleted As IlotRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddIlotRow(ByVal row As IlotRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddIlotRow(ByVal Largeur As Single, ByVal Rayon As Single, ByVal Décalage As Single, ByVal Retrait As Single, ByVal parentBrancheRowByBranche_Ilot As BrancheRow) As IlotRow
            Dim rowIlotRow As IlotRow = CType(Me.NewRow, IlotRow)
            rowIlotRow.ItemArray = New Object() {Largeur, Rayon, Décalage, Retrait, parentBrancheRowByBranche_Ilot(4)}
            Me.Rows.Add(rowIlotRow)
            Return rowIlotRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As IlotDataTable = CType(MyBase.Clone, IlotDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New IlotDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnLargeur = MyBase.Columns("Largeur")
            Me.columnRayon = MyBase.Columns("Rayon")
            Me.columnDécalage = MyBase.Columns("Décalage")
            Me.columnRetrait = MyBase.Columns("Retrait")
            Me.columnBranche_Id = MyBase.Columns("Branche_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnLargeur = New System.Data.DataColumn("Largeur", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLargeur)
            Me.columnRayon = New System.Data.DataColumn("Rayon", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRayon)
            Me.columnDécalage = New System.Data.DataColumn("Décalage", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDécalage)
            Me.columnRetrait = New System.Data.DataColumn("Retrait", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRetrait)
            Me.columnBranche_Id = New System.Data.DataColumn("Branche_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBranche_Id)
            Me.columnLargeur.AllowDBNull = False
            Me.columnRayon.AllowDBNull = False
            Me.columnDécalage.AllowDBNull = False
            Me.columnRetrait.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewIlotRow() As IlotRow
            Return CType(Me.NewRow, IlotRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New IlotRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IlotRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IlotRowChangedEvent) Is Nothing) Then
                RaiseEvent IlotRowChanged(Me, New IlotRowChangeEvent(CType(e.Row, IlotRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IlotRowChangingEvent) Is Nothing) Then
                RaiseEvent IlotRowChanging(Me, New IlotRowChangeEvent(CType(e.Row, IlotRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IlotRowDeletedEvent) Is Nothing) Then
                RaiseEvent IlotRowDeleted(Me, New IlotRowChangeEvent(CType(e.Row, IlotRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IlotRowDeletingEvent) Is Nothing) Then
                RaiseEvent IlotRowDeleting(Me, New IlotRowChangeEvent(CType(e.Row, IlotRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveIlotRow(ByVal row As IlotRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IlotDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class VoieDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnEntrante As System.Data.DataColumn

        Private columnVoie_text As System.Data.DataColumn

        Private columnBranche_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Voie"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EntranteColumn() As System.Data.DataColumn
            Get
                Return Me.columnEntrante
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Voie_textColumn() As System.Data.DataColumn
            Get
                Return Me.columnVoie_text
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Branche_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBranche_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As VoieRow
            Get
                Return CType(Me.Rows(index), VoieRow)
            End Get
        End Property

        Public Event VoieRowChanging As VoieRowChangeEventHandler

        Public Event VoieRowChanged As VoieRowChangeEventHandler

        Public Event VoieRowDeleting As VoieRowChangeEventHandler

        Public Event VoieRowDeleted As VoieRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddVoieRow(ByVal row As VoieRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddVoieRow(ByVal Entrante As Boolean, ByVal Voie_text As Short, ByVal parentBrancheRowByBranche_Voie As BrancheRow) As VoieRow
            Dim rowVoieRow As VoieRow = CType(Me.NewRow, VoieRow)
            rowVoieRow.ItemArray = New Object() {Entrante, Voie_text, parentBrancheRowByBranche_Voie(4)}
            Me.Rows.Add(rowVoieRow)
            Return rowVoieRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As VoieDataTable = CType(MyBase.Clone, VoieDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New VoieDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnEntrante = MyBase.Columns("Entrante")
            Me.columnVoie_text = MyBase.Columns("Voie_text")
            Me.columnBranche_Id = MyBase.Columns("Branche_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnEntrante = New System.Data.DataColumn("Entrante", GetType(Boolean), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnEntrante)
            Me.columnVoie_text = New System.Data.DataColumn("Voie_text", GetType(Short), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnVoie_text)
            Me.columnBranche_Id = New System.Data.DataColumn("Branche_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBranche_Id)
            Me.columnEntrante.AllowDBNull = False
            Me.columnEntrante.Namespace = ""
            Me.columnVoie_text.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewVoieRow() As VoieRow
            Return CType(Me.NewRow, VoieRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New VoieRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VoieRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VoieRowChangedEvent) Is Nothing) Then
                RaiseEvent VoieRowChanged(Me, New VoieRowChangeEvent(CType(e.Row, VoieRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VoieRowChangingEvent) Is Nothing) Then
                RaiseEvent VoieRowChanging(Me, New VoieRowChangeEvent(CType(e.Row, VoieRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VoieRowDeletedEvent) Is Nothing) Then
                RaiseEvent VoieRowDeleted(Me, New VoieRowChangeEvent(CType(e.Row, VoieRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VoieRowDeletingEvent) Is Nothing) Then
                RaiseEvent VoieRowDeleting(Me, New VoieRowChangeEvent(CType(e.Row, VoieRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveVoieRow(ByVal row As VoieRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VoieDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class ptFlechesTraficDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnBranche_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ptFlechesTrafic"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Branche_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBranche_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As ptFlechesTraficRow
            Get
                Return CType(Me.Rows(index), ptFlechesTraficRow)
            End Get
        End Property

        Public Event ptFlechesTraficRowChanging As ptFlechesTraficRowChangeEventHandler

        Public Event ptFlechesTraficRowChanged As ptFlechesTraficRowChangeEventHandler

        Public Event ptFlechesTraficRowDeleting As ptFlechesTraficRowChangeEventHandler

        Public Event ptFlechesTraficRowDeleted As ptFlechesTraficRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddptFlechesTraficRow(ByVal row As ptFlechesTraficRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddptFlechesTraficRow(ByVal X As Short, ByVal Y As Short, ByVal parentBrancheRowByBranche_ptFlechesTrafic As BrancheRow) As ptFlechesTraficRow
            Dim rowptFlechesTraficRow As ptFlechesTraficRow = CType(Me.NewRow, ptFlechesTraficRow)
            rowptFlechesTraficRow.ItemArray = New Object() {X, Y, parentBrancheRowByBranche_ptFlechesTrafic(4)}
            Me.Rows.Add(rowptFlechesTraficRow)
            Return rowptFlechesTraficRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ptFlechesTraficDataTable = CType(MyBase.Clone, ptFlechesTraficDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ptFlechesTraficDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnBranche_Id = MyBase.Columns("Branche_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnBranche_Id = New System.Data.DataColumn("Branche_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBranche_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewptFlechesTraficRow() As ptFlechesTraficRow
            Return CType(Me.NewRow, ptFlechesTraficRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ptFlechesTraficRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ptFlechesTraficRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ptFlechesTraficRowChangedEvent) Is Nothing) Then
                RaiseEvent ptFlechesTraficRowChanged(Me, New ptFlechesTraficRowChangeEvent(CType(e.Row, ptFlechesTraficRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ptFlechesTraficRowChangingEvent) Is Nothing) Then
                RaiseEvent ptFlechesTraficRowChanging(Me, New ptFlechesTraficRowChangeEvent(CType(e.Row, ptFlechesTraficRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ptFlechesTraficRowDeletedEvent) Is Nothing) Then
                RaiseEvent ptFlechesTraficRowDeleted(Me, New ptFlechesTraficRowChangeEvent(CType(e.Row, ptFlechesTraficRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ptFlechesTraficRowDeletingEvent) Is Nothing) Then
                RaiseEvent ptFlechesTraficRowDeleting(Me, New ptFlechesTraficRowChangeEvent(CType(e.Row, ptFlechesTraficRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveptFlechesTraficRow(ByVal row As ptFlechesTraficRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ptFlechesTraficDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class OrigineDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnBranche_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Origine"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Branche_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBranche_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As OrigineRow
            Get
                Return CType(Me.Rows(index), OrigineRow)
            End Get
        End Property

        Public Event OrigineRowChanging As OrigineRowChangeEventHandler

        Public Event OrigineRowChanged As OrigineRowChangeEventHandler

        Public Event OrigineRowDeleting As OrigineRowChangeEventHandler

        Public Event OrigineRowDeleted As OrigineRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddOrigineRow(ByVal row As OrigineRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddOrigineRow(ByVal X As Single, ByVal Y As Single, ByVal parentBrancheRowByBranche_Origine As BrancheRow) As OrigineRow
            Dim rowOrigineRow As OrigineRow = CType(Me.NewRow, OrigineRow)
            rowOrigineRow.ItemArray = New Object() {X, Y, parentBrancheRowByBranche_Origine(4)}
            Me.Rows.Add(rowOrigineRow)
            Return rowOrigineRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As OrigineDataTable = CType(MyBase.Clone, OrigineDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New OrigineDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnBranche_Id = MyBase.Columns("Branche_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnBranche_Id = New System.Data.DataColumn("Branche_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBranche_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewOrigineRow() As OrigineRow
            Return CType(Me.NewRow, OrigineRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New OrigineRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrigineRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrigineRowChangedEvent) Is Nothing) Then
                RaiseEvent OrigineRowChanged(Me, New OrigineRowChangeEvent(CType(e.Row, OrigineRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrigineRowChangingEvent) Is Nothing) Then
                RaiseEvent OrigineRowChanging(Me, New OrigineRowChangeEvent(CType(e.Row, OrigineRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrigineRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrigineRowDeleted(Me, New OrigineRowChangeEvent(CType(e.Row, OrigineRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrigineRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrigineRowDeleting(Me, New OrigineRowChangeEvent(CType(e.Row, OrigineRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveOrigineRow(ByVal row As OrigineRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrigineDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PassageDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnPassage_Id As System.Data.DataColumn

        Private columnBranche_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Passage"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Passage_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPassage_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Branche_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBranche_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PassageRow
            Get
                Return CType(Me.Rows(index), PassageRow)
            End Get
        End Property

        Public Event PassageRowChanging As PassageRowChangeEventHandler

        Public Event PassageRowChanged As PassageRowChangeEventHandler

        Public Event PassageRowDeleting As PassageRowChangeEventHandler

        Public Event PassageRowDeleted As PassageRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPassageRow(ByVal row As PassageRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPassageRow(ByVal parentBrancheRowByBranche_Passage As BrancheRow) As PassageRow
            Dim rowPassageRow As PassageRow = CType(Me.NewRow, PassageRow)
            rowPassageRow.ItemArray = New Object() {Nothing, parentBrancheRowByBranche_Passage(4)}
            Me.Rows.Add(rowPassageRow)
            Return rowPassageRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PassageDataTable = CType(MyBase.Clone, PassageDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PassageDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnPassage_Id = MyBase.Columns("Passage_Id")
            Me.columnBranche_Id = MyBase.Columns("Branche_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnPassage_Id = New System.Data.DataColumn("Passage_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPassage_Id)
            Me.columnBranche_Id = New System.Data.DataColumn("Branche_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBranche_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPassage_Id}, True))
            Me.columnPassage_Id.AutoIncrement = True
            Me.columnPassage_Id.AllowDBNull = False
            Me.columnPassage_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPassageRow() As PassageRow
            Return CType(Me.NewRow, PassageRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PassageRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PassageRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PassageRowChangedEvent) Is Nothing) Then
                RaiseEvent PassageRowChanged(Me, New PassageRowChangeEvent(CType(e.Row, PassageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PassageRowChangingEvent) Is Nothing) Then
                RaiseEvent PassageRowChanging(Me, New PassageRowChangeEvent(CType(e.Row, PassageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PassageRowDeletedEvent) Is Nothing) Then
                RaiseEvent PassageRowDeleted(Me, New PassageRowChangeEvent(CType(e.Row, PassageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PassageRowDeletingEvent) Is Nothing) Then
                RaiseEvent PassageRowDeleting(Me, New PassageRowChangeEvent(CType(e.Row, PassageRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePassageRow(ByVal row As PassageRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PassageDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PointDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnPassage_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Point"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Passage_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPassage_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PointRow
            Get
                Return CType(Me.Rows(index), PointRow)
            End Get
        End Property

        Public Event PointRowChanging As PointRowChangeEventHandler

        Public Event PointRowChanged As PointRowChangeEventHandler

        Public Event PointRowDeleting As PointRowChangeEventHandler

        Public Event PointRowDeleted As PointRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPointRow(ByVal row As PointRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPointRow(ByVal X As Single, ByVal Y As Single, ByVal parentPassageRowByPassage_Point As PassageRow) As PointRow
            Dim rowPointRow As PointRow = CType(Me.NewRow, PointRow)
            rowPointRow.ItemArray = New Object() {X, Y, parentPassageRowByPassage_Point(0)}
            Me.Rows.Add(rowPointRow)
            Return rowPointRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PointDataTable = CType(MyBase.Clone, PointDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PointDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnPassage_Id = MyBase.Columns("Passage_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnPassage_Id = New System.Data.DataColumn("Passage_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPassage_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPointRow() As PointRow
            Return CType(Me.NewRow, PointRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PointRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PointRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PointRowChangedEvent) Is Nothing) Then
                RaiseEvent PointRowChanged(Me, New PointRowChangeEvent(CType(e.Row, PointRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PointRowChangingEvent) Is Nothing) Then
                RaiseEvent PointRowChanging(Me, New PointRowChangeEvent(CType(e.Row, PointRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PointRowDeletedEvent) Is Nothing) Then
                RaiseEvent PointRowDeleted(Me, New PointRowChangeEvent(CType(e.Row, PointRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PointRowDeletingEvent) Is Nothing) Then
                RaiseEvent PointRowDeleting(Me, New PointRowChangeEvent(CType(e.Row, PointRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePointRow(ByVal row As PointRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PointDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class VoieIntersecteeDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnVoieIntersectee_Column As System.Data.DataColumn

        Private columnPassage_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "VoieIntersectee"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VoieIntersectee_ColumnColumn() As System.Data.DataColumn
            Get
                Return Me.columnVoieIntersectee_Column
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Passage_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPassage_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As VoieIntersecteeRow
            Get
                Return CType(Me.Rows(index), VoieIntersecteeRow)
            End Get
        End Property

        Public Event VoieIntersecteeRowChanging As VoieIntersecteeRowChangeEventHandler

        Public Event VoieIntersecteeRowChanged As VoieIntersecteeRowChangeEventHandler

        Public Event VoieIntersecteeRowDeleting As VoieIntersecteeRowChangeEventHandler

        Public Event VoieIntersecteeRowDeleted As VoieIntersecteeRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddVoieIntersecteeRow(ByVal row As VoieIntersecteeRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddVoieIntersecteeRow(ByVal VoieIntersectee_Column As Short, ByVal parentPassageRowByPassage_VoieIntersectee As PassageRow) As VoieIntersecteeRow
            Dim rowVoieIntersecteeRow As VoieIntersecteeRow = CType(Me.NewRow, VoieIntersecteeRow)
            rowVoieIntersecteeRow.ItemArray = New Object() {VoieIntersectee_Column, parentPassageRowByPassage_VoieIntersectee(0)}
            Me.Rows.Add(rowVoieIntersecteeRow)
            Return rowVoieIntersecteeRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As VoieIntersecteeDataTable = CType(MyBase.Clone, VoieIntersecteeDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New VoieIntersecteeDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnVoieIntersectee_Column = MyBase.Columns("VoieIntersectee_Column")
            Me.columnPassage_Id = MyBase.Columns("Passage_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnVoieIntersectee_Column = New System.Data.DataColumn("VoieIntersectee_Column", GetType(Short), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnVoieIntersectee_Column)
            Me.columnPassage_Id = New System.Data.DataColumn("Passage_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPassage_Id)
            Me.columnVoieIntersectee_Column.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewVoieIntersecteeRow() As VoieIntersecteeRow
            Return CType(Me.NewRow, VoieIntersecteeRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New VoieIntersecteeRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VoieIntersecteeRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VoieIntersecteeRowChangedEvent) Is Nothing) Then
                RaiseEvent VoieIntersecteeRowChanged(Me, New VoieIntersecteeRowChangeEvent(CType(e.Row, VoieIntersecteeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VoieIntersecteeRowChangingEvent) Is Nothing) Then
                RaiseEvent VoieIntersecteeRowChanging(Me, New VoieIntersecteeRowChangeEvent(CType(e.Row, VoieIntersecteeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VoieIntersecteeRowDeletedEvent) Is Nothing) Then
                RaiseEvent VoieIntersecteeRowDeleted(Me, New VoieIntersecteeRowChangeEvent(CType(e.Row, VoieIntersecteeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VoieIntersecteeRowDeletingEvent) Is Nothing) Then
                RaiseEvent VoieIntersecteeRowDeleting(Me, New VoieIntersecteeRowChangeEvent(CType(e.Row, VoieIntersecteeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveVoieIntersecteeRow(ByVal row As VoieIntersecteeRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VoieIntersecteeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class LigneDeFeuxDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnID As System.Data.DataColumn

        Private columnNumBranche As System.Data.DataColumn

        Private columnDécalage As System.Data.DataColumn

        Private columnNbVoies As System.Data.DataColumn

        Private columnNumVoie1 As System.Data.DataColumn

        Private columnSignalAnticipation As System.Data.DataColumn

        Private columnTAD As System.Data.DataColumn

        Private columnTAG As System.Data.DataColumn

        Private columnTD As System.Data.DataColumn

        Private columnLigneDeFeux_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "LigneDeFeux"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NumBrancheColumn() As System.Data.DataColumn
            Get
                Return Me.columnNumBranche
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DécalageColumn() As System.Data.DataColumn
            Get
                Return Me.columnDécalage
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NbVoiesColumn() As System.Data.DataColumn
            Get
                Return Me.columnNbVoies
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NumVoie1Column() As System.Data.DataColumn
            Get
                Return Me.columnNumVoie1
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SignalAnticipationColumn() As System.Data.DataColumn
            Get
                Return Me.columnSignalAnticipation
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TADColumn() As System.Data.DataColumn
            Get
                Return Me.columnTAD
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TAGColumn() As System.Data.DataColumn
            Get
                Return Me.columnTAG
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TDColumn() As System.Data.DataColumn
            Get
                Return Me.columnTD
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LigneDeFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLigneDeFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As LigneDeFeuxRow
            Get
                Return CType(Me.Rows(index), LigneDeFeuxRow)
            End Get
        End Property

        Public Event LigneDeFeuxRowChanging As LigneDeFeuxRowChangeEventHandler

        Public Event LigneDeFeuxRowChanged As LigneDeFeuxRowChangeEventHandler

        Public Event LigneDeFeuxRowDeleting As LigneDeFeuxRowChangeEventHandler

        Public Event LigneDeFeuxRowDeleted As LigneDeFeuxRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddLigneDeFeuxRow(ByVal row As LigneDeFeuxRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddLigneDeFeuxRow(ByVal ID As String, ByVal NumBranche As Short, ByVal Décalage As Single, ByVal NbVoies As Short, ByVal NumVoie1 As Short, ByVal SignalAnticipation As String, ByVal TAD As Boolean, ByVal TAG As Boolean, ByVal TD As Boolean, ByVal parentVarianteRowByVariante_LigneDeFeux As VarianteRow) As LigneDeFeuxRow
            Dim rowLigneDeFeuxRow As LigneDeFeuxRow = CType(Me.NewRow, LigneDeFeuxRow)
            rowLigneDeFeuxRow.ItemArray = New Object() {ID, NumBranche, Décalage, NbVoies, NumVoie1, SignalAnticipation, TAD, TAG, TD, Nothing, parentVarianteRowByVariante_LigneDeFeux(5)}
            Me.Rows.Add(rowLigneDeFeuxRow)
            Return rowLigneDeFeuxRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LigneDeFeuxDataTable = CType(MyBase.Clone, LigneDeFeuxDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LigneDeFeuxDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnNumBranche = MyBase.Columns("NumBranche")
            Me.columnDécalage = MyBase.Columns("Décalage")
            Me.columnNbVoies = MyBase.Columns("NbVoies")
            Me.columnNumVoie1 = MyBase.Columns("NumVoie1")
            Me.columnSignalAnticipation = MyBase.Columns("SignalAnticipation")
            Me.columnTAD = MyBase.Columns("TAD")
            Me.columnTAG = MyBase.Columns("TAG")
            Me.columnTD = MyBase.Columns("TD")
            Me.columnLigneDeFeux_Id = MyBase.Columns("LigneDeFeux_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnID)
            Me.columnNumBranche = New System.Data.DataColumn("NumBranche", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumBranche)
            Me.columnDécalage = New System.Data.DataColumn("Décalage", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDécalage)
            Me.columnNbVoies = New System.Data.DataColumn("NbVoies", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbVoies)
            Me.columnNumVoie1 = New System.Data.DataColumn("NumVoie1", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumVoie1)
            Me.columnSignalAnticipation = New System.Data.DataColumn("SignalAnticipation", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSignalAnticipation)
            Me.columnTAD = New System.Data.DataColumn("TAD", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAD)
            Me.columnTAG = New System.Data.DataColumn("TAG", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTAG)
            Me.columnTD = New System.Data.DataColumn("TD", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTD)
            Me.columnLigneDeFeux_Id = New System.Data.DataColumn("LigneDeFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLigneDeFeux_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnLigneDeFeux_Id}, True))
            Me.columnID.AllowDBNull = False
            Me.columnNumBranche.AllowDBNull = False
            Me.columnNumVoie1.DefaultValue = CType(0, Short)
            Me.columnLigneDeFeux_Id.AutoIncrement = True
            Me.columnLigneDeFeux_Id.AllowDBNull = False
            Me.columnLigneDeFeux_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewLigneDeFeuxRow() As LigneDeFeuxRow
            Return CType(Me.NewRow, LigneDeFeuxRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LigneDeFeuxRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LigneDeFeuxRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LigneDeFeuxRowChangedEvent) Is Nothing) Then
                RaiseEvent LigneDeFeuxRowChanged(Me, New LigneDeFeuxRowChangeEvent(CType(e.Row, LigneDeFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LigneDeFeuxRowChangingEvent) Is Nothing) Then
                RaiseEvent LigneDeFeuxRowChanging(Me, New LigneDeFeuxRowChangeEvent(CType(e.Row, LigneDeFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LigneDeFeuxRowDeletedEvent) Is Nothing) Then
                RaiseEvent LigneDeFeuxRowDeleted(Me, New LigneDeFeuxRowChangeEvent(CType(e.Row, LigneDeFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LigneDeFeuxRowDeletingEvent) Is Nothing) Then
                RaiseEvent LigneDeFeuxRowDeleting(Me, New LigneDeFeuxRowChangeEvent(CType(e.Row, LigneDeFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveLigneDeFeuxRow(ByVal row As LigneDeFeuxRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LigneDeFeuxDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class SignalDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnstrCode As System.Data.DataColumn

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnLigneDeFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Signal"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property strCodeColumn() As System.Data.DataColumn
            Get
                Return Me.columnstrCode
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LigneDeFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLigneDeFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As SignalRow
            Get
                Return CType(Me.Rows(index), SignalRow)
            End Get
        End Property

        Public Event SignalRowChanging As SignalRowChangeEventHandler

        Public Event SignalRowChanged As SignalRowChangeEventHandler

        Public Event SignalRowDeleting As SignalRowChangeEventHandler

        Public Event SignalRowDeleted As SignalRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddSignalRow(ByVal row As SignalRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSignalRow(ByVal strCode As String, ByVal X As Short, ByVal Y As Short, ByVal parentLigneDeFeuxRowByLigneDeFeux_Signal As LigneDeFeuxRow) As SignalRow
            Dim rowSignalRow As SignalRow = CType(Me.NewRow, SignalRow)
            rowSignalRow.ItemArray = New Object() {strCode, X, Y, parentLigneDeFeuxRowByLigneDeFeux_Signal(9)}
            Me.Rows.Add(rowSignalRow)
            Return rowSignalRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SignalDataTable = CType(MyBase.Clone, SignalDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SignalDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnstrCode = MyBase.Columns("strCode")
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnLigneDeFeux_Id = MyBase.Columns("LigneDeFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnstrCode = New System.Data.DataColumn("strCode", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnstrCode)
            Me.columnX = New System.Data.DataColumn("X", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnLigneDeFeux_Id = New System.Data.DataColumn("LigneDeFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLigneDeFeux_Id)
            Me.columnstrCode.AllowDBNull = False
            Me.columnstrCode.Namespace = ""
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSignalRow() As SignalRow
            Return CType(Me.NewRow, SignalRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SignalRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SignalRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SignalRowChangedEvent) Is Nothing) Then
                RaiseEvent SignalRowChanged(Me, New SignalRowChangeEvent(CType(e.Row, SignalRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SignalRowChangingEvent) Is Nothing) Then
                RaiseEvent SignalRowChanging(Me, New SignalRowChangeEvent(CType(e.Row, SignalRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SignalRowDeletedEvent) Is Nothing) Then
                RaiseEvent SignalRowDeleted(Me, New SignalRowChangeEvent(CType(e.Row, SignalRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SignalRowDeletingEvent) Is Nothing) Then
                RaiseEvent SignalRowDeleting(Me, New SignalRowChangeEvent(CType(e.Row, SignalRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSignalRow(ByVal row As SignalRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SignalDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class RougeDégagementDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnIDAdverse As System.Data.DataColumn

        Private columnRougeDégagement_text As System.Data.DataColumn

        Private columnLigneDeFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "RougeDégagement"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDAdverseColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDAdverse
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RougeDégagement_textColumn() As System.Data.DataColumn
            Get
                Return Me.columnRougeDégagement_text
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LigneDeFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLigneDeFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As RougeDégagementRow
            Get
                Return CType(Me.Rows(index), RougeDégagementRow)
            End Get
        End Property

        Public Event RougeDégagementRowChanging As RougeDégagementRowChangeEventHandler

        Public Event RougeDégagementRowChanged As RougeDégagementRowChangeEventHandler

        Public Event RougeDégagementRowDeleting As RougeDégagementRowChangeEventHandler

        Public Event RougeDégagementRowDeleted As RougeDégagementRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddRougeDégagementRow(ByVal row As RougeDégagementRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddRougeDégagementRow(ByVal IDAdverse As String, ByVal RougeDégagement_text As Short, ByVal parentLigneDeFeuxRowByLigneDeFeux_RougeDégagement As LigneDeFeuxRow) As RougeDégagementRow
            Dim rowRougeDégagementRow As RougeDégagementRow = CType(Me.NewRow, RougeDégagementRow)
            rowRougeDégagementRow.ItemArray = New Object() {IDAdverse, RougeDégagement_text, parentLigneDeFeuxRowByLigneDeFeux_RougeDégagement(9)}
            Me.Rows.Add(rowRougeDégagementRow)
            Return rowRougeDégagementRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As RougeDégagementDataTable = CType(MyBase.Clone, RougeDégagementDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New RougeDégagementDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnIDAdverse = MyBase.Columns("IDAdverse")
            Me.columnRougeDégagement_text = MyBase.Columns("RougeDégagement_text")
            Me.columnLigneDeFeux_Id = MyBase.Columns("LigneDeFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnIDAdverse = New System.Data.DataColumn("IDAdverse", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIDAdverse)
            Me.columnRougeDégagement_text = New System.Data.DataColumn("RougeDégagement_text", GetType(Short), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnRougeDégagement_text)
            Me.columnLigneDeFeux_Id = New System.Data.DataColumn("LigneDeFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLigneDeFeux_Id)
            Me.columnIDAdverse.AllowDBNull = False
            Me.columnIDAdverse.Namespace = ""
            Me.columnRougeDégagement_text.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewRougeDégagementRow() As RougeDégagementRow
            Return CType(Me.NewRow, RougeDégagementRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New RougeDégagementRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RougeDégagementRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RougeDégagementRowChangedEvent) Is Nothing) Then
                RaiseEvent RougeDégagementRowChanged(Me, New RougeDégagementRowChangeEvent(CType(e.Row, RougeDégagementRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RougeDégagementRowChangingEvent) Is Nothing) Then
                RaiseEvent RougeDégagementRowChanging(Me, New RougeDégagementRowChangeEvent(CType(e.Row, RougeDégagementRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RougeDégagementRowDeletedEvent) Is Nothing) Then
                RaiseEvent RougeDégagementRowDeleted(Me, New RougeDégagementRowChangeEvent(CType(e.Row, RougeDégagementRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RougeDégagementRowDeletingEvent) Is Nothing) Then
                RaiseEvent RougeDégagementRowDeleting(Me, New RougeDégagementRowChangeEvent(CType(e.Row, RougeDégagementRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveRougeDégagementRow(ByVal row As RougeDégagementRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RougeDégagementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class IncompatibleDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnIDAdverse As System.Data.DataColumn

        Private columnLigneDeFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Incompatible"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDAdverseColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDAdverse
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LigneDeFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLigneDeFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As IncompatibleRow
            Get
                Return CType(Me.Rows(index), IncompatibleRow)
            End Get
        End Property

        Public Event IncompatibleRowChanging As IncompatibleRowChangeEventHandler

        Public Event IncompatibleRowChanged As IncompatibleRowChangeEventHandler

        Public Event IncompatibleRowDeleting As IncompatibleRowChangeEventHandler

        Public Event IncompatibleRowDeleted As IncompatibleRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddIncompatibleRow(ByVal row As IncompatibleRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddIncompatibleRow(ByVal IDAdverse As String, ByVal parentLigneDeFeuxRowByLigneDeFeux_Incompatible As LigneDeFeuxRow) As IncompatibleRow
            Dim rowIncompatibleRow As IncompatibleRow = CType(Me.NewRow, IncompatibleRow)
            rowIncompatibleRow.ItemArray = New Object() {IDAdverse, parentLigneDeFeuxRowByLigneDeFeux_Incompatible(9)}
            Me.Rows.Add(rowIncompatibleRow)
            Return rowIncompatibleRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As IncompatibleDataTable = CType(MyBase.Clone, IncompatibleDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New IncompatibleDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnIDAdverse = MyBase.Columns("IDAdverse")
            Me.columnLigneDeFeux_Id = MyBase.Columns("LigneDeFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnIDAdverse = New System.Data.DataColumn("IDAdverse", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIDAdverse)
            Me.columnLigneDeFeux_Id = New System.Data.DataColumn("LigneDeFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLigneDeFeux_Id)
            Me.columnIDAdverse.AllowDBNull = False
            Me.columnIDAdverse.Namespace = ""
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewIncompatibleRow() As IncompatibleRow
            Return CType(Me.NewRow, IncompatibleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New IncompatibleRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IncompatibleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IncompatibleRowChangedEvent) Is Nothing) Then
                RaiseEvent IncompatibleRowChanged(Me, New IncompatibleRowChangeEvent(CType(e.Row, IncompatibleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IncompatibleRowChangingEvent) Is Nothing) Then
                RaiseEvent IncompatibleRowChanging(Me, New IncompatibleRowChangeEvent(CType(e.Row, IncompatibleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IncompatibleRowDeletedEvent) Is Nothing) Then
                RaiseEvent IncompatibleRowDeleted(Me, New IncompatibleRowChangeEvent(CType(e.Row, IncompatibleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IncompatibleRowDeletingEvent) Is Nothing) Then
                RaiseEvent IncompatibleRowDeleting(Me, New IncompatibleRowChangeEvent(CType(e.Row, IncompatibleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveIncompatibleRow(ByVal row As IncompatibleRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IncompatibleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TrajectoireDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnIDLigneDeFeux As System.Data.DataColumn

        Private columnTrajectoire_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Trajectoire"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDLigneDeFeuxColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDLigneDeFeux
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trajectoire_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTrajectoire_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TrajectoireRow
            Get
                Return CType(Me.Rows(index), TrajectoireRow)
            End Get
        End Property

        Public Event TrajectoireRowChanging As TrajectoireRowChangeEventHandler

        Public Event TrajectoireRowChanged As TrajectoireRowChangeEventHandler

        Public Event TrajectoireRowDeleting As TrajectoireRowChangeEventHandler

        Public Event TrajectoireRowDeleted As TrajectoireRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTrajectoireRow(ByVal row As TrajectoireRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTrajectoireRow(ByVal IDLigneDeFeux As String, ByVal parentVarianteRowByVariante_Trajectoire As VarianteRow) As TrajectoireRow
            Dim rowTrajectoireRow As TrajectoireRow = CType(Me.NewRow, TrajectoireRow)
            rowTrajectoireRow.ItemArray = New Object() {IDLigneDeFeux, Nothing, parentVarianteRowByVariante_Trajectoire(5)}
            Me.Rows.Add(rowTrajectoireRow)
            Return rowTrajectoireRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TrajectoireDataTable = CType(MyBase.Clone, TrajectoireDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TrajectoireDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnIDLigneDeFeux = MyBase.Columns("IDLigneDeFeux")
            Me.columnTrajectoire_Id = MyBase.Columns("Trajectoire_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnIDLigneDeFeux = New System.Data.DataColumn("IDLigneDeFeux", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIDLigneDeFeux)
            Me.columnTrajectoire_Id = New System.Data.DataColumn("Trajectoire_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTrajectoire_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTrajectoire_Id}, True))
            Me.columnIDLigneDeFeux.Namespace = ""
            Me.columnTrajectoire_Id.AutoIncrement = True
            Me.columnTrajectoire_Id.AllowDBNull = False
            Me.columnTrajectoire_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTrajectoireRow() As TrajectoireRow
            Return CType(Me.NewRow, TrajectoireRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TrajectoireRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TrajectoireRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TrajectoireRowChangedEvent) Is Nothing) Then
                RaiseEvent TrajectoireRowChanged(Me, New TrajectoireRowChangeEvent(CType(e.Row, TrajectoireRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TrajectoireRowChangingEvent) Is Nothing) Then
                RaiseEvent TrajectoireRowChanging(Me, New TrajectoireRowChangeEvent(CType(e.Row, TrajectoireRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TrajectoireRowDeletedEvent) Is Nothing) Then
                RaiseEvent TrajectoireRowDeleted(Me, New TrajectoireRowChangeEvent(CType(e.Row, TrajectoireRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TrajectoireRowDeletingEvent) Is Nothing) Then
                RaiseEvent TrajectoireRowDeleting(Me, New TrajectoireRowChangeEvent(CType(e.Row, TrajectoireRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTrajectoireRow(ByVal row As TrajectoireRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TrajectoireDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PiétonsDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnIDP1 As System.Data.DataColumn

        Private columnIDP2 As System.Data.DataColumn

        Private columnTrajectoire_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Piétons"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDP1Column() As System.Data.DataColumn
            Get
                Return Me.columnIDP1
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDP2Column() As System.Data.DataColumn
            Get
                Return Me.columnIDP2
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trajectoire_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTrajectoire_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PiétonsRow
            Get
                Return CType(Me.Rows(index), PiétonsRow)
            End Get
        End Property

        Public Event PiétonsRowChanging As PiétonsRowChangeEventHandler

        Public Event PiétonsRowChanged As PiétonsRowChangeEventHandler

        Public Event PiétonsRowDeleting As PiétonsRowChangeEventHandler

        Public Event PiétonsRowDeleted As PiétonsRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPiétonsRow(ByVal row As PiétonsRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPiétonsRow(ByVal IDP1 As Short, ByVal IDP2 As Short, ByVal parentTrajectoireRowByTrajectoire_Piétons As TrajectoireRow) As PiétonsRow
            Dim rowPiétonsRow As PiétonsRow = CType(Me.NewRow, PiétonsRow)
            rowPiétonsRow.ItemArray = New Object() {IDP1, IDP2, parentTrajectoireRowByTrajectoire_Piétons(1)}
            Me.Rows.Add(rowPiétonsRow)
            Return rowPiétonsRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PiétonsDataTable = CType(MyBase.Clone, PiétonsDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PiétonsDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnIDP1 = MyBase.Columns("IDP1")
            Me.columnIDP2 = MyBase.Columns("IDP2")
            Me.columnTrajectoire_Id = MyBase.Columns("Trajectoire_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnIDP1 = New System.Data.DataColumn("IDP1", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDP1)
            Me.columnIDP2 = New System.Data.DataColumn("IDP2", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIDP2)
            Me.columnTrajectoire_Id = New System.Data.DataColumn("Trajectoire_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTrajectoire_Id)
            Me.columnIDP1.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPiétonsRow() As PiétonsRow
            Return CType(Me.NewRow, PiétonsRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PiétonsRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PiétonsRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PiétonsRowChangedEvent) Is Nothing) Then
                RaiseEvent PiétonsRowChanged(Me, New PiétonsRowChangeEvent(CType(e.Row, PiétonsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PiétonsRowChangingEvent) Is Nothing) Then
                RaiseEvent PiétonsRowChanging(Me, New PiétonsRowChangeEvent(CType(e.Row, PiétonsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PiétonsRowDeletedEvent) Is Nothing) Then
                RaiseEvent PiétonsRowDeleted(Me, New PiétonsRowChangeEvent(CType(e.Row, PiétonsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PiétonsRowDeletingEvent) Is Nothing) Then
                RaiseEvent PiétonsRowDeleting(Me, New PiétonsRowChangeEvent(CType(e.Row, PiétonsRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePiétonsRow(ByVal row As PiétonsRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PiétonsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class VéhiculesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnVoieOrigine As System.Data.DataColumn

        Private columnVoieDestination As System.Data.DataColumn

        Private columnTypeCourant As System.Data.DataColumn

        Private columnNatureCourant As System.Data.DataColumn

        Private columnCoefGene As System.Data.DataColumn

        Private columnVéhicules_Id As System.Data.DataColumn

        Private columnTrajectoire_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Véhicules"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VoieOrigineColumn() As System.Data.DataColumn
            Get
                Return Me.columnVoieOrigine
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VoieDestinationColumn() As System.Data.DataColumn
            Get
                Return Me.columnVoieDestination
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeCourantColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeCourant
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NatureCourantColumn() As System.Data.DataColumn
            Get
                Return Me.columnNatureCourant
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CoefGeneColumn() As System.Data.DataColumn
            Get
                Return Me.columnCoefGene
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Véhicules_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVéhicules_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trajectoire_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTrajectoire_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As VéhiculesRow
            Get
                Return CType(Me.Rows(index), VéhiculesRow)
            End Get
        End Property

        Public Event VéhiculesRowChanging As VéhiculesRowChangeEventHandler

        Public Event VéhiculesRowChanged As VéhiculesRowChangeEventHandler

        Public Event VéhiculesRowDeleting As VéhiculesRowChangeEventHandler

        Public Event VéhiculesRowDeleted As VéhiculesRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddVéhiculesRow(ByVal row As VéhiculesRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddVéhiculesRow(ByVal VoieOrigine As Short, ByVal VoieDestination As Short, ByVal TypeCourant As String, ByVal NatureCourant As String, ByVal CoefGene As Single, ByVal parentTrajectoireRowByTrajectoire_Véhicules As TrajectoireRow) As VéhiculesRow
            Dim rowVéhiculesRow As VéhiculesRow = CType(Me.NewRow, VéhiculesRow)
            rowVéhiculesRow.ItemArray = New Object() {VoieOrigine, VoieDestination, TypeCourant, NatureCourant, CoefGene, Nothing, parentTrajectoireRowByTrajectoire_Véhicules(1)}
            Me.Rows.Add(rowVéhiculesRow)
            Return rowVéhiculesRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As VéhiculesDataTable = CType(MyBase.Clone, VéhiculesDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New VéhiculesDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnVoieOrigine = MyBase.Columns("VoieOrigine")
            Me.columnVoieDestination = MyBase.Columns("VoieDestination")
            Me.columnTypeCourant = MyBase.Columns("TypeCourant")
            Me.columnNatureCourant = MyBase.Columns("NatureCourant")
            Me.columnCoefGene = MyBase.Columns("CoefGene")
            Me.columnVéhicules_Id = MyBase.Columns("Véhicules_Id")
            Me.columnTrajectoire_Id = MyBase.Columns("Trajectoire_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnVoieOrigine = New System.Data.DataColumn("VoieOrigine", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoieOrigine)
            Me.columnVoieDestination = New System.Data.DataColumn("VoieDestination", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVoieDestination)
            Me.columnTypeCourant = New System.Data.DataColumn("TypeCourant", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeCourant)
            Me.columnNatureCourant = New System.Data.DataColumn("NatureCourant", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNatureCourant)
            Me.columnCoefGene = New System.Data.DataColumn("CoefGene", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoefGene)
            Me.columnVéhicules_Id = New System.Data.DataColumn("Véhicules_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVéhicules_Id)
            Me.columnTrajectoire_Id = New System.Data.DataColumn("Trajectoire_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTrajectoire_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnVéhicules_Id}, True))
            Me.columnVoieOrigine.AllowDBNull = False
            Me.columnVoieDestination.AllowDBNull = False
            Me.columnTypeCourant.AllowDBNull = False
            Me.columnNatureCourant.AllowDBNull = False
            Me.columnCoefGene.AllowDBNull = False
            Me.columnVéhicules_Id.AutoIncrement = True
            Me.columnVéhicules_Id.AllowDBNull = False
            Me.columnVéhicules_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewVéhiculesRow() As VéhiculesRow
            Return CType(Me.NewRow, VéhiculesRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New VéhiculesRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(VéhiculesRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.VéhiculesRowChangedEvent) Is Nothing) Then
                RaiseEvent VéhiculesRowChanged(Me, New VéhiculesRowChangeEvent(CType(e.Row, VéhiculesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.VéhiculesRowChangingEvent) Is Nothing) Then
                RaiseEvent VéhiculesRowChanging(Me, New VéhiculesRowChangeEvent(CType(e.Row, VéhiculesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.VéhiculesRowDeletedEvent) Is Nothing) Then
                RaiseEvent VéhiculesRowDeleted(Me, New VéhiculesRowChangeEvent(CType(e.Row, VéhiculesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.VéhiculesRowDeletingEvent) Is Nothing) Then
                RaiseEvent VéhiculesRowDeleting(Me, New VéhiculesRowChangeEvent(CType(e.Row, VéhiculesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveVéhiculesRow(ByVal row As VéhiculesRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "VéhiculesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PointManuelDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnVéhicules_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "PointManuel"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Véhicules_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVéhicules_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PointManuelRow
            Get
                Return CType(Me.Rows(index), PointManuelRow)
            End Get
        End Property

        Public Event PointManuelRowChanging As PointManuelRowChangeEventHandler

        Public Event PointManuelRowChanged As PointManuelRowChangeEventHandler

        Public Event PointManuelRowDeleting As PointManuelRowChangeEventHandler

        Public Event PointManuelRowDeleted As PointManuelRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPointManuelRow(ByVal row As PointManuelRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPointManuelRow(ByVal X As Single, ByVal Y As Single, ByVal parentVéhiculesRowByVéhicules_PointManuel As VéhiculesRow) As PointManuelRow
            Dim rowPointManuelRow As PointManuelRow = CType(Me.NewRow, PointManuelRow)
            rowPointManuelRow.ItemArray = New Object() {X, Y, parentVéhiculesRowByVéhicules_PointManuel(5)}
            Me.Rows.Add(rowPointManuelRow)
            Return rowPointManuelRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PointManuelDataTable = CType(MyBase.Clone, PointManuelDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PointManuelDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnVéhicules_Id = MyBase.Columns("Véhicules_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnVéhicules_Id = New System.Data.DataColumn("Véhicules_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVéhicules_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPointManuelRow() As PointManuelRow
            Return CType(Me.NewRow, PointManuelRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PointManuelRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PointManuelRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PointManuelRowChangedEvent) Is Nothing) Then
                RaiseEvent PointManuelRowChanged(Me, New PointManuelRowChangeEvent(CType(e.Row, PointManuelRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PointManuelRowChangingEvent) Is Nothing) Then
                RaiseEvent PointManuelRowChanging(Me, New PointManuelRowChangeEvent(CType(e.Row, PointManuelRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PointManuelRowDeletedEvent) Is Nothing) Then
                RaiseEvent PointManuelRowDeleted(Me, New PointManuelRowChangeEvent(CType(e.Row, PointManuelRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PointManuelRowDeletingEvent) Is Nothing) Then
                RaiseEvent PointManuelRowDeleting(Me, New PointManuelRowChangeEvent(CType(e.Row, PointManuelRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePointManuelRow(ByVal row As PointManuelRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PointManuelDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class AntagonismeDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnTrajectoire1 As System.Data.DataColumn

        Private columnTrajectoire2 As System.Data.DataColumn

        Private columnTypeConflit As System.Data.DataColumn

        Private columnAntagonisme_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Antagonisme"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trajectoire1Column() As System.Data.DataColumn
            Get
                Return Me.columnTrajectoire1
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trajectoire2Column() As System.Data.DataColumn
            Get
                Return Me.columnTrajectoire2
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeConflitColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeConflit
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Antagonisme_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnAntagonisme_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As AntagonismeRow
            Get
                Return CType(Me.Rows(index), AntagonismeRow)
            End Get
        End Property

        Public Event AntagonismeRowChanging As AntagonismeRowChangeEventHandler

        Public Event AntagonismeRowChanged As AntagonismeRowChangeEventHandler

        Public Event AntagonismeRowDeleting As AntagonismeRowChangeEventHandler

        Public Event AntagonismeRowDeleted As AntagonismeRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddAntagonismeRow(ByVal row As AntagonismeRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddAntagonismeRow(ByVal Trajectoire1 As Short, ByVal Trajectoire2 As Short, ByVal TypeConflit As Short, ByVal parentVarianteRowByVariante_Antagonisme As VarianteRow) As AntagonismeRow
            Dim rowAntagonismeRow As AntagonismeRow = CType(Me.NewRow, AntagonismeRow)
            rowAntagonismeRow.ItemArray = New Object() {Trajectoire1, Trajectoire2, TypeConflit, Nothing, parentVarianteRowByVariante_Antagonisme(5)}
            Me.Rows.Add(rowAntagonismeRow)
            Return rowAntagonismeRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As AntagonismeDataTable = CType(MyBase.Clone, AntagonismeDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New AntagonismeDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTrajectoire1 = MyBase.Columns("Trajectoire1")
            Me.columnTrajectoire2 = MyBase.Columns("Trajectoire2")
            Me.columnTypeConflit = MyBase.Columns("TypeConflit")
            Me.columnAntagonisme_Id = MyBase.Columns("Antagonisme_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTrajectoire1 = New System.Data.DataColumn("Trajectoire1", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrajectoire1)
            Me.columnTrajectoire2 = New System.Data.DataColumn("Trajectoire2", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrajectoire2)
            Me.columnTypeConflit = New System.Data.DataColumn("TypeConflit", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeConflit)
            Me.columnAntagonisme_Id = New System.Data.DataColumn("Antagonisme_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnAntagonisme_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnAntagonisme_Id}, True))
            Me.columnTrajectoire1.AllowDBNull = False
            Me.columnTrajectoire2.AllowDBNull = False
            Me.columnTypeConflit.AllowDBNull = False
            Me.columnAntagonisme_Id.AutoIncrement = True
            Me.columnAntagonisme_Id.AllowDBNull = False
            Me.columnAntagonisme_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewAntagonismeRow() As AntagonismeRow
            Return CType(Me.NewRow, AntagonismeRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New AntagonismeRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(AntagonismeRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.AntagonismeRowChangedEvent) Is Nothing) Then
                RaiseEvent AntagonismeRowChanged(Me, New AntagonismeRowChangeEvent(CType(e.Row, AntagonismeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.AntagonismeRowChangingEvent) Is Nothing) Then
                RaiseEvent AntagonismeRowChanging(Me, New AntagonismeRowChangeEvent(CType(e.Row, AntagonismeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.AntagonismeRowDeletedEvent) Is Nothing) Then
                RaiseEvent AntagonismeRowDeleted(Me, New AntagonismeRowChangeEvent(CType(e.Row, AntagonismeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.AntagonismeRowDeletingEvent) Is Nothing) Then
                RaiseEvent AntagonismeRowDeleting(Me, New AntagonismeRowChangeEvent(CType(e.Row, AntagonismeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveAntagonismeRow(ByVal row As AntagonismeRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "AntagonismeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class pAntagoDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnAntagonisme_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "pAntago"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Antagonisme_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnAntagonisme_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As pAntagoRow
            Get
                Return CType(Me.Rows(index), pAntagoRow)
            End Get
        End Property

        Public Event pAntagoRowChanging As pAntagoRowChangeEventHandler

        Public Event pAntagoRowChanged As pAntagoRowChangeEventHandler

        Public Event pAntagoRowDeleting As pAntagoRowChangeEventHandler

        Public Event pAntagoRowDeleted As pAntagoRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddpAntagoRow(ByVal row As pAntagoRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddpAntagoRow(ByVal X As Single, ByVal Y As Single, ByVal parentAntagonismeRowByAntagonisme_pAntago As AntagonismeRow) As pAntagoRow
            Dim rowpAntagoRow As pAntagoRow = CType(Me.NewRow, pAntagoRow)
            rowpAntagoRow.ItemArray = New Object() {X, Y, parentAntagonismeRowByAntagonisme_pAntago(3)}
            Me.Rows.Add(rowpAntagoRow)
            Return rowpAntagoRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pAntagoDataTable = CType(MyBase.Clone, pAntagoDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pAntagoDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnAntagonisme_Id = MyBase.Columns("Antagonisme_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnAntagonisme_Id = New System.Data.DataColumn("Antagonisme_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnAntagonisme_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewpAntagoRow() As pAntagoRow
            Return CType(Me.NewRow, pAntagoRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pAntagoRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pAntagoRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pAntagoRowChangedEvent) Is Nothing) Then
                RaiseEvent pAntagoRowChanged(Me, New pAntagoRowChangeEvent(CType(e.Row, pAntagoRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pAntagoRowChangingEvent) Is Nothing) Then
                RaiseEvent pAntagoRowChanging(Me, New pAntagoRowChangeEvent(CType(e.Row, pAntagoRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pAntagoRowDeletedEvent) Is Nothing) Then
                RaiseEvent pAntagoRowDeleted(Me, New pAntagoRowChangeEvent(CType(e.Row, pAntagoRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pAntagoRowDeletingEvent) Is Nothing) Then
                RaiseEvent pAntagoRowDeleting(Me, New pAntagoRowChangeEvent(CType(e.Row, pAntagoRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovepAntagoRow(ByVal row As pAntagoRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pAntagoDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PlanFeuxDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnID As System.Data.DataColumn

        Private columnIDTrafic As System.Data.DataColumn

        Private columnDéfinitif As System.Data.DataColumn

        Private columnNomFonctionnement As System.Data.DataColumn

        Private columnVerrouPlan As System.Data.DataColumn

        Private columnVertMiniVéhiculesPlan As System.Data.DataColumn

        Private columnVertMiniPiétonsPlan As System.Data.DataColumn

        Private columnPlanFeux_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "PlanFeux"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDColumn() As System.Data.DataColumn
            Get
                Return Me.columnID
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDTraficColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDTrafic
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DéfinitifColumn() As System.Data.DataColumn
            Get
                Return Me.columnDéfinitif
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomFonctionnementColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomFonctionnement
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VerrouPlanColumn() As System.Data.DataColumn
            Get
                Return Me.columnVerrouPlan
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VertMiniVéhiculesPlanColumn() As System.Data.DataColumn
            Get
                Return Me.columnVertMiniVéhiculesPlan
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VertMiniPiétonsPlanColumn() As System.Data.DataColumn
            Get
                Return Me.columnVertMiniPiétonsPlan
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PlanFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlanFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PlanFeuxRow
            Get
                Return CType(Me.Rows(index), PlanFeuxRow)
            End Get
        End Property

        Public Event PlanFeuxRowChanging As PlanFeuxRowChangeEventHandler

        Public Event PlanFeuxRowChanged As PlanFeuxRowChangeEventHandler

        Public Event PlanFeuxRowDeleting As PlanFeuxRowChangeEventHandler

        Public Event PlanFeuxRowDeleted As PlanFeuxRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPlanFeuxRow(ByVal row As PlanFeuxRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPlanFeuxRow(ByVal ID As String, ByVal IDTrafic As Short, ByVal Définitif As Boolean, ByVal NomFonctionnement As String, ByVal VerrouPlan As Short, ByVal VertMiniVéhiculesPlan As Short, ByVal VertMiniPiétonsPlan As Short, ByVal parentVarianteRowByVariante_PlanFeux As VarianteRow) As PlanFeuxRow
            Dim rowPlanFeuxRow As PlanFeuxRow = CType(Me.NewRow, PlanFeuxRow)
            rowPlanFeuxRow.ItemArray = New Object() {ID, IDTrafic, Définitif, NomFonctionnement, VerrouPlan, VertMiniVéhiculesPlan, VertMiniPiétonsPlan, Nothing, parentVarianteRowByVariante_PlanFeux(5)}
            Me.Rows.Add(rowPlanFeuxRow)
            Return rowPlanFeuxRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PlanFeuxDataTable = CType(MyBase.Clone, PlanFeuxDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PlanFeuxDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnID = MyBase.Columns("ID")
            Me.columnIDTrafic = MyBase.Columns("IDTrafic")
            Me.columnDéfinitif = MyBase.Columns("Définitif")
            Me.columnNomFonctionnement = MyBase.Columns("NomFonctionnement")
            Me.columnVerrouPlan = MyBase.Columns("VerrouPlan")
            Me.columnVertMiniVéhiculesPlan = MyBase.Columns("VertMiniVéhiculesPlan")
            Me.columnVertMiniPiétonsPlan = MyBase.Columns("VertMiniPiétonsPlan")
            Me.columnPlanFeux_Id = MyBase.Columns("PlanFeux_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnID = New System.Data.DataColumn("ID", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnID)
            Me.columnIDTrafic = New System.Data.DataColumn("IDTrafic", GetType(Short), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIDTrafic)
            Me.columnDéfinitif = New System.Data.DataColumn("Définitif", GetType(Boolean), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnDéfinitif)
            Me.columnNomFonctionnement = New System.Data.DataColumn("NomFonctionnement", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomFonctionnement)
            Me.columnVerrouPlan = New System.Data.DataColumn("VerrouPlan", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerrouPlan)
            Me.columnVertMiniVéhiculesPlan = New System.Data.DataColumn("VertMiniVéhiculesPlan", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVertMiniVéhiculesPlan)
            Me.columnVertMiniPiétonsPlan = New System.Data.DataColumn("VertMiniPiétonsPlan", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVertMiniPiétonsPlan)
            Me.columnPlanFeux_Id = New System.Data.DataColumn("PlanFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPlanFeux_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPlanFeux_Id}, True))
            Me.columnID.Namespace = ""
            Me.columnIDTrafic.Namespace = ""
            Me.columnDéfinitif.Namespace = ""
            Me.columnPlanFeux_Id.AutoIncrement = True
            Me.columnPlanFeux_Id.AllowDBNull = False
            Me.columnPlanFeux_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPlanFeuxRow() As PlanFeuxRow
            Return CType(Me.NewRow, PlanFeuxRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PlanFeuxRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PlanFeuxRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PlanFeuxRowChangedEvent) Is Nothing) Then
                RaiseEvent PlanFeuxRowChanged(Me, New PlanFeuxRowChangeEvent(CType(e.Row, PlanFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PlanFeuxRowChangingEvent) Is Nothing) Then
                RaiseEvent PlanFeuxRowChanging(Me, New PlanFeuxRowChangeEvent(CType(e.Row, PlanFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PlanFeuxRowDeletedEvent) Is Nothing) Then
                RaiseEvent PlanFeuxRowDeleted(Me, New PlanFeuxRowChangeEvent(CType(e.Row, PlanFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PlanFeuxRowDeletingEvent) Is Nothing) Then
                RaiseEvent PlanFeuxRowDeleting(Me, New PlanFeuxRowChangeEvent(CType(e.Row, PlanFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePlanFeuxRow(ByVal row As PlanFeuxRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PlanFeuxDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PhaseDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnDurée As System.Data.DataColumn

        Private columnVerrouillée As System.Data.DataColumn

        Private columnPhase_Id As System.Data.DataColumn

        Private columnPlanFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Phase"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DuréeColumn() As System.Data.DataColumn
            Get
                Return Me.columnDurée
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VerrouilléeColumn() As System.Data.DataColumn
            Get
                Return Me.columnVerrouillée
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Phase_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhase_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PlanFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlanFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PhaseRow
            Get
                Return CType(Me.Rows(index), PhaseRow)
            End Get
        End Property

        Public Event PhaseRowChanging As PhaseRowChangeEventHandler

        Public Event PhaseRowChanged As PhaseRowChangeEventHandler

        Public Event PhaseRowDeleting As PhaseRowChangeEventHandler

        Public Event PhaseRowDeleted As PhaseRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPhaseRow(ByVal row As PhaseRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPhaseRow(ByVal Durée As Short, ByVal Verrouillée As Boolean, ByVal parentPlanFeuxRowByPlanFeux_Phase As PlanFeuxRow) As PhaseRow
            Dim rowPhaseRow As PhaseRow = CType(Me.NewRow, PhaseRow)
            rowPhaseRow.ItemArray = New Object() {Durée, Verrouillée, Nothing, parentPlanFeuxRowByPlanFeux_Phase(7)}
            Me.Rows.Add(rowPhaseRow)
            Return rowPhaseRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PhaseDataTable = CType(MyBase.Clone, PhaseDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PhaseDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnDurée = MyBase.Columns("Durée")
            Me.columnVerrouillée = MyBase.Columns("Verrouillée")
            Me.columnPhase_Id = MyBase.Columns("Phase_Id")
            Me.columnPlanFeux_Id = MyBase.Columns("PlanFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnDurée = New System.Data.DataColumn("Durée", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDurée)
            Me.columnVerrouillée = New System.Data.DataColumn("Verrouillée", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVerrouillée)
            Me.columnPhase_Id = New System.Data.DataColumn("Phase_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPhase_Id)
            Me.columnPlanFeux_Id = New System.Data.DataColumn("PlanFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPlanFeux_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPhase_Id}, True))
            Me.columnDurée.AllowDBNull = False
            Me.columnDurée.DefaultValue = CType(60, Short)
            Me.columnPhase_Id.AutoIncrement = True
            Me.columnPhase_Id.AllowDBNull = False
            Me.columnPhase_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPhaseRow() As PhaseRow
            Return CType(Me.NewRow, PhaseRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PhaseRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PhaseRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PhaseRowChangedEvent) Is Nothing) Then
                RaiseEvent PhaseRowChanged(Me, New PhaseRowChangeEvent(CType(e.Row, PhaseRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PhaseRowChangingEvent) Is Nothing) Then
                RaiseEvent PhaseRowChanging(Me, New PhaseRowChangeEvent(CType(e.Row, PhaseRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PhaseRowDeletedEvent) Is Nothing) Then
                RaiseEvent PhaseRowDeleted(Me, New PhaseRowChangeEvent(CType(e.Row, PhaseRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PhaseRowDeletingEvent) Is Nothing) Then
                RaiseEvent PhaseRowDeleting(Me, New PhaseRowChangeEvent(CType(e.Row, PhaseRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePhaseRow(ByVal row As PhaseRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PhaseDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class IDLigneFeuxDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnDécalageOuvre As System.Data.DataColumn

        Private columnDécalageFerme As System.Data.DataColumn

        Private columnIDLigneFeux_text As System.Data.DataColumn

        Private columnPhase_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "IDLigneFeux"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DécalageOuvreColumn() As System.Data.DataColumn
            Get
                Return Me.columnDécalageOuvre
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DécalageFermeColumn() As System.Data.DataColumn
            Get
                Return Me.columnDécalageFerme
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDLigneFeux_textColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDLigneFeux_text
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Phase_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPhase_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As IDLigneFeuxRow
            Get
                Return CType(Me.Rows(index), IDLigneFeuxRow)
            End Get
        End Property

        Public Event IDLigneFeuxRowChanging As IDLigneFeuxRowChangeEventHandler

        Public Event IDLigneFeuxRowChanged As IDLigneFeuxRowChangeEventHandler

        Public Event IDLigneFeuxRowDeleting As IDLigneFeuxRowChangeEventHandler

        Public Event IDLigneFeuxRowDeleted As IDLigneFeuxRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddIDLigneFeuxRow(ByVal row As IDLigneFeuxRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddIDLigneFeuxRow(ByVal DécalageOuvre As Short, ByVal DécalageFerme As Short, ByVal IDLigneFeux_text As String, ByVal parentPhaseRowByPhase_IDLigneFeux As PhaseRow) As IDLigneFeuxRow
            Dim rowIDLigneFeuxRow As IDLigneFeuxRow = CType(Me.NewRow, IDLigneFeuxRow)
            rowIDLigneFeuxRow.ItemArray = New Object() {DécalageOuvre, DécalageFerme, IDLigneFeux_text, parentPhaseRowByPhase_IDLigneFeux(2)}
            Me.Rows.Add(rowIDLigneFeuxRow)
            Return rowIDLigneFeuxRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As IDLigneFeuxDataTable = CType(MyBase.Clone, IDLigneFeuxDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New IDLigneFeuxDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnDécalageOuvre = MyBase.Columns("DécalageOuvre")
            Me.columnDécalageFerme = MyBase.Columns("DécalageFerme")
            Me.columnIDLigneFeux_text = MyBase.Columns("IDLigneFeux_text")
            Me.columnPhase_Id = MyBase.Columns("Phase_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnDécalageOuvre = New System.Data.DataColumn("DécalageOuvre", GetType(Short), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnDécalageOuvre)
            Me.columnDécalageFerme = New System.Data.DataColumn("DécalageFerme", GetType(Short), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnDécalageFerme)
            Me.columnIDLigneFeux_text = New System.Data.DataColumn("IDLigneFeux_text", GetType(String), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnIDLigneFeux_text)
            Me.columnPhase_Id = New System.Data.DataColumn("Phase_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPhase_Id)
            Me.columnDécalageOuvre.Namespace = ""
            Me.columnDécalageFerme.Namespace = ""
            Me.columnIDLigneFeux_text.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewIDLigneFeuxRow() As IDLigneFeuxRow
            Return CType(Me.NewRow, IDLigneFeuxRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New IDLigneFeuxRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IDLigneFeuxRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IDLigneFeuxRowChangedEvent) Is Nothing) Then
                RaiseEvent IDLigneFeuxRowChanged(Me, New IDLigneFeuxRowChangeEvent(CType(e.Row, IDLigneFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IDLigneFeuxRowChangingEvent) Is Nothing) Then
                RaiseEvent IDLigneFeuxRowChanging(Me, New IDLigneFeuxRowChangeEvent(CType(e.Row, IDLigneFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IDLigneFeuxRowDeletedEvent) Is Nothing) Then
                RaiseEvent IDLigneFeuxRowDeleted(Me, New IDLigneFeuxRowChangeEvent(CType(e.Row, IDLigneFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IDLigneFeuxRowDeletingEvent) Is Nothing) Then
                RaiseEvent IDLigneFeuxRowDeleting(Me, New IDLigneFeuxRowChangeEvent(CType(e.Row, IDLigneFeuxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveIDLigneFeuxRow(ByVal row As IDLigneFeuxRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IDLigneFeuxDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class IDLigneFeuxComposéDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnIDLigneFeuxComposé_Column As System.Data.DataColumn

        Private columnPlanFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "IDLigneFeuxComposé"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IDLigneFeuxComposé_ColumnColumn() As System.Data.DataColumn
            Get
                Return Me.columnIDLigneFeuxComposé_Column
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PlanFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlanFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As IDLigneFeuxComposéRow
            Get
                Return CType(Me.Rows(index), IDLigneFeuxComposéRow)
            End Get
        End Property

        Public Event IDLigneFeuxComposéRowChanging As IDLigneFeuxComposéRowChangeEventHandler

        Public Event IDLigneFeuxComposéRowChanged As IDLigneFeuxComposéRowChangeEventHandler

        Public Event IDLigneFeuxComposéRowDeleting As IDLigneFeuxComposéRowChangeEventHandler

        Public Event IDLigneFeuxComposéRowDeleted As IDLigneFeuxComposéRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddIDLigneFeuxComposéRow(ByVal row As IDLigneFeuxComposéRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddIDLigneFeuxComposéRow(ByVal IDLigneFeuxComposé_Column As String, ByVal parentPlanFeuxRowByPlanFeux_IDLigneFeuxComposé As PlanFeuxRow) As IDLigneFeuxComposéRow
            Dim rowIDLigneFeuxComposéRow As IDLigneFeuxComposéRow = CType(Me.NewRow, IDLigneFeuxComposéRow)
            rowIDLigneFeuxComposéRow.ItemArray = New Object() {IDLigneFeuxComposé_Column, parentPlanFeuxRowByPlanFeux_IDLigneFeuxComposé(7)}
            Me.Rows.Add(rowIDLigneFeuxComposéRow)
            Return rowIDLigneFeuxComposéRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As IDLigneFeuxComposéDataTable = CType(MyBase.Clone, IDLigneFeuxComposéDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New IDLigneFeuxComposéDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnIDLigneFeuxComposé_Column = MyBase.Columns("IDLigneFeuxComposé_Column")
            Me.columnPlanFeux_Id = MyBase.Columns("PlanFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnIDLigneFeuxComposé_Column = New System.Data.DataColumn("IDLigneFeuxComposé_Column", GetType(String), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnIDLigneFeuxComposé_Column)
            Me.columnPlanFeux_Id = New System.Data.DataColumn("PlanFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPlanFeux_Id)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewIDLigneFeuxComposéRow() As IDLigneFeuxComposéRow
            Return CType(Me.NewRow, IDLigneFeuxComposéRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New IDLigneFeuxComposéRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IDLigneFeuxComposéRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IDLigneFeuxComposéRowChangedEvent) Is Nothing) Then
                RaiseEvent IDLigneFeuxComposéRowChanged(Me, New IDLigneFeuxComposéRowChangeEvent(CType(e.Row, IDLigneFeuxComposéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IDLigneFeuxComposéRowChangingEvent) Is Nothing) Then
                RaiseEvent IDLigneFeuxComposéRowChanging(Me, New IDLigneFeuxComposéRowChangeEvent(CType(e.Row, IDLigneFeuxComposéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IDLigneFeuxComposéRowDeletedEvent) Is Nothing) Then
                RaiseEvent IDLigneFeuxComposéRowDeleted(Me, New IDLigneFeuxComposéRowChangeEvent(CType(e.Row, IDLigneFeuxComposéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IDLigneFeuxComposéRowDeletingEvent) Is Nothing) Then
                RaiseEvent IDLigneFeuxComposéRowDeleting(Me, New IDLigneFeuxComposéRowChangeEvent(CType(e.Row, IDLigneFeuxComposéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveIDLigneFeuxComposéRow(ByVal row As IDLigneFeuxComposéRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IDLigneFeuxComposéDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class OrdreLignesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnOrdreLignes_Column As System.Data.DataColumn

        Private columnPlanFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "OrdreLignes"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property OrdreLignes_ColumnColumn() As System.Data.DataColumn
            Get
                Return Me.columnOrdreLignes_Column
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PlanFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlanFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As OrdreLignesRow
            Get
                Return CType(Me.Rows(index), OrdreLignesRow)
            End Get
        End Property

        Public Event OrdreLignesRowChanging As OrdreLignesRowChangeEventHandler

        Public Event OrdreLignesRowChanged As OrdreLignesRowChangeEventHandler

        Public Event OrdreLignesRowDeleting As OrdreLignesRowChangeEventHandler

        Public Event OrdreLignesRowDeleted As OrdreLignesRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddOrdreLignesRow(ByVal row As OrdreLignesRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddOrdreLignesRow(ByVal OrdreLignes_Column As String, ByVal parentPlanFeuxRowByPlanFeux_OrdreLignes As PlanFeuxRow) As OrdreLignesRow
            Dim rowOrdreLignesRow As OrdreLignesRow = CType(Me.NewRow, OrdreLignesRow)
            rowOrdreLignesRow.ItemArray = New Object() {OrdreLignes_Column, parentPlanFeuxRowByPlanFeux_OrdreLignes(7)}
            Me.Rows.Add(rowOrdreLignesRow)
            Return rowOrdreLignesRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As OrdreLignesDataTable = CType(MyBase.Clone, OrdreLignesDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New OrdreLignesDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnOrdreLignes_Column = MyBase.Columns("OrdreLignes_Column")
            Me.columnPlanFeux_Id = MyBase.Columns("PlanFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnOrdreLignes_Column = New System.Data.DataColumn("OrdreLignes_Column", GetType(String), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnOrdreLignes_Column)
            Me.columnPlanFeux_Id = New System.Data.DataColumn("PlanFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPlanFeux_Id)
            Me.columnOrdreLignes_Column.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewOrdreLignesRow() As OrdreLignesRow
            Return CType(Me.NewRow, OrdreLignesRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New OrdreLignesRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(OrdreLignesRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.OrdreLignesRowChangedEvent) Is Nothing) Then
                RaiseEvent OrdreLignesRowChanged(Me, New OrdreLignesRowChangeEvent(CType(e.Row, OrdreLignesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.OrdreLignesRowChangingEvent) Is Nothing) Then
                RaiseEvent OrdreLignesRowChanging(Me, New OrdreLignesRowChangeEvent(CType(e.Row, OrdreLignesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.OrdreLignesRowDeletedEvent) Is Nothing) Then
                RaiseEvent OrdreLignesRowDeleted(Me, New OrdreLignesRowChangeEvent(CType(e.Row, OrdreLignesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.OrdreLignesRowDeletingEvent) Is Nothing) Then
                RaiseEvent OrdreLignesRowDeleting(Me, New OrdreLignesRowChangeEvent(CType(e.Row, OrdreLignesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveOrdreLignesRow(ByVal row As OrdreLignesRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "OrdreLignesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class IncompatiblesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnIdLfInc1 As System.Data.DataColumn

        Private columnIdLfInc2 As System.Data.DataColumn

        Private columnPlanFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Incompatibles"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IdLfInc1Column() As System.Data.DataColumn
            Get
                Return Me.columnIdLfInc1
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IdLfInc2Column() As System.Data.DataColumn
            Get
                Return Me.columnIdLfInc2
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PlanFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlanFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As IncompatiblesRow
            Get
                Return CType(Me.Rows(index), IncompatiblesRow)
            End Get
        End Property

        Public Event IncompatiblesRowChanging As IncompatiblesRowChangeEventHandler

        Public Event IncompatiblesRowChanged As IncompatiblesRowChangeEventHandler

        Public Event IncompatiblesRowDeleting As IncompatiblesRowChangeEventHandler

        Public Event IncompatiblesRowDeleted As IncompatiblesRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddIncompatiblesRow(ByVal row As IncompatiblesRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddIncompatiblesRow(ByVal IdLfInc1 As String, ByVal IdLfInc2 As String, ByVal parentPlanFeuxRowByPlanFeux_Incompatibles As PlanFeuxRow) As IncompatiblesRow
            Dim rowIncompatiblesRow As IncompatiblesRow = CType(Me.NewRow, IncompatiblesRow)
            rowIncompatiblesRow.ItemArray = New Object() {IdLfInc1, IdLfInc2, parentPlanFeuxRowByPlanFeux_Incompatibles(7)}
            Me.Rows.Add(rowIncompatiblesRow)
            Return rowIncompatiblesRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As IncompatiblesDataTable = CType(MyBase.Clone, IncompatiblesDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New IncompatiblesDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnIdLfInc1 = MyBase.Columns("IdLfInc1")
            Me.columnIdLfInc2 = MyBase.Columns("IdLfInc2")
            Me.columnPlanFeux_Id = MyBase.Columns("PlanFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnIdLfInc1 = New System.Data.DataColumn("IdLfInc1", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIdLfInc1)
            Me.columnIdLfInc2 = New System.Data.DataColumn("IdLfInc2", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIdLfInc2)
            Me.columnPlanFeux_Id = New System.Data.DataColumn("PlanFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPlanFeux_Id)
            Me.columnIdLfInc1.Namespace = ""
            Me.columnIdLfInc2.Namespace = ""
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewIncompatiblesRow() As IncompatiblesRow
            Return CType(Me.NewRow, IncompatiblesRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New IncompatiblesRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(IncompatiblesRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.IncompatiblesRowChangedEvent) Is Nothing) Then
                RaiseEvent IncompatiblesRowChanged(Me, New IncompatiblesRowChangeEvent(CType(e.Row, IncompatiblesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.IncompatiblesRowChangingEvent) Is Nothing) Then
                RaiseEvent IncompatiblesRowChanging(Me, New IncompatiblesRowChangeEvent(CType(e.Row, IncompatiblesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.IncompatiblesRowDeletedEvent) Is Nothing) Then
                RaiseEvent IncompatiblesRowDeleted(Me, New IncompatiblesRowChangeEvent(CType(e.Row, IncompatiblesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.IncompatiblesRowDeletingEvent) Is Nothing) Then
                RaiseEvent IncompatiblesRowDeleting(Me, New IncompatiblesRowChangeEvent(CType(e.Row, IncompatiblesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveIncompatiblesRow(ByVal row As IncompatiblesRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "IncompatiblesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class RougesDégagementDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnIdLfRouge1 As System.Data.DataColumn

        Private columnIdLfRouge2 As System.Data.DataColumn

        Private columnRougesDégagement_text As System.Data.DataColumn

        Private columnPlanFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "RougesDégagement"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IdLfRouge1Column() As System.Data.DataColumn
            Get
                Return Me.columnIdLfRouge1
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property IdLfRouge2Column() As System.Data.DataColumn
            Get
                Return Me.columnIdLfRouge2
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RougesDégagement_textColumn() As System.Data.DataColumn
            Get
                Return Me.columnRougesDégagement_text
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PlanFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlanFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As RougesDégagementRow
            Get
                Return CType(Me.Rows(index), RougesDégagementRow)
            End Get
        End Property

        Public Event RougesDégagementRowChanging As RougesDégagementRowChangeEventHandler

        Public Event RougesDégagementRowChanged As RougesDégagementRowChangeEventHandler

        Public Event RougesDégagementRowDeleting As RougesDégagementRowChangeEventHandler

        Public Event RougesDégagementRowDeleted As RougesDégagementRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddRougesDégagementRow(ByVal row As RougesDégagementRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddRougesDégagementRow(ByVal IdLfRouge1 As String, ByVal IdLfRouge2 As String, ByVal RougesDégagement_text As Short, ByVal parentPlanFeuxRowByPlanFeux_RougesDégagement As PlanFeuxRow) As RougesDégagementRow
            Dim rowRougesDégagementRow As RougesDégagementRow = CType(Me.NewRow, RougesDégagementRow)
            rowRougesDégagementRow.ItemArray = New Object() {IdLfRouge1, IdLfRouge2, RougesDégagement_text, parentPlanFeuxRowByPlanFeux_RougesDégagement(7)}
            Me.Rows.Add(rowRougesDégagementRow)
            Return rowRougesDégagementRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As RougesDégagementDataTable = CType(MyBase.Clone, RougesDégagementDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New RougesDégagementDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnIdLfRouge1 = MyBase.Columns("IdLfRouge1")
            Me.columnIdLfRouge2 = MyBase.Columns("IdLfRouge2")
            Me.columnRougesDégagement_text = MyBase.Columns("RougesDégagement_text")
            Me.columnPlanFeux_Id = MyBase.Columns("PlanFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnIdLfRouge1 = New System.Data.DataColumn("IdLfRouge1", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIdLfRouge1)
            Me.columnIdLfRouge2 = New System.Data.DataColumn("IdLfRouge2", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnIdLfRouge2)
            Me.columnRougesDégagement_text = New System.Data.DataColumn("RougesDégagement_text", GetType(Short), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnRougesDégagement_text)
            Me.columnPlanFeux_Id = New System.Data.DataColumn("PlanFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPlanFeux_Id)
            Me.columnIdLfRouge1.Namespace = ""
            Me.columnIdLfRouge2.Namespace = ""
            Me.columnRougesDégagement_text.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewRougesDégagementRow() As RougesDégagementRow
            Return CType(Me.NewRow, RougesDégagementRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New RougesDégagementRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(RougesDégagementRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RougesDégagementRowChangedEvent) Is Nothing) Then
                RaiseEvent RougesDégagementRowChanged(Me, New RougesDégagementRowChangeEvent(CType(e.Row, RougesDégagementRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RougesDégagementRowChangingEvent) Is Nothing) Then
                RaiseEvent RougesDégagementRowChanging(Me, New RougesDégagementRowChangeEvent(CType(e.Row, RougesDégagementRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RougesDégagementRowDeletedEvent) Is Nothing) Then
                RaiseEvent RougesDégagementRowDeleted(Me, New RougesDégagementRowChangeEvent(CType(e.Row, RougesDégagementRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RougesDégagementRowDeletingEvent) Is Nothing) Then
                RaiseEvent RougesDégagementRowDeleting(Me, New RougesDégagementRowChangeEvent(CType(e.Row, RougesDégagementRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveRougesDégagementRow(ByVal row As RougesDégagementRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RougesDégagementDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TypesConflitDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnTypesConflit_Column As System.Data.DataColumn

        Private columnPlanFeux_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "TypesConflit"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypesConflit_ColumnColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypesConflit_Column
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PlanFeux_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPlanFeux_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TypesConflitRow
            Get
                Return CType(Me.Rows(index), TypesConflitRow)
            End Get
        End Property

        Public Event TypesConflitRowChanging As TypesConflitRowChangeEventHandler

        Public Event TypesConflitRowChanged As TypesConflitRowChangeEventHandler

        Public Event TypesConflitRowDeleting As TypesConflitRowChangeEventHandler

        Public Event TypesConflitRowDeleted As TypesConflitRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTypesConflitRow(ByVal row As TypesConflitRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTypesConflitRow(ByVal TypesConflit_Column As Short, ByVal parentPlanFeuxRowByPlanFeux_TypesConflit As PlanFeuxRow) As TypesConflitRow
            Dim rowTypesConflitRow As TypesConflitRow = CType(Me.NewRow, TypesConflitRow)
            rowTypesConflitRow.ItemArray = New Object() {TypesConflit_Column, parentPlanFeuxRowByPlanFeux_TypesConflit(7)}
            Me.Rows.Add(rowTypesConflitRow)
            Return rowTypesConflitRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TypesConflitDataTable = CType(MyBase.Clone, TypesConflitDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TypesConflitDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnTypesConflit_Column = MyBase.Columns("TypesConflit_Column")
            Me.columnPlanFeux_Id = MyBase.Columns("PlanFeux_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnTypesConflit_Column = New System.Data.DataColumn("TypesConflit_Column", GetType(Short), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnTypesConflit_Column)
            Me.columnPlanFeux_Id = New System.Data.DataColumn("PlanFeux_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPlanFeux_Id)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTypesConflitRow() As TypesConflitRow
            Return CType(Me.NewRow, TypesConflitRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TypesConflitRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TypesConflitRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TypesConflitRowChangedEvent) Is Nothing) Then
                RaiseEvent TypesConflitRowChanged(Me, New TypesConflitRowChangeEvent(CType(e.Row, TypesConflitRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TypesConflitRowChangingEvent) Is Nothing) Then
                RaiseEvent TypesConflitRowChanging(Me, New TypesConflitRowChangeEvent(CType(e.Row, TypesConflitRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TypesConflitRowDeletedEvent) Is Nothing) Then
                RaiseEvent TypesConflitRowDeleted(Me, New TypesConflitRowChangeEvent(CType(e.Row, TypesConflitRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TypesConflitRowDeletingEvent) Is Nothing) Then
                RaiseEvent TypesConflitRowDeleting(Me, New TypesConflitRowChangeEvent(CType(e.Row, TypesConflitRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTypesConflitRow(ByVal row As TypesConflitRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TypesConflitDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class TraficDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnVerrouillé As System.Data.DataColumn

        Private columnNom As System.Data.DataColumn

        Private columnUVP As System.Data.DataColumn

        Private columnTraficComment As System.Data.DataColumn

        Private columnTrafic_Id As System.Data.DataColumn

        Private columnVariante_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Trafic"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VerrouilléColumn() As System.Data.DataColumn
            Get
                Return Me.columnVerrouillé
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomColumn() As System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property UVPColumn() As System.Data.DataColumn
            Get
                Return Me.columnUVP
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TraficCommentColumn() As System.Data.DataColumn
            Get
                Return Me.columnTraficComment
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trafic_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTrafic_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Variante_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnVariante_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As TraficRow
            Get
                Return CType(Me.Rows(index), TraficRow)
            End Get
        End Property

        Public Event TraficRowChanging As TraficRowChangeEventHandler

        Public Event TraficRowChanged As TraficRowChangeEventHandler

        Public Event TraficRowDeleting As TraficRowChangeEventHandler

        Public Event TraficRowDeleted As TraficRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddTraficRow(ByVal row As TraficRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddTraficRow(ByVal Verrouillé As Boolean, ByVal Nom As String, ByVal UVP As Boolean, ByVal TraficComment As String, ByVal parentVarianteRowByVariante_Trafic As VarianteRow) As TraficRow
            Dim rowTraficRow As TraficRow = CType(Me.NewRow, TraficRow)
            rowTraficRow.ItemArray = New Object() {Verrouillé, Nom, UVP, TraficComment, Nothing, parentVarianteRowByVariante_Trafic(5)}
            Me.Rows.Add(rowTraficRow)
            Return rowTraficRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As TraficDataTable = CType(MyBase.Clone, TraficDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New TraficDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnVerrouillé = MyBase.Columns("Verrouillé")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnUVP = MyBase.Columns("UVP")
            Me.columnTraficComment = MyBase.Columns("TraficComment")
            Me.columnTrafic_Id = MyBase.Columns("Trafic_Id")
            Me.columnVariante_Id = MyBase.Columns("Variante_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnVerrouillé = New System.Data.DataColumn("Verrouillé", GetType(Boolean), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnVerrouillé)
            Me.columnNom = New System.Data.DataColumn("Nom", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnUVP = New System.Data.DataColumn("UVP", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUVP)
            Me.columnTraficComment = New System.Data.DataColumn("TraficComment", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTraficComment)
            Me.columnTrafic_Id = New System.Data.DataColumn("Trafic_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTrafic_Id)
            Me.columnVariante_Id = New System.Data.DataColumn("Variante_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnVariante_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnTrafic_Id}, True))
            Me.columnVerrouillé.Namespace = ""
            Me.columnNom.AllowDBNull = False
            Me.columnTrafic_Id.AutoIncrement = True
            Me.columnTrafic_Id.AllowDBNull = False
            Me.columnTrafic_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewTraficRow() As TraficRow
            Return CType(Me.NewRow, TraficRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New TraficRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(TraficRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.TraficRowChangedEvent) Is Nothing) Then
                RaiseEvent TraficRowChanged(Me, New TraficRowChangeEvent(CType(e.Row, TraficRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.TraficRowChangingEvent) Is Nothing) Then
                RaiseEvent TraficRowChanging(Me, New TraficRowChangeEvent(CType(e.Row, TraficRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.TraficRowDeletedEvent) Is Nothing) Then
                RaiseEvent TraficRowDeleted(Me, New TraficRowChangeEvent(CType(e.Row, TraficRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.TraficRowDeletingEvent) Is Nothing) Then
                RaiseEvent TraficRowDeleting(Me, New TraficRowChangeEvent(CType(e.Row, TraficRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveTraficRow(ByVal row As TraficRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "TraficDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class QPiétonDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnQPiéton_Column As System.Data.DataColumn

        Private columnTrafic_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "QPiéton"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property QPiéton_ColumnColumn() As System.Data.DataColumn
            Get
                Return Me.columnQPiéton_Column
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trafic_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTrafic_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As QPiétonRow
            Get
                Return CType(Me.Rows(index), QPiétonRow)
            End Get
        End Property

        Public Event QPiétonRowChanging As QPiétonRowChangeEventHandler

        Public Event QPiétonRowChanged As QPiétonRowChangeEventHandler

        Public Event QPiétonRowDeleting As QPiétonRowChangeEventHandler

        Public Event QPiétonRowDeleted As QPiétonRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddQPiétonRow(ByVal row As QPiétonRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddQPiétonRow(ByVal QPiéton_Column As Short, ByVal parentTraficRowByTrafic_QPiéton As TraficRow) As QPiétonRow
            Dim rowQPiétonRow As QPiétonRow = CType(Me.NewRow, QPiétonRow)
            rowQPiétonRow.ItemArray = New Object() {QPiéton_Column, parentTraficRowByTrafic_QPiéton(4)}
            Me.Rows.Add(rowQPiétonRow)
            Return rowQPiétonRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As QPiétonDataTable = CType(MyBase.Clone, QPiétonDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New QPiétonDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnQPiéton_Column = MyBase.Columns("QPiéton_Column")
            Me.columnTrafic_Id = MyBase.Columns("Trafic_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnQPiéton_Column = New System.Data.DataColumn("QPiéton_Column", GetType(Short), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnQPiéton_Column)
            Me.columnTrafic_Id = New System.Data.DataColumn("Trafic_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTrafic_Id)
            Me.columnQPiéton_Column.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewQPiétonRow() As QPiétonRow
            Return CType(Me.NewRow, QPiétonRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New QPiétonRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QPiétonRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QPiétonRowChangedEvent) Is Nothing) Then
                RaiseEvent QPiétonRowChanged(Me, New QPiétonRowChangeEvent(CType(e.Row, QPiétonRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QPiétonRowChangingEvent) Is Nothing) Then
                RaiseEvent QPiétonRowChanging(Me, New QPiétonRowChangeEvent(CType(e.Row, QPiétonRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QPiétonRowDeletedEvent) Is Nothing) Then
                RaiseEvent QPiétonRowDeleted(Me, New QPiétonRowChangeEvent(CType(e.Row, QPiétonRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QPiétonRowDeletingEvent) Is Nothing) Then
                RaiseEvent QPiétonRowDeleting(Me, New QPiétonRowChangeEvent(CType(e.Row, QPiétonRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveQPiétonRow(ByVal row As QPiétonRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QPiétonDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class QVéhiculeDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnQVéhicule_Column As System.Data.DataColumn

        Private columnTrafic_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "QVéhicule"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property QVéhicule_ColumnColumn() As System.Data.DataColumn
            Get
                Return Me.columnQVéhicule_Column
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Trafic_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnTrafic_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As QVéhiculeRow
            Get
                Return CType(Me.Rows(index), QVéhiculeRow)
            End Get
        End Property

        Public Event QVéhiculeRowChanging As QVéhiculeRowChangeEventHandler

        Public Event QVéhiculeRowChanged As QVéhiculeRowChangeEventHandler

        Public Event QVéhiculeRowDeleting As QVéhiculeRowChangeEventHandler

        Public Event QVéhiculeRowDeleted As QVéhiculeRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddQVéhiculeRow(ByVal row As QVéhiculeRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddQVéhiculeRow(ByVal QVéhicule_Column As Short, ByVal parentTraficRowByTrafic_QVéhicule As TraficRow) As QVéhiculeRow
            Dim rowQVéhiculeRow As QVéhiculeRow = CType(Me.NewRow, QVéhiculeRow)
            rowQVéhiculeRow.ItemArray = New Object() {QVéhicule_Column, parentTraficRowByTrafic_QVéhicule(4)}
            Me.Rows.Add(rowQVéhiculeRow)
            Return rowQVéhiculeRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As QVéhiculeDataTable = CType(MyBase.Clone, QVéhiculeDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New QVéhiculeDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnQVéhicule_Column = MyBase.Columns("QVéhicule_Column")
            Me.columnTrafic_Id = MyBase.Columns("Trafic_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnQVéhicule_Column = New System.Data.DataColumn("QVéhicule_Column", GetType(Short), Nothing, System.Data.MappingType.SimpleContent)
            MyBase.Columns.Add(Me.columnQVéhicule_Column)
            Me.columnTrafic_Id = New System.Data.DataColumn("Trafic_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnTrafic_Id)
            Me.columnQVéhicule_Column.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewQVéhiculeRow() As QVéhiculeRow
            Return CType(Me.NewRow, QVéhiculeRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New QVéhiculeRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(QVéhiculeRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.QVéhiculeRowChangedEvent) Is Nothing) Then
                RaiseEvent QVéhiculeRowChanged(Me, New QVéhiculeRowChangeEvent(CType(e.Row, QVéhiculeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.QVéhiculeRowChangingEvent) Is Nothing) Then
                RaiseEvent QVéhiculeRowChanging(Me, New QVéhiculeRowChangeEvent(CType(e.Row, QVéhiculeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.QVéhiculeRowDeletedEvent) Is Nothing) Then
                RaiseEvent QVéhiculeRowDeleted(Me, New QVéhiculeRowChangeEvent(CType(e.Row, QVéhiculeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.QVéhiculeRowDeletingEvent) Is Nothing) Then
                RaiseEvent QVéhiculeRowDeleting(Me, New QVéhiculeRowChangeEvent(CType(e.Row, QVéhiculeRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveQVéhiculeRow(ByVal row As QVéhiculeRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "QVéhiculeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PropriétésDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnNbBranches As System.Data.DataColumn

        Private columnNom As System.Data.DataColumn

        Private columnCommune As System.Data.DataColumn

        Private columnEnAgglo As System.Data.DataColumn

        Private columnZoneRégulation As System.Data.DataColumn

        Private columnCommentaires As System.Data.DataColumn

        Private columnTypeControleur As System.Data.DataColumn

        Private columnFabricant As System.Data.DataColumn

        Private columnDateControleur As System.Data.DataColumn

        Private columnCarrefourType As System.Data.DataColumn

        Private columnNuméro As System.Data.DataColumn

        Private columnPremierService As System.Data.DataColumn

        Private columnCoordonnéesService As System.Data.DataColumn

        Private columnSuperviseurTravaux As System.Data.DataColumn

        Private columnDateEtude As System.Data.DataColumn

        Private columnRéalisateurEtude As System.Data.DataColumn

        Private columnObjectifEtude As System.Data.DataColumn

        Private columnOrigineVisa As System.Data.DataColumn

        Private columnNuméroVisa As System.Data.DataColumn

        Private columnVisaTrafics As System.Data.DataColumn

        Private columnDateService As System.Data.DataColumn

        Private columnDateModification As System.Data.DataColumn

        Private columnDateModifPlageHoraire As System.Data.DataColumn

        Private columnNumVersion As System.Data.DataColumn

        Private columnDateVersion As System.Data.DataColumn

        Private columnSystèmeRégulation As System.Data.DataColumn

        Private columnEnchainementPhases As System.Data.DataColumn

        Private columnPropriétés_Id As System.Data.DataColumn

        Private columnCarrefour_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Propriétés"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NbBranchesColumn() As System.Data.DataColumn
            Get
                Return Me.columnNbBranches
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomColumn() As System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CommuneColumn() As System.Data.DataColumn
            Get
                Return Me.columnCommune
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EnAggloColumn() As System.Data.DataColumn
            Get
                Return Me.columnEnAgglo
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ZoneRégulationColumn() As System.Data.DataColumn
            Get
                Return Me.columnZoneRégulation
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CommentairesColumn() As System.Data.DataColumn
            Get
                Return Me.columnCommentaires
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeControleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeControleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property FabricantColumn() As System.Data.DataColumn
            Get
                Return Me.columnFabricant
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DateControleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateControleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CarrefourTypeColumn() As System.Data.DataColumn
            Get
                Return Me.columnCarrefourType
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NuméroColumn() As System.Data.DataColumn
            Get
                Return Me.columnNuméro
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PremierServiceColumn() As System.Data.DataColumn
            Get
                Return Me.columnPremierService
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CoordonnéesServiceColumn() As System.Data.DataColumn
            Get
                Return Me.columnCoordonnéesService
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SuperviseurTravauxColumn() As System.Data.DataColumn
            Get
                Return Me.columnSuperviseurTravaux
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DateEtudeColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateEtude
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RéalisateurEtudeColumn() As System.Data.DataColumn
            Get
                Return Me.columnRéalisateurEtude
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ObjectifEtudeColumn() As System.Data.DataColumn
            Get
                Return Me.columnObjectifEtude
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property OrigineVisaColumn() As System.Data.DataColumn
            Get
                Return Me.columnOrigineVisa
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NuméroVisaColumn() As System.Data.DataColumn
            Get
                Return Me.columnNuméroVisa
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property VisaTraficsColumn() As System.Data.DataColumn
            Get
                Return Me.columnVisaTrafics
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DateServiceColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateService
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DateModificationColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateModification
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DateModifPlageHoraireColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateModifPlageHoraire
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NumVersionColumn() As System.Data.DataColumn
            Get
                Return Me.columnNumVersion
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DateVersionColumn() As System.Data.DataColumn
            Get
                Return Me.columnDateVersion
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SystèmeRégulationColumn() As System.Data.DataColumn
            Get
                Return Me.columnSystèmeRégulation
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EnchainementPhasesColumn() As System.Data.DataColumn
            Get
                Return Me.columnEnchainementPhases
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Propriétés_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPropriétés_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Carrefour_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnCarrefour_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PropriétésRow
            Get
                Return CType(Me.Rows(index), PropriétésRow)
            End Get
        End Property

        Public Event PropriétésRowChanging As PropriétésRowChangeEventHandler

        Public Event PropriétésRowChanged As PropriétésRowChangeEventHandler

        Public Event PropriétésRowDeleting As PropriétésRowChangeEventHandler

        Public Event PropriétésRowDeleted As PropriétésRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPropriétésRow(ByVal row As PropriétésRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPropriétésRow( _
                    ByVal NbBranches As Short, _
                    ByVal Nom As String, _
                    ByVal Commune As String, _
                    ByVal EnAgglo As Boolean, _
                    ByVal ZoneRégulation As String, _
                    ByVal Commentaires As String, _
                    ByVal TypeControleur As String, _
                    ByVal Fabricant As String, _
                    ByVal DateControleur As Date, _
                    ByVal CarrefourType As String, _
                    ByVal Numéro As String, _
                    ByVal PremierService As Date, _
                    ByVal CoordonnéesService As String, _
                    ByVal SuperviseurTravaux As String, _
                    ByVal DateEtude As Date, _
                    ByVal RéalisateurEtude As String, _
                    ByVal ObjectifEtude As String, _
                    ByVal OrigineVisa As String, _
                    ByVal NuméroVisa As String, _
                    ByVal VisaTrafics As String, _
                    ByVal DateService As Date, _
                    ByVal DateModification As Date, _
                    ByVal DateModifPlageHoraire As Date, _
                    ByVal NumVersion As String, _
                    ByVal DateVersion As Date, _
                    ByVal SystèmeRégulation As String, _
                    ByVal EnchainementPhases As String, _
                    ByVal parentCarrefourRowByCarrefour_Propriétés As CarrefourRow) As PropriétésRow
            Dim rowPropriétésRow As PropriétésRow = CType(Me.NewRow, PropriétésRow)
            rowPropriétésRow.ItemArray = New Object() {NbBranches, Nom, Commune, EnAgglo, ZoneRégulation, Commentaires, TypeControleur, Fabricant, DateControleur, CarrefourType, Numéro, PremierService, CoordonnéesService, SuperviseurTravaux, DateEtude, RéalisateurEtude, ObjectifEtude, OrigineVisa, NuméroVisa, VisaTrafics, DateService, DateModification, DateModifPlageHoraire, NumVersion, DateVersion, SystèmeRégulation, EnchainementPhases, Nothing, parentCarrefourRowByCarrefour_Propriétés(0)}
            Me.Rows.Add(rowPropriétésRow)
            Return rowPropriétésRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PropriétésDataTable = CType(MyBase.Clone, PropriétésDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PropriétésDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnNbBranches = MyBase.Columns("NbBranches")
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnCommune = MyBase.Columns("Commune")
            Me.columnEnAgglo = MyBase.Columns("EnAgglo")
            Me.columnZoneRégulation = MyBase.Columns("ZoneRégulation")
            Me.columnCommentaires = MyBase.Columns("Commentaires")
            Me.columnTypeControleur = MyBase.Columns("TypeControleur")
            Me.columnFabricant = MyBase.Columns("Fabricant")
            Me.columnDateControleur = MyBase.Columns("DateControleur")
            Me.columnCarrefourType = MyBase.Columns("CarrefourType")
            Me.columnNuméro = MyBase.Columns("Numéro")
            Me.columnPremierService = MyBase.Columns("PremierService")
            Me.columnCoordonnéesService = MyBase.Columns("CoordonnéesService")
            Me.columnSuperviseurTravaux = MyBase.Columns("SuperviseurTravaux")
            Me.columnDateEtude = MyBase.Columns("DateEtude")
            Me.columnRéalisateurEtude = MyBase.Columns("RéalisateurEtude")
            Me.columnObjectifEtude = MyBase.Columns("ObjectifEtude")
            Me.columnOrigineVisa = MyBase.Columns("OrigineVisa")
            Me.columnNuméroVisa = MyBase.Columns("NuméroVisa")
            Me.columnVisaTrafics = MyBase.Columns("VisaTrafics")
            Me.columnDateService = MyBase.Columns("DateService")
            Me.columnDateModification = MyBase.Columns("DateModification")
            Me.columnDateModifPlageHoraire = MyBase.Columns("DateModifPlageHoraire")
            Me.columnNumVersion = MyBase.Columns("NumVersion")
            Me.columnDateVersion = MyBase.Columns("DateVersion")
            Me.columnSystèmeRégulation = MyBase.Columns("SystèmeRégulation")
            Me.columnEnchainementPhases = MyBase.Columns("EnchainementPhases")
            Me.columnPropriétés_Id = MyBase.Columns("Propriétés_Id")
            Me.columnCarrefour_Id = MyBase.Columns("Carrefour_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnNbBranches = New System.Data.DataColumn("NbBranches", GetType(Short), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNbBranches)
            Me.columnNom = New System.Data.DataColumn("Nom", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnCommune = New System.Data.DataColumn("Commune", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommune)
            Me.columnEnAgglo = New System.Data.DataColumn("EnAgglo", GetType(Boolean), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnAgglo)
            Me.columnZoneRégulation = New System.Data.DataColumn("ZoneRégulation", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnZoneRégulation)
            Me.columnCommentaires = New System.Data.DataColumn("Commentaires", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCommentaires)
            Me.columnTypeControleur = New System.Data.DataColumn("TypeControleur", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeControleur)
            Me.columnFabricant = New System.Data.DataColumn("Fabricant", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFabricant)
            Me.columnDateControleur = New System.Data.DataColumn("DateControleur", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateControleur)
            Me.columnCarrefourType = New System.Data.DataColumn("CarrefourType", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCarrefourType)
            Me.columnNuméro = New System.Data.DataColumn("Numéro", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNuméro)
            Me.columnPremierService = New System.Data.DataColumn("PremierService", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPremierService)
            Me.columnCoordonnéesService = New System.Data.DataColumn("CoordonnéesService", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCoordonnéesService)
            Me.columnSuperviseurTravaux = New System.Data.DataColumn("SuperviseurTravaux", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSuperviseurTravaux)
            Me.columnDateEtude = New System.Data.DataColumn("DateEtude", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateEtude)
            Me.columnRéalisateurEtude = New System.Data.DataColumn("RéalisateurEtude", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRéalisateurEtude)
            Me.columnObjectifEtude = New System.Data.DataColumn("ObjectifEtude", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnObjectifEtude)
            Me.columnOrigineVisa = New System.Data.DataColumn("OrigineVisa", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOrigineVisa)
            Me.columnNuméroVisa = New System.Data.DataColumn("NuméroVisa", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNuméroVisa)
            Me.columnVisaTrafics = New System.Data.DataColumn("VisaTrafics", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnVisaTrafics)
            Me.columnDateService = New System.Data.DataColumn("DateService", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateService)
            Me.columnDateModification = New System.Data.DataColumn("DateModification", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModification)
            Me.columnDateModifPlageHoraire = New System.Data.DataColumn("DateModifPlageHoraire", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateModifPlageHoraire)
            Me.columnNumVersion = New System.Data.DataColumn("NumVersion", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNumVersion)
            Me.columnDateVersion = New System.Data.DataColumn("DateVersion", GetType(Date), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDateVersion)
            Me.columnSystèmeRégulation = New System.Data.DataColumn("SystèmeRégulation", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSystèmeRégulation)
            Me.columnEnchainementPhases = New System.Data.DataColumn("EnchainementPhases", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEnchainementPhases)
            Me.columnPropriétés_Id = New System.Data.DataColumn("Propriétés_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPropriétés_Id)
            Me.columnCarrefour_Id = New System.Data.DataColumn("Carrefour_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnCarrefour_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPropriétés_Id}, True))
            Me.columnNbBranches.AllowDBNull = False
            Me.columnNbBranches.DefaultValue = CType(4, Short)
            Me.columnNom.AllowDBNull = False
            Me.columnCommune.AllowDBNull = False
            Me.columnEnAgglo.AllowDBNull = False
            Me.columnCarrefourType.AllowDBNull = False
            Me.columnPropriétés_Id.AutoIncrement = True
            Me.columnPropriétés_Id.AllowDBNull = False
            Me.columnPropriétés_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPropriétésRow() As PropriétésRow
            Return CType(Me.NewRow, PropriétésRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PropriétésRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PropriétésRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PropriétésRowChangedEvent) Is Nothing) Then
                RaiseEvent PropriétésRowChanged(Me, New PropriétésRowChangeEvent(CType(e.Row, PropriétésRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PropriétésRowChangingEvent) Is Nothing) Then
                RaiseEvent PropriétésRowChanging(Me, New PropriétésRowChangeEvent(CType(e.Row, PropriétésRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PropriétésRowDeletedEvent) Is Nothing) Then
                RaiseEvent PropriétésRowDeleted(Me, New PropriétésRowChangeEvent(CType(e.Row, PropriétésRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PropriétésRowDeletingEvent) Is Nothing) Then
                RaiseEvent PropriétésRowDeleting(Me, New PropriétésRowChangeEvent(CType(e.Row, PropriétésRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePropriétésRow(ByVal row As PropriétésRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PropriétésDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class CentreDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnPropriétés_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Centre"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Propriétés_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPropriétés_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As CentreRow
            Get
                Return CType(Me.Rows(index), CentreRow)
            End Get
        End Property

        Public Event CentreRowChanging As CentreRowChangeEventHandler

        Public Event CentreRowChanged As CentreRowChangeEventHandler

        Public Event CentreRowDeleting As CentreRowChangeEventHandler

        Public Event CentreRowDeleted As CentreRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddCentreRow(ByVal row As CentreRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCentreRow(ByVal X As Single, ByVal Y As Single, ByVal parentPropriétésRowByPropriétés_Centre As PropriétésRow) As CentreRow
            Dim rowCentreRow As CentreRow = CType(Me.NewRow, CentreRow)
            rowCentreRow.ItemArray = New Object() {X, Y, parentPropriétésRowByPropriétés_Centre(27)}
            Me.Rows.Add(rowCentreRow)
            Return rowCentreRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CentreDataTable = CType(MyBase.Clone, CentreDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CentreDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnPropriétés_Id = MyBase.Columns("Propriétés_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnPropriétés_Id = New System.Data.DataColumn("Propriétés_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPropriétés_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewCentreRow() As CentreRow
            Return CType(Me.NewRow, CentreRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CentreRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentreRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentreRowChangedEvent) Is Nothing) Then
                RaiseEvent CentreRowChanged(Me, New CentreRowChangeEvent(CType(e.Row, CentreRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentreRowChangingEvent) Is Nothing) Then
                RaiseEvent CentreRowChanging(Me, New CentreRowChangeEvent(CType(e.Row, CentreRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentreRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentreRowDeleted(Me, New CentreRowChangeEvent(CType(e.Row, CentreRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentreRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentreRowDeleting(Me, New CentreRowChangeEvent(CType(e.Row, CentreRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveCentreRow(ByVal row As CentreRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CentreDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class DXFDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnNom As System.Data.DataColumn

        Private columnDXF_Id As System.Data.DataColumn

        Private columnSchémaACONDIA_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "DXF"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomColumn() As System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DXF_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnDXF_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SchémaACONDIA_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSchémaACONDIA_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As DXFRow
            Get
                Return CType(Me.Rows(index), DXFRow)
            End Get
        End Property

        Public Event DXFRowChanging As DXFRowChangeEventHandler

        Public Event DXFRowChanged As DXFRowChangeEventHandler

        Public Event DXFRowDeleting As DXFRowChangeEventHandler

        Public Event DXFRowDeleted As DXFRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddDXFRow(ByVal row As DXFRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddDXFRow(ByVal Nom As String, ByVal parentSchémaACONDIARowBySchémaACONDIA_DXF As SchémaACONDIARow) As DXFRow
            Dim rowDXFRow As DXFRow = CType(Me.NewRow, DXFRow)
            rowDXFRow.ItemArray = New Object() {Nom, Nothing, parentSchémaACONDIARowBySchémaACONDIA_DXF(0)}
            Me.Rows.Add(rowDXFRow)
            Return rowDXFRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As DXFDataTable = CType(MyBase.Clone, DXFDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New DXFDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnDXF_Id = MyBase.Columns("DXF_Id")
            Me.columnSchémaACONDIA_Id = MyBase.Columns("SchémaACONDIA_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnNom = New System.Data.DataColumn("Nom", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnDXF_Id = New System.Data.DataColumn("DXF_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnDXF_Id)
            Me.columnSchémaACONDIA_Id = New System.Data.DataColumn("SchémaACONDIA_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSchémaACONDIA_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnDXF_Id}, True))
            Me.columnNom.Namespace = ""
            Me.columnDXF_Id.AutoIncrement = True
            Me.columnDXF_Id.AllowDBNull = False
            Me.columnDXF_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewDXFRow() As DXFRow
            Return CType(Me.NewRow, DXFRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New DXFRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(DXFRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.DXFRowChangedEvent) Is Nothing) Then
                RaiseEvent DXFRowChanged(Me, New DXFRowChangeEvent(CType(e.Row, DXFRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.DXFRowChangingEvent) Is Nothing) Then
                RaiseEvent DXFRowChanging(Me, New DXFRowChangeEvent(CType(e.Row, DXFRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.DXFRowDeletedEvent) Is Nothing) Then
                RaiseEvent DXFRowDeleted(Me, New DXFRowChangeEvent(CType(e.Row, DXFRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.DXFRowDeletingEvent) Is Nothing) Then
                RaiseEvent DXFRowDeleting(Me, New DXFRowChangeEvent(CType(e.Row, DXFRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveDXFRow(ByVal row As DXFRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "DXFDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class CalqueDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnNom As System.Data.DataColumn

        Private columnCouleur As System.Data.DataColumn

        Private columnTypeLign As System.Data.DataColumn

        Private columnDXF_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Calque"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomColumn() As System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CouleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnCouleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeLignColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeLign
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DXF_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnDXF_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As CalqueRow
            Get
                Return CType(Me.Rows(index), CalqueRow)
            End Get
        End Property

        Public Event CalqueRowChanging As CalqueRowChangeEventHandler

        Public Event CalqueRowChanged As CalqueRowChangeEventHandler

        Public Event CalqueRowDeleting As CalqueRowChangeEventHandler

        Public Event CalqueRowDeleted As CalqueRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddCalqueRow(ByVal row As CalqueRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCalqueRow(ByVal Nom As String, ByVal Couleur As Long, ByVal TypeLign As String, ByVal parentDXFRowByDXF_Calque As DXFRow) As CalqueRow
            Dim rowCalqueRow As CalqueRow = CType(Me.NewRow, CalqueRow)
            rowCalqueRow.ItemArray = New Object() {Nom, Couleur, TypeLign, parentDXFRowByDXF_Calque(1)}
            Me.Rows.Add(rowCalqueRow)
            Return rowCalqueRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CalqueDataTable = CType(MyBase.Clone, CalqueDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CalqueDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnCouleur = MyBase.Columns("Couleur")
            Me.columnTypeLign = MyBase.Columns("TypeLign")
            Me.columnDXF_Id = MyBase.Columns("DXF_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnNom = New System.Data.DataColumn("Nom", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnCouleur = New System.Data.DataColumn("Couleur", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouleur)
            Me.columnTypeLign = New System.Data.DataColumn("TypeLign", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeLign)
            Me.columnDXF_Id = New System.Data.DataColumn("DXF_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnDXF_Id)
            Me.columnNom.AllowDBNull = False
            Me.columnNom.Namespace = ""
            Me.columnCouleur.AllowDBNull = False
            Me.columnTypeLign.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewCalqueRow() As CalqueRow
            Return CType(Me.NewRow, CalqueRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CalqueRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CalqueRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CalqueRowChangedEvent) Is Nothing) Then
                RaiseEvent CalqueRowChanged(Me, New CalqueRowChangeEvent(CType(e.Row, CalqueRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CalqueRowChangingEvent) Is Nothing) Then
                RaiseEvent CalqueRowChanging(Me, New CalqueRowChangeEvent(CType(e.Row, CalqueRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CalqueRowDeletedEvent) Is Nothing) Then
                RaiseEvent CalqueRowDeleted(Me, New CalqueRowChangeEvent(CType(e.Row, CalqueRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CalqueRowDeletingEvent) Is Nothing) Then
                RaiseEvent CalqueRowDeleting(Me, New CalqueRowChangeEvent(CType(e.Row, CalqueRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveCalqueRow(ByVal row As CalqueRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CalqueDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class BlocDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnNom As System.Data.DataColumn

        Private columnBloc_Id As System.Data.DataColumn

        Private columnDXF_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Bloc"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomColumn() As System.Data.DataColumn
            Get
                Return Me.columnNom
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Bloc_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBloc_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DXF_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnDXF_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As BlocRow
            Get
                Return CType(Me.Rows(index), BlocRow)
            End Get
        End Property

        Public Event BlocRowChanging As BlocRowChangeEventHandler

        Public Event BlocRowChanged As BlocRowChangeEventHandler

        Public Event BlocRowDeleting As BlocRowChangeEventHandler

        Public Event BlocRowDeleted As BlocRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddBlocRow(ByVal row As BlocRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddBlocRow(ByVal Nom As String, ByVal parentDXFRowByDXF_Bloc As DXFRow) As BlocRow
            Dim rowBlocRow As BlocRow = CType(Me.NewRow, BlocRow)
            rowBlocRow.ItemArray = New Object() {Nom, Nothing, parentDXFRowByDXF_Bloc(1)}
            Me.Rows.Add(rowBlocRow)
            Return rowBlocRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As BlocDataTable = CType(MyBase.Clone, BlocDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New BlocDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnNom = MyBase.Columns("Nom")
            Me.columnBloc_Id = MyBase.Columns("Bloc_Id")
            Me.columnDXF_Id = MyBase.Columns("DXF_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnNom = New System.Data.DataColumn("Nom", GetType(String), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnNom)
            Me.columnBloc_Id = New System.Data.DataColumn("Bloc_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBloc_Id)
            Me.columnDXF_Id = New System.Data.DataColumn("DXF_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnDXF_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnBloc_Id}, True))
            Me.columnNom.Namespace = ""
            Me.columnBloc_Id.AutoIncrement = True
            Me.columnBloc_Id.AllowDBNull = False
            Me.columnBloc_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewBlocRow() As BlocRow
            Return CType(Me.NewRow, BlocRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New BlocRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(BlocRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.BlocRowChangedEvent) Is Nothing) Then
                RaiseEvent BlocRowChanged(Me, New BlocRowChangeEvent(CType(e.Row, BlocRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.BlocRowChangingEvent) Is Nothing) Then
                RaiseEvent BlocRowChanging(Me, New BlocRowChangeEvent(CType(e.Row, BlocRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.BlocRowDeletedEvent) Is Nothing) Then
                RaiseEvent BlocRowDeleted(Me, New BlocRowChangeEvent(CType(e.Row, BlocRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.BlocRowDeletingEvent) Is Nothing) Then
                RaiseEvent BlocRowDeleting(Me, New BlocRowChangeEvent(CType(e.Row, BlocRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveBlocRow(ByVal row As BlocRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "BlocDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class LIGNEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnCouleur As System.Data.DataColumn

        Private columnTypeLign As System.Data.DataColumn

        Private columnNomCalque As System.Data.DataColumn

        Private columnLIGNE_Id As System.Data.DataColumn

        Private columnBloc_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "LIGNE"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CouleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnCouleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeLignColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeLign
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomCalqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomCalque
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LIGNE_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLIGNE_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Bloc_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBloc_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As LIGNERow
            Get
                Return CType(Me.Rows(index), LIGNERow)
            End Get
        End Property

        Public Event LIGNERowChanging As LIGNERowChangeEventHandler

        Public Event LIGNERowChanged As LIGNERowChangeEventHandler

        Public Event LIGNERowDeleting As LIGNERowChangeEventHandler

        Public Event LIGNERowDeleted As LIGNERowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddLIGNERow(ByVal row As LIGNERow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddLIGNERow(ByVal Couleur As Long, ByVal TypeLign As String, ByVal NomCalque As String, ByVal parentBlocRowByBloc_LIGNE As BlocRow) As LIGNERow
            Dim rowLIGNERow As LIGNERow = CType(Me.NewRow, LIGNERow)
            rowLIGNERow.ItemArray = New Object() {Couleur, TypeLign, NomCalque, Nothing, parentBlocRowByBloc_LIGNE(1)}
            Me.Rows.Add(rowLIGNERow)
            Return rowLIGNERow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LIGNEDataTable = CType(MyBase.Clone, LIGNEDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LIGNEDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCouleur = MyBase.Columns("Couleur")
            Me.columnTypeLign = MyBase.Columns("TypeLign")
            Me.columnNomCalque = MyBase.Columns("NomCalque")
            Me.columnLIGNE_Id = MyBase.Columns("LIGNE_Id")
            Me.columnBloc_Id = MyBase.Columns("Bloc_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCouleur = New System.Data.DataColumn("Couleur", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouleur)
            Me.columnTypeLign = New System.Data.DataColumn("TypeLign", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeLign)
            Me.columnNomCalque = New System.Data.DataColumn("NomCalque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCalque)
            Me.columnLIGNE_Id = New System.Data.DataColumn("LIGNE_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLIGNE_Id)
            Me.columnBloc_Id = New System.Data.DataColumn("Bloc_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBloc_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnLIGNE_Id}, True))
            Me.columnCouleur.AllowDBNull = False
            Me.columnTypeLign.AllowDBNull = False
            Me.columnNomCalque.AllowDBNull = False
            Me.columnLIGNE_Id.AutoIncrement = True
            Me.columnLIGNE_Id.AllowDBNull = False
            Me.columnLIGNE_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewLIGNERow() As LIGNERow
            Return CType(Me.NewRow, LIGNERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LIGNERow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LIGNERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LIGNERowChangedEvent) Is Nothing) Then
                RaiseEvent LIGNERowChanged(Me, New LIGNERowChangeEvent(CType(e.Row, LIGNERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LIGNERowChangingEvent) Is Nothing) Then
                RaiseEvent LIGNERowChanging(Me, New LIGNERowChangeEvent(CType(e.Row, LIGNERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LIGNERowDeletedEvent) Is Nothing) Then
                RaiseEvent LIGNERowDeleted(Me, New LIGNERowChangeEvent(CType(e.Row, LIGNERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LIGNERowDeletingEvent) Is Nothing) Then
                RaiseEvent LIGNERowDeleting(Me, New LIGNERowChangeEvent(CType(e.Row, LIGNERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveLIGNERow(ByVal row As LIGNERow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LIGNEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PADataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnLIGNE_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "PA"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property LIGNE_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLIGNE_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PARow
            Get
                Return CType(Me.Rows(index), PARow)
            End Get
        End Property

        Public Event PARowChanging As PARowChangeEventHandler

        Public Event PARowChanged As PARowChangeEventHandler

        Public Event PARowDeleting As PARowChangeEventHandler

        Public Event PARowDeleted As PARowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPARow(ByVal row As PARow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPARow(ByVal X As Single, ByVal Y As Single, ByVal parentLIGNERowByLIGNE_PA As LIGNERow) As PARow
            Dim rowPARow As PARow = CType(Me.NewRow, PARow)
            rowPARow.ItemArray = New Object() {X, Y, parentLIGNERowByLIGNE_PA(3)}
            Me.Rows.Add(rowPARow)
            Return rowPARow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PADataTable = CType(MyBase.Clone, PADataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PADataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnLIGNE_Id = MyBase.Columns("LIGNE_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnLIGNE_Id = New System.Data.DataColumn("LIGNE_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLIGNE_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPARow() As PARow
            Return CType(Me.NewRow, PARow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PARow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PARow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PARowChangedEvent) Is Nothing) Then
                RaiseEvent PARowChanged(Me, New PARowChangeEvent(CType(e.Row, PARow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PARowChangingEvent) Is Nothing) Then
                RaiseEvent PARowChanging(Me, New PARowChangeEvent(CType(e.Row, PARow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PARowDeletedEvent) Is Nothing) Then
                RaiseEvent PARowDeleted(Me, New PARowChangeEvent(CType(e.Row, PARow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PARowDeletingEvent) Is Nothing) Then
                RaiseEvent PARowDeleting(Me, New PARowChangeEvent(CType(e.Row, PARow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePARow(ByVal row As PARow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PADataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class ARCDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnCouleur As System.Data.DataColumn

        Private columnTypeLign As System.Data.DataColumn

        Private columnNomCalque As System.Data.DataColumn

        Private columnRayon As System.Data.DataColumn

        Private columnAngleDépart As System.Data.DataColumn

        Private columnAngleBalayage As System.Data.DataColumn

        Private columnARC_Id As System.Data.DataColumn

        Private columnBloc_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "ARC"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CouleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnCouleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeLignColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeLign
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomCalqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomCalque
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RayonColumn() As System.Data.DataColumn
            Get
                Return Me.columnRayon
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property AngleDépartColumn() As System.Data.DataColumn
            Get
                Return Me.columnAngleDépart
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property AngleBalayageColumn() As System.Data.DataColumn
            Get
                Return Me.columnAngleBalayage
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ARC_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnARC_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Bloc_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBloc_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As ARCRow
            Get
                Return CType(Me.Rows(index), ARCRow)
            End Get
        End Property

        Public Event ARCRowChanging As ARCRowChangeEventHandler

        Public Event ARCRowChanged As ARCRowChangeEventHandler

        Public Event ARCRowDeleting As ARCRowChangeEventHandler

        Public Event ARCRowDeleted As ARCRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddARCRow(ByVal row As ARCRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddARCRow(ByVal Couleur As Long, ByVal TypeLign As String, ByVal NomCalque As String, ByVal Rayon As Single, ByVal AngleDépart As Single, ByVal AngleBalayage As Single, ByVal parentBlocRowByBloc_ARC As BlocRow) As ARCRow
            Dim rowARCRow As ARCRow = CType(Me.NewRow, ARCRow)
            rowARCRow.ItemArray = New Object() {Couleur, TypeLign, NomCalque, Rayon, AngleDépart, AngleBalayage, Nothing, parentBlocRowByBloc_ARC(1)}
            Me.Rows.Add(rowARCRow)
            Return rowARCRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As ARCDataTable = CType(MyBase.Clone, ARCDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New ARCDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCouleur = MyBase.Columns("Couleur")
            Me.columnTypeLign = MyBase.Columns("TypeLign")
            Me.columnNomCalque = MyBase.Columns("NomCalque")
            Me.columnRayon = MyBase.Columns("Rayon")
            Me.columnAngleDépart = MyBase.Columns("AngleDépart")
            Me.columnAngleBalayage = MyBase.Columns("AngleBalayage")
            Me.columnARC_Id = MyBase.Columns("ARC_Id")
            Me.columnBloc_Id = MyBase.Columns("Bloc_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCouleur = New System.Data.DataColumn("Couleur", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouleur)
            Me.columnTypeLign = New System.Data.DataColumn("TypeLign", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeLign)
            Me.columnNomCalque = New System.Data.DataColumn("NomCalque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCalque)
            Me.columnRayon = New System.Data.DataColumn("Rayon", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRayon)
            Me.columnAngleDépart = New System.Data.DataColumn("AngleDépart", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAngleDépart)
            Me.columnAngleBalayage = New System.Data.DataColumn("AngleBalayage", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAngleBalayage)
            Me.columnARC_Id = New System.Data.DataColumn("ARC_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnARC_Id)
            Me.columnBloc_Id = New System.Data.DataColumn("Bloc_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBloc_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnARC_Id}, True))
            Me.columnCouleur.AllowDBNull = False
            Me.columnTypeLign.AllowDBNull = False
            Me.columnNomCalque.AllowDBNull = False
            Me.columnRayon.AllowDBNull = False
            Me.columnAngleDépart.AllowDBNull = False
            Me.columnAngleBalayage.AllowDBNull = False
            Me.columnARC_Id.AutoIncrement = True
            Me.columnARC_Id.AllowDBNull = False
            Me.columnARC_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewARCRow() As ARCRow
            Return CType(Me.NewRow, ARCRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New ARCRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(ARCRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ARCRowChangedEvent) Is Nothing) Then
                RaiseEvent ARCRowChanged(Me, New ARCRowChangeEvent(CType(e.Row, ARCRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ARCRowChangingEvent) Is Nothing) Then
                RaiseEvent ARCRowChanging(Me, New ARCRowChangeEvent(CType(e.Row, ARCRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ARCRowDeletedEvent) Is Nothing) Then
                RaiseEvent ARCRowDeleted(Me, New ARCRowChangeEvent(CType(e.Row, ARCRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ARCRowDeletingEvent) Is Nothing) Then
                RaiseEvent ARCRowDeleting(Me, New ARCRowChangeEvent(CType(e.Row, ARCRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveARCRow(ByVal row As ARCRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ARCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class CentreArcDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnARC_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "CentreArc"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ARC_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnARC_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As CentreArcRow
            Get
                Return CType(Me.Rows(index), CentreArcRow)
            End Get
        End Property

        Public Event CentreArcRowChanging As CentreArcRowChangeEventHandler

        Public Event CentreArcRowChanged As CentreArcRowChangeEventHandler

        Public Event CentreArcRowDeleting As CentreArcRowChangeEventHandler

        Public Event CentreArcRowDeleted As CentreArcRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddCentreArcRow(ByVal row As CentreArcRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCentreArcRow(ByVal X As Single, ByVal Y As Single, ByVal parentARCRowByARC_CentreArc As ARCRow) As CentreArcRow
            Dim rowCentreArcRow As CentreArcRow = CType(Me.NewRow, CentreArcRow)
            rowCentreArcRow.ItemArray = New Object() {X, Y, parentARCRowByARC_CentreArc(6)}
            Me.Rows.Add(rowCentreArcRow)
            Return rowCentreArcRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CentreArcDataTable = CType(MyBase.Clone, CentreArcDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CentreArcDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnARC_Id = MyBase.Columns("ARC_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnARC_Id = New System.Data.DataColumn("ARC_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnARC_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewCentreArcRow() As CentreArcRow
            Return CType(Me.NewRow, CentreArcRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CentreArcRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentreArcRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentreArcRowChangedEvent) Is Nothing) Then
                RaiseEvent CentreArcRowChanged(Me, New CentreArcRowChangeEvent(CType(e.Row, CentreArcRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentreArcRowChangingEvent) Is Nothing) Then
                RaiseEvent CentreArcRowChanging(Me, New CentreArcRowChangeEvent(CType(e.Row, CentreArcRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentreArcRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentreArcRowDeleted(Me, New CentreArcRowChangeEvent(CType(e.Row, CentreArcRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentreArcRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentreArcRowDeleting(Me, New CentreArcRowChangeEvent(CType(e.Row, CentreArcRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveCentreArcRow(ByVal row As CentreArcRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CentreArcDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class CERCLEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnCouleur As System.Data.DataColumn

        Private columnTypeLign As System.Data.DataColumn

        Private columnNomCalque As System.Data.DataColumn

        Private columnRayon As System.Data.DataColumn

        Private columnCERCLE_Id As System.Data.DataColumn

        Private columnBloc_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "CERCLE"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CouleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnCouleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeLignColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeLign
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomCalqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomCalque
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RayonColumn() As System.Data.DataColumn
            Get
                Return Me.columnRayon
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CERCLE_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnCERCLE_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Bloc_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBloc_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As CERCLERow
            Get
                Return CType(Me.Rows(index), CERCLERow)
            End Get
        End Property

        Public Event CERCLERowChanging As CERCLERowChangeEventHandler

        Public Event CERCLERowChanged As CERCLERowChangeEventHandler

        Public Event CERCLERowDeleting As CERCLERowChangeEventHandler

        Public Event CERCLERowDeleted As CERCLERowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddCERCLERow(ByVal row As CERCLERow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCERCLERow(ByVal Couleur As Long, ByVal TypeLign As String, ByVal NomCalque As String, ByVal Rayon As Single, ByVal parentBlocRowByBloc_CERCLE As BlocRow) As CERCLERow
            Dim rowCERCLERow As CERCLERow = CType(Me.NewRow, CERCLERow)
            rowCERCLERow.ItemArray = New Object() {Couleur, TypeLign, NomCalque, Rayon, Nothing, parentBlocRowByBloc_CERCLE(1)}
            Me.Rows.Add(rowCERCLERow)
            Return rowCERCLERow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CERCLEDataTable = CType(MyBase.Clone, CERCLEDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CERCLEDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCouleur = MyBase.Columns("Couleur")
            Me.columnTypeLign = MyBase.Columns("TypeLign")
            Me.columnNomCalque = MyBase.Columns("NomCalque")
            Me.columnRayon = MyBase.Columns("Rayon")
            Me.columnCERCLE_Id = MyBase.Columns("CERCLE_Id")
            Me.columnBloc_Id = MyBase.Columns("Bloc_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCouleur = New System.Data.DataColumn("Couleur", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouleur)
            Me.columnTypeLign = New System.Data.DataColumn("TypeLign", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeLign)
            Me.columnNomCalque = New System.Data.DataColumn("NomCalque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCalque)
            Me.columnRayon = New System.Data.DataColumn("Rayon", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRayon)
            Me.columnCERCLE_Id = New System.Data.DataColumn("CERCLE_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnCERCLE_Id)
            Me.columnBloc_Id = New System.Data.DataColumn("Bloc_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBloc_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnCERCLE_Id}, True))
            Me.columnCouleur.AllowDBNull = False
            Me.columnTypeLign.AllowDBNull = False
            Me.columnNomCalque.AllowDBNull = False
            Me.columnRayon.AllowDBNull = False
            Me.columnCERCLE_Id.AutoIncrement = True
            Me.columnCERCLE_Id.AllowDBNull = False
            Me.columnCERCLE_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewCERCLERow() As CERCLERow
            Return CType(Me.NewRow, CERCLERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CERCLERow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CERCLERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CERCLERowChangedEvent) Is Nothing) Then
                RaiseEvent CERCLERowChanged(Me, New CERCLERowChangeEvent(CType(e.Row, CERCLERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CERCLERowChangingEvent) Is Nothing) Then
                RaiseEvent CERCLERowChanging(Me, New CERCLERowChangeEvent(CType(e.Row, CERCLERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CERCLERowDeletedEvent) Is Nothing) Then
                RaiseEvent CERCLERowDeleted(Me, New CERCLERowChangeEvent(CType(e.Row, CERCLERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CERCLERowDeletingEvent) Is Nothing) Then
                RaiseEvent CERCLERowDeleting(Me, New CERCLERowChangeEvent(CType(e.Row, CERCLERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveCERCLERow(ByVal row As CERCLERow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CERCLEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class CentreCercleDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnCERCLE_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "CentreCercle"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CERCLE_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnCERCLE_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As CentreCercleRow
            Get
                Return CType(Me.Rows(index), CentreCercleRow)
            End Get
        End Property

        Public Event CentreCercleRowChanging As CentreCercleRowChangeEventHandler

        Public Event CentreCercleRowChanged As CentreCercleRowChangeEventHandler

        Public Event CentreCercleRowDeleting As CentreCercleRowChangeEventHandler

        Public Event CentreCercleRowDeleted As CentreCercleRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddCentreCercleRow(ByVal row As CentreCercleRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddCentreCercleRow(ByVal X As Single, ByVal Y As Single, ByVal parentCERCLERowByCERCLE_CentreCercle As CERCLERow) As CentreCercleRow
            Dim rowCentreCercleRow As CentreCercleRow = CType(Me.NewRow, CentreCercleRow)
            rowCentreCercleRow.ItemArray = New Object() {X, Y, parentCERCLERowByCERCLE_CentreCercle(4)}
            Me.Rows.Add(rowCentreCercleRow)
            Return rowCentreCercleRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As CentreCercleDataTable = CType(MyBase.Clone, CentreCercleDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New CentreCercleDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnCERCLE_Id = MyBase.Columns("CERCLE_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnCERCLE_Id = New System.Data.DataColumn("CERCLE_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnCERCLE_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewCentreCercleRow() As CentreCercleRow
            Return CType(Me.NewRow, CentreCercleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New CentreCercleRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(CentreCercleRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CentreCercleRowChangedEvent) Is Nothing) Then
                RaiseEvent CentreCercleRowChanged(Me, New CentreCercleRowChangeEvent(CType(e.Row, CentreCercleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CentreCercleRowChangingEvent) Is Nothing) Then
                RaiseEvent CentreCercleRowChanging(Me, New CentreCercleRowChangeEvent(CType(e.Row, CentreCercleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CentreCercleRowDeletedEvent) Is Nothing) Then
                RaiseEvent CentreCercleRowDeleted(Me, New CentreCercleRowChangeEvent(CType(e.Row, CentreCercleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CentreCercleRowDeletingEvent) Is Nothing) Then
                RaiseEvent CentreCercleRowDeleting(Me, New CentreCercleRowChangeEvent(CType(e.Row, CentreCercleRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveCentreCercleRow(ByVal row As CentreCercleRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CentreCercleDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class POLYARCDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnClore As System.Data.DataColumn

        Private columnCouleur As System.Data.DataColumn

        Private columnTypeLign As System.Data.DataColumn

        Private columnNomCalque As System.Data.DataColumn

        Private columnPOLYARC_Id As System.Data.DataColumn

        Private columnBloc_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "POLYARC"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CloreColumn() As System.Data.DataColumn
            Get
                Return Me.columnClore
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CouleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnCouleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeLignColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeLign
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomCalqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomCalque
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property POLYARC_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOLYARC_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Bloc_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBloc_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As POLYARCRow
            Get
                Return CType(Me.Rows(index), POLYARCRow)
            End Get
        End Property

        Public Event POLYARCRowChanging As POLYARCRowChangeEventHandler

        Public Event POLYARCRowChanged As POLYARCRowChangeEventHandler

        Public Event POLYARCRowDeleting As POLYARCRowChangeEventHandler

        Public Event POLYARCRowDeleted As POLYARCRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPOLYARCRow(ByVal row As POLYARCRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPOLYARCRow(ByVal Clore As Boolean, ByVal Couleur As Long, ByVal TypeLign As String, ByVal NomCalque As String, ByVal parentBlocRowByBloc_POLYARC As BlocRow) As POLYARCRow
            Dim rowPOLYARCRow As POLYARCRow = CType(Me.NewRow, POLYARCRow)
            rowPOLYARCRow.ItemArray = New Object() {Clore, Couleur, TypeLign, NomCalque, Nothing, parentBlocRowByBloc_POLYARC(1)}
            Me.Rows.Add(rowPOLYARCRow)
            Return rowPOLYARCRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As POLYARCDataTable = CType(MyBase.Clone, POLYARCDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New POLYARCDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnClore = MyBase.Columns("Clore")
            Me.columnCouleur = MyBase.Columns("Couleur")
            Me.columnTypeLign = MyBase.Columns("TypeLign")
            Me.columnNomCalque = MyBase.Columns("NomCalque")
            Me.columnPOLYARC_Id = MyBase.Columns("POLYARC_Id")
            Me.columnBloc_Id = MyBase.Columns("Bloc_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnClore = New System.Data.DataColumn("Clore", GetType(Boolean), Nothing, System.Data.MappingType.Attribute)
            MyBase.Columns.Add(Me.columnClore)
            Me.columnCouleur = New System.Data.DataColumn("Couleur", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouleur)
            Me.columnTypeLign = New System.Data.DataColumn("TypeLign", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeLign)
            Me.columnNomCalque = New System.Data.DataColumn("NomCalque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCalque)
            Me.columnPOLYARC_Id = New System.Data.DataColumn("POLYARC_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPOLYARC_Id)
            Me.columnBloc_Id = New System.Data.DataColumn("Bloc_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBloc_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPOLYARC_Id}, True))
            Me.columnClore.Namespace = ""
            Me.columnCouleur.AllowDBNull = False
            Me.columnTypeLign.AllowDBNull = False
            Me.columnNomCalque.AllowDBNull = False
            Me.columnPOLYARC_Id.AutoIncrement = True
            Me.columnPOLYARC_Id.AllowDBNull = False
            Me.columnPOLYARC_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPOLYARCRow() As POLYARCRow
            Return CType(Me.NewRow, POLYARCRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New POLYARCRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(POLYARCRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.POLYARCRowChangedEvent) Is Nothing) Then
                RaiseEvent POLYARCRowChanged(Me, New POLYARCRowChangeEvent(CType(e.Row, POLYARCRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.POLYARCRowChangingEvent) Is Nothing) Then
                RaiseEvent POLYARCRowChanging(Me, New POLYARCRowChangeEvent(CType(e.Row, POLYARCRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.POLYARCRowDeletedEvent) Is Nothing) Then
                RaiseEvent POLYARCRowDeleted(Me, New POLYARCRowChangeEvent(CType(e.Row, POLYARCRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.POLYARCRowDeletingEvent) Is Nothing) Then
                RaiseEvent POLYARCRowDeleting(Me, New POLYARCRowChangeEvent(CType(e.Row, POLYARCRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePOLYARCRow(ByVal row As POLYARCRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "POLYARCDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PIDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnArrondi As System.Data.DataColumn

        Private columnDrapeau As System.Data.DataColumn

        Private columnPI_Id As System.Data.DataColumn

        Private columnPOLYARC_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "PI"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property ArrondiColumn() As System.Data.DataColumn
            Get
                Return Me.columnArrondi
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DrapeauColumn() As System.Data.DataColumn
            Get
                Return Me.columnDrapeau
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PI_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPI_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property POLYARC_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPOLYARC_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PIRow
            Get
                Return CType(Me.Rows(index), PIRow)
            End Get
        End Property

        Public Event PIRowChanging As PIRowChangeEventHandler

        Public Event PIRowChanged As PIRowChangeEventHandler

        Public Event PIRowDeleting As PIRowChangeEventHandler

        Public Event PIRowDeleted As PIRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPIRow(ByVal row As PIRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPIRow(ByVal Arrondi As Single, ByVal Drapeau As Integer, ByVal parentPOLYARCRowByPOLYARC_PI As POLYARCRow) As PIRow
            Dim rowPIRow As PIRow = CType(Me.NewRow, PIRow)
            rowPIRow.ItemArray = New Object() {Arrondi, Drapeau, Nothing, parentPOLYARCRowByPOLYARC_PI(4)}
            Me.Rows.Add(rowPIRow)
            Return rowPIRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PIDataTable = CType(MyBase.Clone, PIDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PIDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnArrondi = MyBase.Columns("Arrondi")
            Me.columnDrapeau = MyBase.Columns("Drapeau")
            Me.columnPI_Id = MyBase.Columns("PI_Id")
            Me.columnPOLYARC_Id = MyBase.Columns("POLYARC_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnArrondi = New System.Data.DataColumn("Arrondi", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnArrondi)
            Me.columnDrapeau = New System.Data.DataColumn("Drapeau", GetType(Integer), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDrapeau)
            Me.columnPI_Id = New System.Data.DataColumn("PI_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPI_Id)
            Me.columnPOLYARC_Id = New System.Data.DataColumn("POLYARC_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPOLYARC_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnPI_Id}, True))
            Me.columnPI_Id.AutoIncrement = True
            Me.columnPI_Id.AllowDBNull = False
            Me.columnPI_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPIRow() As PIRow
            Return CType(Me.NewRow, PIRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PIRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PIRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PIRowChangedEvent) Is Nothing) Then
                RaiseEvent PIRowChanged(Me, New PIRowChangeEvent(CType(e.Row, PIRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PIRowChangingEvent) Is Nothing) Then
                RaiseEvent PIRowChanging(Me, New PIRowChangeEvent(CType(e.Row, PIRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PIRowDeletedEvent) Is Nothing) Then
                RaiseEvent PIRowDeleted(Me, New PIRowChangeEvent(CType(e.Row, PIRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PIRowDeletingEvent) Is Nothing) Then
                RaiseEvent PIRowDeleting(Me, New PIRowChangeEvent(CType(e.Row, PIRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePIRow(ByVal row As PIRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PIDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnPI_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "P"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property PI_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnPI_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PRow
            Get
                Return CType(Me.Rows(index), PRow)
            End Get
        End Property

        Public Event PRowChanging As PRowChangeEventHandler

        Public Event PRowChanged As PRowChangeEventHandler

        Public Event PRowDeleting As PRowChangeEventHandler

        Public Event PRowDeleted As PRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPRow(ByVal row As PRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPRow(ByVal X As Single, ByVal Y As Single, ByVal parentPIRowByPI_P As PIRow) As PRow
            Dim rowPRow As PRow = CType(Me.NewRow, PRow)
            rowPRow.ItemArray = New Object() {X, Y, parentPIRowByPI_P(2)}
            Me.Rows.Add(rowPRow)
            Return rowPRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PDataTable = CType(MyBase.Clone, PDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnPI_Id = MyBase.Columns("PI_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnPI_Id = New System.Data.DataColumn("PI_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnPI_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPRow() As PRow
            Return CType(Me.NewRow, PRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PRowChangedEvent) Is Nothing) Then
                RaiseEvent PRowChanged(Me, New PRowChangeEvent(CType(e.Row, PRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PRowChangingEvent) Is Nothing) Then
                RaiseEvent PRowChanging(Me, New PRowChangeEvent(CType(e.Row, PRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PRowDeletedEvent) Is Nothing) Then
                RaiseEvent PRowDeleted(Me, New PRowChangeEvent(CType(e.Row, PRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PRowDeletingEvent) Is Nothing) Then
                RaiseEvent PRowDeleting(Me, New PRowChangeEvent(CType(e.Row, PRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePRow(ByVal row As PRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class SPLINEDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnCouleur As System.Data.DataColumn

        Private columnTypeLign As System.Data.DataColumn

        Private columnNomCalque As System.Data.DataColumn

        Private columnSPLINE_Id As System.Data.DataColumn

        Private columnBloc_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "SPLINE"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CouleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnCouleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeLignColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeLign
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomCalqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomCalque
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPLINE_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPLINE_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Bloc_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBloc_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As SPLINERow
            Get
                Return CType(Me.Rows(index), SPLINERow)
            End Get
        End Property

        Public Event SPLINERowChanging As SPLINERowChangeEventHandler

        Public Event SPLINERowChanged As SPLINERowChangeEventHandler

        Public Event SPLINERowDeleting As SPLINERowChangeEventHandler

        Public Event SPLINERowDeleted As SPLINERowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddSPLINERow(ByVal row As SPLINERow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddSPLINERow(ByVal Couleur As Long, ByVal TypeLign As String, ByVal NomCalque As String, ByVal parentBlocRowByBloc_SPLINE As BlocRow) As SPLINERow
            Dim rowSPLINERow As SPLINERow = CType(Me.NewRow, SPLINERow)
            rowSPLINERow.ItemArray = New Object() {Couleur, TypeLign, NomCalque, Nothing, parentBlocRowByBloc_SPLINE(1)}
            Me.Rows.Add(rowSPLINERow)
            Return rowSPLINERow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As SPLINEDataTable = CType(MyBase.Clone, SPLINEDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New SPLINEDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCouleur = MyBase.Columns("Couleur")
            Me.columnTypeLign = MyBase.Columns("TypeLign")
            Me.columnNomCalque = MyBase.Columns("NomCalque")
            Me.columnSPLINE_Id = MyBase.Columns("SPLINE_Id")
            Me.columnBloc_Id = MyBase.Columns("Bloc_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCouleur = New System.Data.DataColumn("Couleur", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouleur)
            Me.columnTypeLign = New System.Data.DataColumn("TypeLign", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeLign)
            Me.columnNomCalque = New System.Data.DataColumn("NomCalque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCalque)
            Me.columnSPLINE_Id = New System.Data.DataColumn("SPLINE_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSPLINE_Id)
            Me.columnBloc_Id = New System.Data.DataColumn("Bloc_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBloc_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnSPLINE_Id}, True))
            Me.columnCouleur.AllowDBNull = False
            Me.columnTypeLign.AllowDBNull = False
            Me.columnNomCalque.AllowDBNull = False
            Me.columnSPLINE_Id.AutoIncrement = True
            Me.columnSPLINE_Id.AllowDBNull = False
            Me.columnSPLINE_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewSPLINERow() As SPLINERow
            Return CType(Me.NewRow, SPLINERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New SPLINERow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(SPLINERow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.SPLINERowChangedEvent) Is Nothing) Then
                RaiseEvent SPLINERowChanged(Me, New SPLINERowChangeEvent(CType(e.Row, SPLINERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.SPLINERowChangingEvent) Is Nothing) Then
                RaiseEvent SPLINERowChanging(Me, New SPLINERowChangeEvent(CType(e.Row, SPLINERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.SPLINERowDeletedEvent) Is Nothing) Then
                RaiseEvent SPLINERowDeleted(Me, New SPLINERowChangeEvent(CType(e.Row, SPLINERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.SPLINERowDeletingEvent) Is Nothing) Then
                RaiseEvent SPLINERowDeleting(Me, New SPLINERowChangeEvent(CType(e.Row, SPLINERow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveSPLINERow(ByVal row As SPLINERow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "SPLINEDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class PtDessinéDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnSPLINE_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "PtDessiné"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property SPLINE_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnSPLINE_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As PtDessinéRow
            Get
                Return CType(Me.Rows(index), PtDessinéRow)
            End Get
        End Property

        Public Event PtDessinéRowChanging As PtDessinéRowChangeEventHandler

        Public Event PtDessinéRowChanged As PtDessinéRowChangeEventHandler

        Public Event PtDessinéRowDeleting As PtDessinéRowChangeEventHandler

        Public Event PtDessinéRowDeleted As PtDessinéRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddPtDessinéRow(ByVal row As PtDessinéRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddPtDessinéRow(ByVal X As Single, ByVal Y As Single, ByVal parentSPLINERowBySPLINE_PtDessiné As SPLINERow) As PtDessinéRow
            Dim rowPtDessinéRow As PtDessinéRow = CType(Me.NewRow, PtDessinéRow)
            rowPtDessinéRow.ItemArray = New Object() {X, Y, parentSPLINERowBySPLINE_PtDessiné(3)}
            Me.Rows.Add(rowPtDessinéRow)
            Return rowPtDessinéRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As PtDessinéDataTable = CType(MyBase.Clone, PtDessinéDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New PtDessinéDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnSPLINE_Id = MyBase.Columns("SPLINE_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnSPLINE_Id = New System.Data.DataColumn("SPLINE_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnSPLINE_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewPtDessinéRow() As PtDessinéRow
            Return CType(Me.NewRow, PtDessinéRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New PtDessinéRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(PtDessinéRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.PtDessinéRowChangedEvent) Is Nothing) Then
                RaiseEvent PtDessinéRowChanged(Me, New PtDessinéRowChangeEvent(CType(e.Row, PtDessinéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.PtDessinéRowChangingEvent) Is Nothing) Then
                RaiseEvent PtDessinéRowChanging(Me, New PtDessinéRowChangeEvent(CType(e.Row, PtDessinéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.PtDessinéRowDeletedEvent) Is Nothing) Then
                RaiseEvent PtDessinéRowDeleted(Me, New PtDessinéRowChangeEvent(CType(e.Row, PtDessinéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.PtDessinéRowDeletingEvent) Is Nothing) Then
                RaiseEvent PtDessinéRowDeleting(Me, New PtDessinéRowChangeEvent(CType(e.Row, PtDessinéRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovePtDessinéRow(ByVal row As PtDessinéRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "PtDessinéDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class INSERTDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnCouleur As System.Data.DataColumn

        Private columnTypeLign As System.Data.DataColumn

        Private columnNomCalque As System.Data.DataColumn

        Private columnNomBloc As System.Data.DataColumn

        Private columnEchelle As System.Data.DataColumn

        Private columnRotation As System.Data.DataColumn

        Private columnINSERT_Id As System.Data.DataColumn

        Private columnBloc_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "INSERT"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property CouleurColumn() As System.Data.DataColumn
            Get
                Return Me.columnCouleur
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property TypeLignColumn() As System.Data.DataColumn
            Get
                Return Me.columnTypeLign
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomCalqueColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomCalque
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property NomBlocColumn() As System.Data.DataColumn
            Get
                Return Me.columnNomBloc
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property EchelleColumn() As System.Data.DataColumn
            Get
                Return Me.columnEchelle
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property RotationColumn() As System.Data.DataColumn
            Get
                Return Me.columnRotation
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property INSERT_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnINSERT_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Bloc_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnBloc_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As INSERTRow
            Get
                Return CType(Me.Rows(index), INSERTRow)
            End Get
        End Property

        Public Event INSERTRowChanging As INSERTRowChangeEventHandler

        Public Event INSERTRowChanged As INSERTRowChangeEventHandler

        Public Event INSERTRowDeleting As INSERTRowChangeEventHandler

        Public Event INSERTRowDeleted As INSERTRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddINSERTRow(ByVal row As INSERTRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddINSERTRow(ByVal Couleur As Long, ByVal TypeLign As String, ByVal NomCalque As String, ByVal NomBloc As String, ByVal Echelle As Single, ByVal Rotation As Single, ByVal parentBlocRowByBloc_INSERT As BlocRow) As INSERTRow
            Dim rowINSERTRow As INSERTRow = CType(Me.NewRow, INSERTRow)
            rowINSERTRow.ItemArray = New Object() {Couleur, TypeLign, NomCalque, NomBloc, Echelle, Rotation, Nothing, parentBlocRowByBloc_INSERT(1)}
            Me.Rows.Add(rowINSERTRow)
            Return rowINSERTRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As INSERTDataTable = CType(MyBase.Clone, INSERTDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New INSERTDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnCouleur = MyBase.Columns("Couleur")
            Me.columnTypeLign = MyBase.Columns("TypeLign")
            Me.columnNomCalque = MyBase.Columns("NomCalque")
            Me.columnNomBloc = MyBase.Columns("NomBloc")
            Me.columnEchelle = MyBase.Columns("Echelle")
            Me.columnRotation = MyBase.Columns("Rotation")
            Me.columnINSERT_Id = MyBase.Columns("INSERT_Id")
            Me.columnBloc_Id = MyBase.Columns("Bloc_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnCouleur = New System.Data.DataColumn("Couleur", GetType(Long), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCouleur)
            Me.columnTypeLign = New System.Data.DataColumn("TypeLign", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTypeLign)
            Me.columnNomCalque = New System.Data.DataColumn("NomCalque", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomCalque)
            Me.columnNomBloc = New System.Data.DataColumn("NomBloc", GetType(String), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNomBloc)
            Me.columnEchelle = New System.Data.DataColumn("Echelle", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEchelle)
            Me.columnRotation = New System.Data.DataColumn("Rotation", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRotation)
            Me.columnINSERT_Id = New System.Data.DataColumn("INSERT_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnINSERT_Id)
            Me.columnBloc_Id = New System.Data.DataColumn("Bloc_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnBloc_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnINSERT_Id}, True))
            Me.columnCouleur.AllowDBNull = False
            Me.columnTypeLign.AllowDBNull = False
            Me.columnNomCalque.AllowDBNull = False
            Me.columnNomBloc.AllowDBNull = False
            Me.columnINSERT_Id.AutoIncrement = True
            Me.columnINSERT_Id.AllowDBNull = False
            Me.columnINSERT_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewINSERTRow() As INSERTRow
            Return CType(Me.NewRow, INSERTRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New INSERTRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(INSERTRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.INSERTRowChangedEvent) Is Nothing) Then
                RaiseEvent INSERTRowChanged(Me, New INSERTRowChangeEvent(CType(e.Row, INSERTRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.INSERTRowChangingEvent) Is Nothing) Then
                RaiseEvent INSERTRowChanging(Me, New INSERTRowChangeEvent(CType(e.Row, INSERTRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.INSERTRowDeletedEvent) Is Nothing) Then
                RaiseEvent INSERTRowDeleted(Me, New INSERTRowChangeEvent(CType(e.Row, INSERTRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.INSERTRowDeletingEvent) Is Nothing) Then
                RaiseEvent INSERTRowDeleting(Me, New INSERTRowChangeEvent(CType(e.Row, INSERTRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveINSERTRow(ByVal row As INSERTRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "INSERTDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class pInsertionDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnINSERT_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "pInsertion"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property INSERT_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnINSERT_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As pInsertionRow
            Get
                Return CType(Me.Rows(index), pInsertionRow)
            End Get
        End Property

        Public Event pInsertionRowChanging As pInsertionRowChangeEventHandler

        Public Event pInsertionRowChanged As pInsertionRowChangeEventHandler

        Public Event pInsertionRowDeleting As pInsertionRowChangeEventHandler

        Public Event pInsertionRowDeleted As pInsertionRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddpInsertionRow(ByVal row As pInsertionRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddpInsertionRow(ByVal X As Single, ByVal Y As Single, ByVal parentINSERTRowByINSERT_pInsertion As INSERTRow) As pInsertionRow
            Dim rowpInsertionRow As pInsertionRow = CType(Me.NewRow, pInsertionRow)
            rowpInsertionRow.ItemArray = New Object() {X, Y, parentINSERTRowByINSERT_pInsertion(6)}
            Me.Rows.Add(rowpInsertionRow)
            Return rowpInsertionRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pInsertionDataTable = CType(MyBase.Clone, pInsertionDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pInsertionDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnINSERT_Id = MyBase.Columns("INSERT_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnINSERT_Id = New System.Data.DataColumn("INSERT_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnINSERT_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewpInsertionRow() As pInsertionRow
            Return CType(Me.NewRow, pInsertionRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pInsertionRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pInsertionRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pInsertionRowChangedEvent) Is Nothing) Then
                RaiseEvent pInsertionRowChanged(Me, New pInsertionRowChangeEvent(CType(e.Row, pInsertionRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pInsertionRowChangingEvent) Is Nothing) Then
                RaiseEvent pInsertionRowChanging(Me, New pInsertionRowChangeEvent(CType(e.Row, pInsertionRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pInsertionRowDeletedEvent) Is Nothing) Then
                RaiseEvent pInsertionRowDeleted(Me, New pInsertionRowChangeEvent(CType(e.Row, pInsertionRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pInsertionRowDeletingEvent) Is Nothing) Then
                RaiseEvent pInsertionRowDeleting(Me, New pInsertionRowChangeEvent(CType(e.Row, pInsertionRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovepInsertionRow(ByVal row As pInsertionRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pInsertionDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class LimitesDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnLimites_Id As System.Data.DataColumn

        Private columnDXF_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "Limites"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Limites_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLimites_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property DXF_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnDXF_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As LimitesRow
            Get
                Return CType(Me.Rows(index), LimitesRow)
            End Get
        End Property

        Public Event LimitesRowChanging As LimitesRowChangeEventHandler

        Public Event LimitesRowChanged As LimitesRowChangeEventHandler

        Public Event LimitesRowDeleting As LimitesRowChangeEventHandler

        Public Event LimitesRowDeleted As LimitesRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddLimitesRow(ByVal row As LimitesRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddLimitesRow(ByVal parentDXFRowByDXF_Limites As DXFRow) As LimitesRow
            Dim rowLimitesRow As LimitesRow = CType(Me.NewRow, LimitesRow)
            rowLimitesRow.ItemArray = New Object() {Nothing, parentDXFRowByDXF_Limites(1)}
            Me.Rows.Add(rowLimitesRow)
            Return rowLimitesRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As LimitesDataTable = CType(MyBase.Clone, LimitesDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New LimitesDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnLimites_Id = MyBase.Columns("Limites_Id")
            Me.columnDXF_Id = MyBase.Columns("DXF_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnLimites_Id = New System.Data.DataColumn("Limites_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLimites_Id)
            Me.columnDXF_Id = New System.Data.DataColumn("DXF_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnDXF_Id)
            Me.Constraints.Add(New System.Data.UniqueConstraint("Constraint1", New System.Data.DataColumn() {Me.columnLimites_Id}, True))
            Me.columnLimites_Id.AutoIncrement = True
            Me.columnLimites_Id.AllowDBNull = False
            Me.columnLimites_Id.Unique = True
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewLimitesRow() As LimitesRow
            Return CType(Me.NewRow, LimitesRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New LimitesRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(LimitesRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.LimitesRowChangedEvent) Is Nothing) Then
                RaiseEvent LimitesRowChanged(Me, New LimitesRowChangeEvent(CType(e.Row, LimitesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.LimitesRowChangingEvent) Is Nothing) Then
                RaiseEvent LimitesRowChanging(Me, New LimitesRowChangeEvent(CType(e.Row, LimitesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.LimitesRowDeletedEvent) Is Nothing) Then
                RaiseEvent LimitesRowDeleted(Me, New LimitesRowChangeEvent(CType(e.Row, LimitesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.LimitesRowDeletingEvent) Is Nothing) Then
                RaiseEvent LimitesRowDeleting(Me, New LimitesRowChangeEvent(CType(e.Row, LimitesRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemoveLimitesRow(ByVal row As LimitesRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "LimitesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class pMinDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnLimites_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "pMin"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Limites_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLimites_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As pMinRow
            Get
                Return CType(Me.Rows(index), pMinRow)
            End Get
        End Property

        Public Event pMinRowChanging As pMinRowChangeEventHandler

        Public Event pMinRowChanged As pMinRowChangeEventHandler

        Public Event pMinRowDeleting As pMinRowChangeEventHandler

        Public Event pMinRowDeleted As pMinRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddpMinRow(ByVal row As pMinRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddpMinRow(ByVal X As Single, ByVal Y As Single, ByVal parentLimitesRowByLimites_pMin As LimitesRow) As pMinRow
            Dim rowpMinRow As pMinRow = CType(Me.NewRow, pMinRow)
            rowpMinRow.ItemArray = New Object() {X, Y, parentLimitesRowByLimites_pMin(0)}
            Me.Rows.Add(rowpMinRow)
            Return rowpMinRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pMinDataTable = CType(MyBase.Clone, pMinDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pMinDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnLimites_Id = MyBase.Columns("Limites_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnLimites_Id = New System.Data.DataColumn("Limites_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLimites_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewpMinRow() As pMinRow
            Return CType(Me.NewRow, pMinRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pMinRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pMinRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pMinRowChangedEvent) Is Nothing) Then
                RaiseEvent pMinRowChanged(Me, New pMinRowChangeEvent(CType(e.Row, pMinRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pMinRowChangingEvent) Is Nothing) Then
                RaiseEvent pMinRowChanging(Me, New pMinRowChangeEvent(CType(e.Row, pMinRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pMinRowDeletedEvent) Is Nothing) Then
                RaiseEvent pMinRowDeleted(Me, New pMinRowChangeEvent(CType(e.Row, pMinRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pMinRowDeletingEvent) Is Nothing) Then
                RaiseEvent pMinRowDeleting(Me, New pMinRowChangeEvent(CType(e.Row, pMinRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovepMinRow(ByVal row As pMinRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pMinDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class

    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"), _
     System.Serializable(), _
     System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")> _
    Partial Public Class pMaxDataTable
        Inherits System.Data.DataTable
        Implements System.Collections.IEnumerable

        Private columnX As System.Data.DataColumn

        Private columnY As System.Data.DataColumn

        Private columnLimites_Id As System.Data.DataColumn

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub New()
            MyBase.New()
            Me.TableName = "pMax"
            Me.BeginInit()
            Me.InitClass()
            Me.EndInit()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub New(ByVal table As System.Data.DataTable)
            MyBase.New()
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Sub New(ByVal info As System.Runtime.Serialization.SerializationInfo, ByVal context As System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars()
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property XColumn() As System.Data.DataColumn
            Get
                Return Me.columnX
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property YColumn() As System.Data.DataColumn
            Get
                Return Me.columnY
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public ReadOnly Property Limites_IdColumn() As System.Data.DataColumn
            Get
                Return Me.columnLimites_Id
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         System.ComponentModel.Browsable(False)> _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Default Public ReadOnly Property Item(ByVal index As Integer) As pMaxRow
            Get
                Return CType(Me.Rows(index), pMaxRow)
            End Get
        End Property

        Public Event pMaxRowChanging As pMaxRowChangeEventHandler

        Public Event pMaxRowChanged As pMaxRowChangeEventHandler

        Public Event pMaxRowDeleting As pMaxRowChangeEventHandler

        Public Event pMaxRowDeleted As pMaxRowChangeEventHandler

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Sub AddpMaxRow(ByVal row As pMaxRow)
            Me.Rows.Add(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overloads Function AddpMaxRow(ByVal X As Single, ByVal Y As Single, ByVal parentLimitesRowByLimites_pMax As LimitesRow) As pMaxRow
            Dim rowpMaxRow As pMaxRow = CType(Me.NewRow, pMaxRow)
            rowpMaxRow.ItemArray = New Object() {X, Y, parentLimitesRowByLimites_pMax(0)}
            Me.Rows.Add(rowpMaxRow)
            Return rowpMaxRow
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overridable Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Overrides Function Clone() As System.Data.DataTable
            Dim cln As pMaxDataTable = CType(MyBase.Clone, pMaxDataTable)
            cln.InitVars()
            Return cln
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function CreateInstance() As System.Data.DataTable
            Return New pMaxDataTable
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Friend Sub InitVars()
            Me.columnX = MyBase.Columns("X")
            Me.columnY = MyBase.Columns("Y")
            Me.columnLimites_Id = MyBase.Columns("Limites_Id")
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Private Sub InitClass()
            Me.columnX = New System.Data.DataColumn("X", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnX)
            Me.columnY = New System.Data.DataColumn("Y", GetType(Single), Nothing, System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnY)
            Me.columnLimites_Id = New System.Data.DataColumn("Limites_Id", GetType(Integer), Nothing, System.Data.MappingType.Hidden)
            MyBase.Columns.Add(Me.columnLimites_Id)
            Me.columnX.AllowDBNull = False
            Me.columnY.AllowDBNull = False
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Function NewpMaxRow() As pMaxRow
            Return CType(Me.NewRow, pMaxRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As System.Data.DataRowBuilder) As System.Data.DataRow
            Return New pMaxRow(builder)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(pMaxRow)
        End Function

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanged(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.pMaxRowChangedEvent) Is Nothing) Then
                RaiseEvent pMaxRowChanged(Me, New pMaxRowChangeEvent(CType(e.Row, pMaxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowChanging(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.pMaxRowChangingEvent) Is Nothing) Then
                RaiseEvent pMaxRowChanging(Me, New pMaxRowChangeEvent(CType(e.Row, pMaxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleted(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.pMaxRowDeletedEvent) Is Nothing) Then
                RaiseEvent pMaxRowDeleted(Me, New pMaxRowChangeEvent(CType(e.Row, pMaxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Protected Overrides Sub OnRowDeleting(ByVal e As System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.pMaxRowDeletingEvent) Is Nothing) Then
                RaiseEvent pMaxRowDeleting(Me, New pMaxRowChangeEvent(CType(e.Row, pMaxRow), e.Action))
            End If
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Sub RemovepMaxRow(ByVal row As pMaxRow)
            Me.Rows.Remove(row)
        End Sub

        <System.Diagnostics.DebuggerNonUserCodeAttribute()> _
        Public Shared Function GetTypedTableSchema(ByVal xs As System.Xml.Schema.XmlSchemaSet) As System.Xml.Schema.XmlSchemaComplexType
            Dim type As System.Xml.Schema.XmlSchemaComplexType = New System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As System.Xml.Schema.XmlSchemaSequence = New System.Xml.Schema.XmlSchemaSequence
            Dim ds As DataSetDiagFeux = New DataSetDiagFeux
            xs.Add(ds.GetSchemaSerializable)
            Dim any1 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As System.Xml.Schema.XmlSchemaAny = New System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As System.Xml.Schema.XmlSchemaAttribute = New System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "pMaxDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Return type
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SchémaACONDIARow
        Inherits System.Data.DataRow
        
        Private tableSchémaACONDIA As SchémaACONDIADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSchémaACONDIA = CType(Me.Table,SchémaACONDIADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIA_Id() As Integer
            Get
                Return CType(Me(Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableSchémaACONDIA.SchémaACONDIA_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetParamétrageRows() As ParamétrageRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SchémaACONDIA_Paramétrage")),ParamétrageRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetParamFixeRows() As ParamFixeRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SchémaACONDIA_ParamFixe")),ParamFixeRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTableCycleCapacitéRows() As TableCycleCapacitéRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SchémaACONDIA_TableCycleCapacité")),TableCycleCapacitéRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCarrefourRows() As CarrefourRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SchémaACONDIA_Carrefour")),CarrefourRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDXFRows() As DXFRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SchémaACONDIA_DXF")),DXFRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParamétrageRow
        Inherits System.Data.DataRow
        
        Private tableParamétrage As ParamétrageDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParamétrage = CType(Me.Table,ParamétrageDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Version() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.VersionColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Version' dans la table 'Paramétrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.VersionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Organisme() As String
            Get
                Return CType(Me(Me.tableParamétrage.OrganismeColumn),String)
            End Get
            Set
                Me(Me.tableParamétrage.OrganismeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Service() As String
            Get
                Return CType(Me(Me.tableParamétrage.ServiceColumn),String)
            End Get
            Set
                Me(Me.tableParamétrage.ServiceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Stockage() As String
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.StockageColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Stockage' dans la table 'Paramétrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.StockageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Logo() As String
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.LogoColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Logo' dans la table 'Paramétrage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.LogoColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VitessePiétons() As Decimal
            Get
                Return CType(Me(Me.tableParamétrage.VitessePiétonsColumn),Decimal)
            End Get
            Set
                Me(Me.tableParamétrage.VitessePiétonsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VitesseVéhicules() As Decimal
            Get
                Return CType(Me(Me.tableParamétrage.VitesseVéhiculesColumn),Decimal)
            End Get
            Set
                Me(Me.tableParamétrage.VitesseVéhiculesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VitesseVélos() As Decimal
            Get
                Return CType(Me(Me.tableParamétrage.VitesseVélosColumn),Decimal)
            End Get
            Set
                Me(Me.tableParamétrage.VitesseVélosColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DébitSaturation() As Short
            Get
                Return CType(Me(Me.tableParamétrage.DébitSaturationColumn),Short)
            End Get
            Set
                Me(Me.tableParamétrage.DébitSaturationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TempsPerduDémarrage() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.TempsPerduDémarrageColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TempsPerduDémarrage' dans la table 'Paramétrage' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.TempsPerduDémarrageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TempsPerduDémarrageCampagne() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.TempsPerduDémarrageCampagneColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TempsPerduDémarrageCampagne' dans la table 'Paramétrag"& _ 
                            "e' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.TempsPerduDémarrageCampagneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JauneInutiliséAgglo() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.JauneInutiliséAggloColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'JauneInutiliséAgglo' dans la table 'Paramétrage' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.JauneInutiliséAggloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JauneInutiliséCampagne() As Short
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.JauneInutiliséCampagneColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'JauneInutiliséCampagne' dans la table 'Paramétrage' es"& _ 
                            "t DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.JauneInutiliséCampagneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SignalPiétonsSonore() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.SignalPiétonsSonoreColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SignalPiétonsSonore' dans la table 'Paramétrage' est D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.SignalPiétonsSonoreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIA_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParamétrage.SchémaACONDIA_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SchémaACONDIA_Id' dans la table 'Paramétrage' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamétrage.SchémaACONDIA_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIARow() As SchémaACONDIARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SchémaACONDIA_Paramétrage")),SchémaACONDIARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SchémaACONDIA_Paramétrage"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVersionNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.VersionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVersionNull()
            Me(Me.tableParamétrage.VersionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStockageNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.StockageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStockageNull()
            Me(Me.tableParamétrage.StockageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLogoNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.LogoColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLogoNull()
            Me(Me.tableParamétrage.LogoColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTempsPerduDémarrageNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.TempsPerduDémarrageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTempsPerduDémarrageNull()
            Me(Me.tableParamétrage.TempsPerduDémarrageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTempsPerduDémarrageCampagneNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.TempsPerduDémarrageCampagneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTempsPerduDémarrageCampagneNull()
            Me(Me.tableParamétrage.TempsPerduDémarrageCampagneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJauneInutiliséAggloNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.JauneInutiliséAggloColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJauneInutiliséAggloNull()
            Me(Me.tableParamétrage.JauneInutiliséAggloColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJauneInutiliséCampagneNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.JauneInutiliséCampagneColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJauneInutiliséCampagneNull()
            Me(Me.tableParamétrage.JauneInutiliséCampagneColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSignalPiétonsSonoreNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.SignalPiétonsSonoreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSignalPiétonsSonoreNull()
            Me(Me.tableParamétrage.SignalPiétonsSonoreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchémaACONDIA_IdNull() As Boolean
            Return Me.IsNull(Me.tableParamétrage.SchémaACONDIA_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchémaACONDIA_IdNull()
            Me(Me.tableParamétrage.SchémaACONDIA_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParamFixeRow
        Inherits System.Data.DataRow
        
        Private tableParamFixe As ParamFixeDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParamFixe = CType(Me.Table,ParamFixeDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VertMini() As Short
            Get
                Return CType(Me(Me.tableParamFixe.VertMiniColumn),Short)
            End Get
            Set
                Me(Me.tableParamFixe.VertMiniColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VertMiniVeh() As Short
            Get
                Return CType(Me(Me.tableParamFixe.VertMiniVehColumn),Short)
            End Get
            Set
                Me(Me.tableParamFixe.VertMiniVehColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JauneAgglo() As Short
            Get
                Return CType(Me(Me.tableParamFixe.JauneAggloColumn),Short)
            End Get
            Set
                Me(Me.tableParamFixe.JauneAggloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JauneHorsAgglo() As Short
            Get
                Return CType(Me(Me.tableParamFixe.JauneHorsAggloColumn),Short)
            End Get
            Set
                Me(Me.tableParamFixe.JauneHorsAggloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EqvUVP2R() As Decimal
            Get
                Return CType(Me(Me.tableParamFixe.EqvUVP2RColumn),Decimal)
            End Get
            Set
                Me(Me.tableParamFixe.EqvUVP2RColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EqvUVPPL() As Short
            Get
                Return CType(Me(Me.tableParamFixe.EqvUVPPLColumn),Short)
            End Get
            Set
                Me(Me.tableParamFixe.EqvUVPPLColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MiniRouge() As Short
            Get
                Return CType(Me(Me.tableParamFixe.MiniRougeColumn),Short)
            End Get
            Set
                Me(Me.tableParamFixe.MiniRougeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TempsPerdu() As Short
            Get
                Return CType(Me(Me.tableParamFixe.TempsPerduColumn),Short)
            End Get
            Set
                Me(Me.tableParamFixe.TempsPerduColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TempsMaxAttente() As Short
            Get
                Return CType(Me(Me.tableParamFixe.TempsMaxAttenteColumn),Short)
            End Get
            Set
                Me(Me.tableParamFixe.TempsMaxAttenteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIA_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParamFixe.SchémaACONDIA_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SchémaACONDIA_Id' dans la table 'ParamFixe' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableParamFixe.SchémaACONDIA_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIARow() As SchémaACONDIARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SchémaACONDIA_ParamFixe")),SchémaACONDIARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SchémaACONDIA_ParamFixe"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchémaACONDIA_IdNull() As Boolean
            Return Me.IsNull(Me.tableParamFixe.SchémaACONDIA_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchémaACONDIA_IdNull()
            Me(Me.tableParamFixe.SchémaACONDIA_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TableCycleCapacitéRow
        Inherits System.Data.DataRow
        
        Private tableTableCycleCapacité As TableCycleCapacitéDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTableCycleCapacité = CType(Me.Table,TableCycleCapacitéDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DuréeCycleMini() As Short
            Get
                Return CType(Me(Me.tableTableCycleCapacité.DuréeCycleMiniColumn),Short)
            End Get
            Set
                Me(Me.tableTableCycleCapacité.DuréeCycleMiniColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TempsPerduMini() As Short
            Get
                Return CType(Me(Me.tableTableCycleCapacité.TempsPerduMiniColumn),Short)
            End Get
            Set
                Me(Me.tableTableCycleCapacité.TempsPerduMiniColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableCycleCapacité_Id() As Integer
            Get
                Return CType(Me(Me.tableTableCycleCapacité.TableCycleCapacité_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableTableCycleCapacité.TableCycleCapacité_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIA_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTableCycleCapacité.SchémaACONDIA_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SchémaACONDIA_Id' dans la table 'TableCycleCapacité' e"& _ 
                            "st DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTableCycleCapacité.SchémaACONDIA_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIARow() As SchémaACONDIARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SchémaACONDIA_TableCycleCapacité")),SchémaACONDIARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SchémaACONDIA_TableCycleCapacité"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchémaACONDIA_IdNull() As Boolean
            Return Me.IsNull(Me.tableTableCycleCapacité.SchémaACONDIA_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchémaACONDIA_IdNull()
            Me(Me.tableTableCycleCapacité.SchémaACONDIA_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDuréeCycleRows() As DuréeCycleRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("TableCycleCapacité_DuréeCycle")),DuréeCycleRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DuréeCycleRow
        Inherits System.Data.DataRow
        
        Private tableDuréeCycle As DuréeCycleDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDuréeCycle = CType(Me.Table,DuréeCycleDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DuréeCycle_Id() As Integer
            Get
                Return CType(Me(Me.tableDuréeCycle.DuréeCycle_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableDuréeCycle.DuréeCycle_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableCycleCapacité_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDuréeCycle.TableCycleCapacité_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TableCycleCapacité_Id' dans la table 'DuréeCycle' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDuréeCycle.TableCycleCapacité_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableCycleCapacitéRow() As TableCycleCapacitéRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("TableCycleCapacité_DuréeCycle")),TableCycleCapacitéRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("TableCycleCapacité_DuréeCycle"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTableCycleCapacité_IdNull() As Boolean
            Return Me.IsNull(Me.tableDuréeCycle.TableCycleCapacité_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTableCycleCapacité_IdNull()
            Me(Me.tableDuréeCycle.TableCycleCapacité_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetDemandeCarrefourRows() As DemandeCarrefourRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("DuréeCycle_DemandeCarrefour")),DemandeCarrefourRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DemandeCarrefourRow
        Inherits System.Data.DataRow
        
        Private tableDemandeCarrefour As DemandeCarrefourDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDemandeCarrefour = CType(Me.Table,DemandeCarrefourDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DemandeCarrefour_Column() As Short
            Get
                Return CType(Me(Me.tableDemandeCarrefour.DemandeCarrefour_ColumnColumn),Short)
            End Get
            Set
                Me(Me.tableDemandeCarrefour.DemandeCarrefour_ColumnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DuréeCycle_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDemandeCarrefour.DuréeCycle_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DuréeCycle_Id' dans la table 'DemandeCarrefour' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableDemandeCarrefour.DuréeCycle_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DuréeCycleRow() As DuréeCycleRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DuréeCycle_DemandeCarrefour")),DuréeCycleRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DuréeCycle_DemandeCarrefour"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDuréeCycle_IdNull() As Boolean
            Return Me.IsNull(Me.tableDemandeCarrefour.DuréeCycle_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDuréeCycle_IdNull()
            Me(Me.tableDemandeCarrefour.DuréeCycle_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CarrefourRow
        Inherits System.Data.DataRow
        
        Private tableCarrefour As CarrefourDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCarrefour = CType(Me.Table,CarrefourDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Carrefour_Id() As Integer
            Get
                Return CType(Me(Me.tableCarrefour.Carrefour_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCarrefour.Carrefour_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIA_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCarrefour.SchémaACONDIA_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SchémaACONDIA_Id' dans la table 'Carrefour' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableCarrefour.SchémaACONDIA_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIARow() As SchémaACONDIARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SchémaACONDIA_Carrefour")),SchémaACONDIARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SchémaACONDIA_Carrefour"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchémaACONDIA_IdNull() As Boolean
            Return Me.IsNull(Me.tableCarrefour.SchémaACONDIA_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchémaACONDIA_IdNull()
            Me(Me.tableCarrefour.SchémaACONDIA_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVarianteRows() As VarianteRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Carrefour_Variante")),VarianteRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPropriétésRows() As PropriétésRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Carrefour_Propriétés")),PropriétésRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VarianteRow
        Inherits System.Data.DataRow
        
        Private tableVariante As VarianteDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVariante = CType(Me.Table,VarianteDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeuxCourant() As String
            Get
                Try 
                    Return CType(Me(Me.tableVariante.PlanFeuxCourantColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PlanFeuxCourant' dans la table 'Variante' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVariante.PlanFeuxCourantColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModeGraphique() As Boolean
            Get
                Return CType(Me(Me.tableVariante.ModeGraphiqueColumn),Boolean)
            End Get
            Set
                Me(Me.tableVariante.ModeGraphiqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Verrou() As Short
            Get
                Return CType(Me(Me.tableVariante.VerrouColumn),Short)
            End Get
            Set
                Me(Me.tableVariante.VerrouColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VertMiniVéhicules() As Short
            Get
                Try 
                    Return CType(Me(Me.tableVariante.VertMiniVéhiculesColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'VertMiniVéhicules' dans la table 'Variante' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVariante.VertMiniVéhiculesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VertMiniPiétons() As Short
            Get
                Try 
                    Return CType(Me(Me.tableVariante.VertMiniPiétonsColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'VertMiniPiétons' dans la table 'Variante' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVariante.VertMiniPiétonsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Return CType(Me(Me.tableVariante.Variante_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableVariante.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Carrefour_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVariante.Carrefour_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Carrefour_Id' dans la table 'Variante' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVariante.Carrefour_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CarrefourRow() As CarrefourRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Carrefour_Variante")),CarrefourRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Carrefour_Variante"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlanFeuxCourantNull() As Boolean
            Return Me.IsNull(Me.tableVariante.PlanFeuxCourantColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlanFeuxCourantNull()
            Me(Me.tableVariante.PlanFeuxCourantColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVertMiniVéhiculesNull() As Boolean
            Return Me.IsNull(Me.tableVariante.VertMiniVéhiculesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVertMiniVéhiculesNull()
            Me(Me.tableVariante.VertMiniVéhiculesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVertMiniPiétonsNull() As Boolean
            Return Me.IsNull(Me.tableVariante.VertMiniPiétonsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVertMiniPiétonsNull()
            Me(Me.tableVariante.VertMiniPiétonsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCarrefour_IdNull() As Boolean
            Return Me.IsNull(Me.tableVariante.Carrefour_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCarrefour_IdNull()
            Me(Me.tableVariante.Carrefour_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetParamDessinRows() As ParamDessinRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_ParamDessin")),ParamDessinRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAffichageRows() As AffichageRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_Affichage")),AffichageRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetFondPlanRows() As FondPlanRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_FondPlan")),FondPlanRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetBrancheRows() As BrancheRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_Branche")),BrancheRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLigneDeFeuxRows() As LigneDeFeuxRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_LigneDeFeux")),LigneDeFeuxRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTrajectoireRows() As TrajectoireRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_Trajectoire")),TrajectoireRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetAntagonismeRows() As AntagonismeRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_Antagonisme")),AntagonismeRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPlanFeuxRows() As PlanFeuxRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_PlanFeux")),PlanFeuxRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTraficRows() As TraficRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Variante_Trafic")),TraficRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ParamDessinRow
        Inherits System.Data.DataRow
        
        Private tableParamDessin As ParamDessinDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableParamDessin = CType(Me.Table,ParamDessinDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Echelle() As Single
            Get
                Return CType(Me(Me.tableParamDessin.EchelleColumn),Single)
            End Get
            Set
                Me(Me.tableParamDessin.EchelleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParamDessin_Id() As Integer
            Get
                Return CType(Me(Me.tableParamDessin.ParamDessin_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableParamDessin.ParamDessin_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableParamDessin.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'ParamDessin' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableParamDessin.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_ParamDessin")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_ParamDessin"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tableParamDessin.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tableParamDessin.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetOrigineReelleRows() As OrigineReelleRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ParamDessin_OrigineReelle")),OrigineReelleRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTailleRows() As TailleRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ParamDessin_Taille")),TailleRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrigineReelleRow
        Inherits System.Data.DataRow
        
        Private tableOrigineReelle As OrigineReelleDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrigineReelle = CType(Me.Table,OrigineReelleDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tableOrigineReelle.XColumn),Single)
            End Get
            Set
                Me(Me.tableOrigineReelle.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tableOrigineReelle.YColumn),Single)
            End Get
            Set
                Me(Me.tableOrigineReelle.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParamDessin_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrigineReelle.ParamDessin_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'ParamDessin_Id' dans la table 'OrigineReelle' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrigineReelle.ParamDessin_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParamDessinRow() As ParamDessinRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ParamDessin_OrigineReelle")),ParamDessinRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ParamDessin_OrigineReelle"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParamDessin_IdNull() As Boolean
            Return Me.IsNull(Me.tableOrigineReelle.ParamDessin_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParamDessin_IdNull()
            Me(Me.tableOrigineReelle.ParamDessin_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TailleRow
        Inherits System.Data.DataRow
        
        Private tableTaille As TailleDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTaille = CType(Me.Table,TailleDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Short
            Get
                Return CType(Me(Me.tableTaille.XColumn),Short)
            End Get
            Set
                Me(Me.tableTaille.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Short
            Get
                Return CType(Me(Me.tableTaille.YColumn),Short)
            End Get
            Set
                Me(Me.tableTaille.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParamDessin_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTaille.ParamDessin_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'ParamDessin_Id' dans la table 'Taille' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTaille.ParamDessin_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParamDessinRow() As ParamDessinRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ParamDessin_Taille")),ParamDessinRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ParamDessin_Taille"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParamDessin_IdNull() As Boolean
            Return Me.IsNull(Me.tableTaille.ParamDessin_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParamDessin_IdNull()
            Me(Me.tableTaille.ParamDessin_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AffichageRow
        Inherits System.Data.DataRow
        
        Private tableAffichage As AffichageDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAffichage = CType(Me.Table,AffichageDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SensTrajectoires() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAffichage.SensTrajectoiresColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SensTrajectoires' dans la table 'Affichage' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableAffichage.SensTrajectoiresColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SensCirculation() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableAffichage.SensCirculationColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SensCirculation' dans la table 'Affichage' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableAffichage.SensCirculationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Affichage_Id() As Integer
            Get
                Return CType(Me(Me.tableAffichage.Affichage_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableAffichage.Affichage_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAffichage.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'Affichage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAffichage.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_Affichage")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_Affichage"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSensTrajectoiresNull() As Boolean
            Return Me.IsNull(Me.tableAffichage.SensTrajectoiresColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSensTrajectoiresNull()
            Me(Me.tableAffichage.SensTrajectoiresColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSensCirculationNull() As Boolean
            Return Me.IsNull(Me.tableAffichage.SensCirculationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSensCirculationNull()
            Me(Me.tableAffichage.SensCirculationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tableAffichage.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tableAffichage.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetNordRows() As NordRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Affichage_Nord")),NordRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSymEchelleRows() As SymEchelleRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Affichage_SymEchelle")),SymEchelleRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class NordRow
        Inherits System.Data.DataRow
        
        Private tableNord As NordDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableNord = CType(Me.Table,NordDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rotation() As Single
            Get
                Return CType(Me(Me.tableNord.RotationColumn),Single)
            End Get
            Set
                Me(Me.tableNord.RotationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Visible() As Boolean
            Get
                Return CType(Me(Me.tableNord.VisibleColumn),Boolean)
            End Get
            Set
                Me(Me.tableNord.VisibleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nord_Id() As Integer
            Get
                Return CType(Me(Me.tableNord.Nord_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableNord.Nord_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Affichage_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableNord.Affichage_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Affichage_Id' dans la table 'Nord' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableNord.Affichage_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AffichageRow() As AffichageRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Affichage_Nord")),AffichageRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Affichage_Nord"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAffichage_IdNull() As Boolean
            Return Me.IsNull(Me.tableNord.Affichage_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAffichage_IdNull()
            Me(Me.tableNord.Affichage_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpNordRows() As pNordRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Nord_pNord")),pNordRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pNordRow
        Inherits System.Data.DataRow
        
        Private tablepNord As pNordDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepNord = CType(Me.Table,pNordDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Short
            Get
                Return CType(Me(Me.tablepNord.XColumn),Short)
            End Get
            Set
                Me(Me.tablepNord.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Short
            Get
                Return CType(Me(Me.tablepNord.YColumn),Short)
            End Get
            Set
                Me(Me.tablepNord.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nord_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepNord.Nord_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Nord_Id' dans la table 'pNord' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepNord.Nord_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NordRow() As NordRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Nord_pNord")),NordRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Nord_pNord"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNord_IdNull() As Boolean
            Return Me.IsNull(Me.tablepNord.Nord_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNord_IdNull()
            Me(Me.tablepNord.Nord_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SymEchelleRow
        Inherits System.Data.DataRow
        
        Private tableSymEchelle As SymEchelleDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSymEchelle = CType(Me.Table,SymEchelleDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Visible() As Boolean
            Get
                Return CType(Me(Me.tableSymEchelle.VisibleColumn),Boolean)
            End Get
            Set
                Me(Me.tableSymEchelle.VisibleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SymEchelle_Id() As Integer
            Get
                Return CType(Me(Me.tableSymEchelle.SymEchelle_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableSymEchelle.SymEchelle_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Affichage_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSymEchelle.Affichage_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Affichage_Id' dans la table 'SymEchelle' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSymEchelle.Affichage_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AffichageRow() As AffichageRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Affichage_SymEchelle")),AffichageRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Affichage_SymEchelle"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAffichage_IdNull() As Boolean
            Return Me.IsNull(Me.tableSymEchelle.Affichage_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAffichage_IdNull()
            Me(Me.tableSymEchelle.Affichage_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpSymEchelleRows() As pSymEchelleRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SymEchelle_pSymEchelle")),pSymEchelleRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pSymEchelleRow
        Inherits System.Data.DataRow
        
        Private tablepSymEchelle As pSymEchelleDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepSymEchelle = CType(Me.Table,pSymEchelleDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Short
            Get
                Return CType(Me(Me.tablepSymEchelle.XColumn),Short)
            End Get
            Set
                Me(Me.tablepSymEchelle.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Short
            Get
                Return CType(Me(Me.tablepSymEchelle.YColumn),Short)
            End Get
            Set
                Me(Me.tablepSymEchelle.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SymEchelle_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepSymEchelle.SymEchelle_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SymEchelle_Id' dans la table 'pSymEchelle' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablepSymEchelle.SymEchelle_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SymEchelleRow() As SymEchelleRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SymEchelle_pSymEchelle")),SymEchelleRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SymEchelle_pSymEchelle"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSymEchelle_IdNull() As Boolean
            Return Me.IsNull(Me.tablepSymEchelle.SymEchelle_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSymEchelle_IdNull()
            Me(Me.tablepSymEchelle.SymEchelle_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class FondPlanRow
        Inherits System.Data.DataRow
        
        Private tableFondPlan As FondPlanDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableFondPlan = CType(Me.Table,FondPlanDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Return CType(Me(Me.tableFondPlan.NomColumn),String)
            End Get
            Set
                Me(Me.tableFondPlan.NomColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Echelle() As Short
            Get
                Return CType(Me(Me.tableFondPlan.EchelleColumn),Short)
            End Get
            Set
                Me(Me.tableFondPlan.EchelleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EstDXF() As Boolean
            Get
                Return CType(Me(Me.tableFondPlan.EstDXFColumn),Boolean)
            End Get
            Set
                Me(Me.tableFondPlan.EstDXFColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rotation() As Short
            Get
                Try 
                    Return CType(Me(Me.tableFondPlan.RotationColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Rotation' dans la table 'FondPlan' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFondPlan.RotationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FondPlan_Id() As Integer
            Get
                Return CType(Me(Me.tableFondPlan.FondPlan_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableFondPlan.FondPlan_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableFondPlan.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'FondPlan' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableFondPlan.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_FondPlan")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_FondPlan"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRotationNull() As Boolean
            Return Me.IsNull(Me.tableFondPlan.RotationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRotationNull()
            Me(Me.tableFondPlan.RotationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tableFondPlan.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tableFondPlan.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetMonDXFRows() As MonDXFRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FondPlan_MonDXF")),MonDXFRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class MonDXFRow
        Inherits System.Data.DataRow
        
        Private tableMonDXF As MonDXFDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableMonDXF = CType(Me.Table,MonDXFDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ds() As String
            Get
                Try 
                    Return CType(Me(Me.tableMonDXF.dsColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'ds' dans la table 'MonDXF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMonDXF.dsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FondPlan_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableMonDXF.FondPlan_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'FondPlan_Id' dans la table 'MonDXF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableMonDXF.FondPlan_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FondPlanRow() As FondPlanRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FondPlan_MonDXF")),FondPlanRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FondPlan_MonDXF"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsdsNull() As Boolean
            Return Me.IsNull(Me.tableMonDXF.dsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetdsNull()
            Me(Me.tableMonDXF.dsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFondPlan_IdNull() As Boolean
            Return Me.IsNull(Me.tableMonDXF.FondPlan_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFondPlan_IdNull()
            Me(Me.tableMonDXF.FondPlan_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BrancheRow
        Inherits System.Data.DataRow
        
        Private tableBranche As BrancheDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBranche = CType(Me.Table,BrancheDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Angle() As Short
            Get
                Return CType(Me(Me.tableBranche.AngleColumn),Short)
            End Get
            Set
                Me(Me.tableBranche.AngleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LargeurVoies() As Single
            Get
                Return CType(Me(Me.tableBranche.LargeurVoiesColumn),Single)
            End Get
            Set
                Me(Me.tableBranche.LargeurVoiesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Longueur() As Short
            Get
                Return CType(Me(Me.tableBranche.LongueurColumn),Short)
            End Get
            Set
                Me(Me.tableBranche.LongueurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomRue() As String
            Get
                Try 
                    Return CType(Me(Me.tableBranche.NomRueColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'NomRue' dans la table 'Branche' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBranche.NomRueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Branche_Id() As Integer
            Get
                Return CType(Me(Me.tableBranche.Branche_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableBranche.Branche_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBranche.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'Branche' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBranche.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_Branche")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_Branche"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomRueNull() As Boolean
            Return Me.IsNull(Me.tableBranche.NomRueColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomRueNull()
            Me(Me.tableBranche.NomRueColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tableBranche.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tableBranche.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIlotRows() As IlotRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Branche_Ilot")),IlotRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVoieRows() As VoieRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Branche_Voie")),VoieRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetptFlechesTraficRows() As ptFlechesTraficRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Branche_ptFlechesTrafic")),ptFlechesTraficRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetOrigineRows() As OrigineRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Branche_Origine")),OrigineRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPassageRows() As PassageRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Branche_Passage")),PassageRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IlotRow
        Inherits System.Data.DataRow
        
        Private tableIlot As IlotDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIlot = CType(Me.Table,IlotDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Largeur() As Single
            Get
                Return CType(Me(Me.tableIlot.LargeurColumn),Single)
            End Get
            Set
                Me(Me.tableIlot.LargeurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rayon() As Single
            Get
                Return CType(Me(Me.tableIlot.RayonColumn),Single)
            End Get
            Set
                Me(Me.tableIlot.RayonColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Décalage() As Single
            Get
                Return CType(Me(Me.tableIlot.DécalageColumn),Single)
            End Get
            Set
                Me(Me.tableIlot.DécalageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Retrait() As Single
            Get
                Return CType(Me(Me.tableIlot.RetraitColumn),Single)
            End Get
            Set
                Me(Me.tableIlot.RetraitColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Branche_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIlot.Branche_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Branche_Id' dans la table 'Ilot' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIlot.Branche_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrancheRow() As BrancheRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Branche_Ilot")),BrancheRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Branche_Ilot"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBranche_IdNull() As Boolean
            Return Me.IsNull(Me.tableIlot.Branche_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBranche_IdNull()
            Me(Me.tableIlot.Branche_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VoieRow
        Inherits System.Data.DataRow
        
        Private tableVoie As VoieDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVoie = CType(Me.Table,VoieDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Entrante() As Boolean
            Get
                Return CType(Me(Me.tableVoie.EntranteColumn),Boolean)
            End Get
            Set
                Me(Me.tableVoie.EntranteColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Voie_text() As Short
            Get
                Return CType(Me(Me.tableVoie.Voie_textColumn),Short)
            End Get
            Set
                Me(Me.tableVoie.Voie_textColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Branche_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVoie.Branche_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Branche_Id' dans la table 'Voie' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVoie.Branche_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrancheRow() As BrancheRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Branche_Voie")),BrancheRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Branche_Voie"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBranche_IdNull() As Boolean
            Return Me.IsNull(Me.tableVoie.Branche_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBranche_IdNull()
            Me(Me.tableVoie.Branche_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ptFlechesTraficRow
        Inherits System.Data.DataRow
        
        Private tableptFlechesTrafic As ptFlechesTraficDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableptFlechesTrafic = CType(Me.Table,ptFlechesTraficDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Short
            Get
                Return CType(Me(Me.tableptFlechesTrafic.XColumn),Short)
            End Get
            Set
                Me(Me.tableptFlechesTrafic.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Short
            Get
                Return CType(Me(Me.tableptFlechesTrafic.YColumn),Short)
            End Get
            Set
                Me(Me.tableptFlechesTrafic.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Branche_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableptFlechesTrafic.Branche_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Branche_Id' dans la table 'ptFlechesTrafic' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableptFlechesTrafic.Branche_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrancheRow() As BrancheRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Branche_ptFlechesTrafic")),BrancheRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Branche_ptFlechesTrafic"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBranche_IdNull() As Boolean
            Return Me.IsNull(Me.tableptFlechesTrafic.Branche_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBranche_IdNull()
            Me(Me.tableptFlechesTrafic.Branche_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrigineRow
        Inherits System.Data.DataRow
        
        Private tableOrigine As OrigineDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrigine = CType(Me.Table,OrigineDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tableOrigine.XColumn),Single)
            End Get
            Set
                Me(Me.tableOrigine.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tableOrigine.YColumn),Single)
            End Get
            Set
                Me(Me.tableOrigine.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Branche_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrigine.Branche_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Branche_Id' dans la table 'Origine' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrigine.Branche_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrancheRow() As BrancheRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Branche_Origine")),BrancheRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Branche_Origine"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBranche_IdNull() As Boolean
            Return Me.IsNull(Me.tableOrigine.Branche_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBranche_IdNull()
            Me(Me.tableOrigine.Branche_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PassageRow
        Inherits System.Data.DataRow
        
        Private tablePassage As PassageDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePassage = CType(Me.Table,PassageDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Passage_Id() As Integer
            Get
                Return CType(Me(Me.tablePassage.Passage_IdColumn),Integer)
            End Get
            Set
                Me(Me.tablePassage.Passage_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Branche_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePassage.Branche_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Branche_Id' dans la table 'Passage' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePassage.Branche_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BrancheRow() As BrancheRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Branche_Passage")),BrancheRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Branche_Passage"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBranche_IdNull() As Boolean
            Return Me.IsNull(Me.tablePassage.Branche_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBranche_IdNull()
            Me(Me.tablePassage.Branche_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPointRows() As PointRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Passage_Point")),PointRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVoieIntersecteeRows() As VoieIntersecteeRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Passage_VoieIntersectee")),VoieIntersecteeRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PointRow
        Inherits System.Data.DataRow
        
        Private tablePoint As PointDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePoint = CType(Me.Table,PointDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tablePoint.XColumn),Single)
            End Get
            Set
                Me(Me.tablePoint.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tablePoint.YColumn),Single)
            End Get
            Set
                Me(Me.tablePoint.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Passage_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePoint.Passage_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Passage_Id' dans la table 'Point' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePoint.Passage_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PassageRow() As PassageRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Passage_Point")),PassageRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Passage_Point"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPassage_IdNull() As Boolean
            Return Me.IsNull(Me.tablePoint.Passage_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPassage_IdNull()
            Me(Me.tablePoint.Passage_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VoieIntersecteeRow
        Inherits System.Data.DataRow
        
        Private tableVoieIntersectee As VoieIntersecteeDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVoieIntersectee = CType(Me.Table,VoieIntersecteeDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoieIntersectee_Column() As Short
            Get
                Return CType(Me(Me.tableVoieIntersectee.VoieIntersectee_ColumnColumn),Short)
            End Get
            Set
                Me(Me.tableVoieIntersectee.VoieIntersectee_ColumnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Passage_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVoieIntersectee.Passage_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Passage_Id' dans la table 'VoieIntersectee' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tableVoieIntersectee.Passage_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PassageRow() As PassageRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Passage_VoieIntersectee")),PassageRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Passage_VoieIntersectee"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPassage_IdNull() As Boolean
            Return Me.IsNull(Me.tableVoieIntersectee.Passage_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPassage_IdNull()
            Me(Me.tableVoieIntersectee.Passage_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LigneDeFeuxRow
        Inherits System.Data.DataRow
        
        Private tableLigneDeFeux As LigneDeFeuxDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLigneDeFeux = CType(Me.Table,LigneDeFeuxDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Return CType(Me(Me.tableLigneDeFeux.IDColumn),String)
            End Get
            Set
                Me(Me.tableLigneDeFeux.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumBranche() As Short
            Get
                Return CType(Me(Me.tableLigneDeFeux.NumBrancheColumn),Short)
            End Get
            Set
                Me(Me.tableLigneDeFeux.NumBrancheColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Décalage() As Single
            Get
                Try 
                    Return CType(Me(Me.tableLigneDeFeux.DécalageColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Décalage' dans la table 'LigneDeFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLigneDeFeux.DécalageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbVoies() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLigneDeFeux.NbVoiesColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'NbVoies' dans la table 'LigneDeFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLigneDeFeux.NbVoiesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumVoie1() As Short
            Get
                Try 
                    Return CType(Me(Me.tableLigneDeFeux.NumVoie1Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'NumVoie1' dans la table 'LigneDeFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLigneDeFeux.NumVoie1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SignalAnticipation() As String
            Get
                Try 
                    Return CType(Me(Me.tableLigneDeFeux.SignalAnticipationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SignalAnticipation' dans la table 'LigneDeFeux' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableLigneDeFeux.SignalAnticipationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableLigneDeFeux.TADColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TAD' dans la table 'LigneDeFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLigneDeFeux.TADColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TAG() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableLigneDeFeux.TAGColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TAG' dans la table 'LigneDeFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLigneDeFeux.TAGColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TD() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableLigneDeFeux.TDColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TD' dans la table 'LigneDeFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLigneDeFeux.TDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LigneDeFeux_Id() As Integer
            Get
                Return CType(Me(Me.tableLigneDeFeux.LigneDeFeux_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableLigneDeFeux.LigneDeFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLigneDeFeux.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'LigneDeFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLigneDeFeux.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_LigneDeFeux")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_LigneDeFeux"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDécalageNull() As Boolean
            Return Me.IsNull(Me.tableLigneDeFeux.DécalageColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDécalageNull()
            Me(Me.tableLigneDeFeux.DécalageColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNbVoiesNull() As Boolean
            Return Me.IsNull(Me.tableLigneDeFeux.NbVoiesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNbVoiesNull()
            Me(Me.tableLigneDeFeux.NbVoiesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumVoie1Null() As Boolean
            Return Me.IsNull(Me.tableLigneDeFeux.NumVoie1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumVoie1Null()
            Me(Me.tableLigneDeFeux.NumVoie1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSignalAnticipationNull() As Boolean
            Return Me.IsNull(Me.tableLigneDeFeux.SignalAnticipationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSignalAnticipationNull()
            Me(Me.tableLigneDeFeux.SignalAnticipationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTADNull() As Boolean
            Return Me.IsNull(Me.tableLigneDeFeux.TADColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTADNull()
            Me(Me.tableLigneDeFeux.TADColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTAGNull() As Boolean
            Return Me.IsNull(Me.tableLigneDeFeux.TAGColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTAGNull()
            Me(Me.tableLigneDeFeux.TAGColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTDNull() As Boolean
            Return Me.IsNull(Me.tableLigneDeFeux.TDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTDNull()
            Me(Me.tableLigneDeFeux.TDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tableLigneDeFeux.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tableLigneDeFeux.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSignalRows() As SignalRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("LigneDeFeux_Signal")),SignalRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRougeDégagementRows() As RougeDégagementRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("LigneDeFeux_RougeDégagement")),RougeDégagementRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIncompatibleRows() As IncompatibleRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("LigneDeFeux_Incompatible")),IncompatibleRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SignalRow
        Inherits System.Data.DataRow
        
        Private tableSignal As SignalDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSignal = CType(Me.Table,SignalDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property strCode() As String
            Get
                Return CType(Me(Me.tableSignal.strCodeColumn),String)
            End Get
            Set
                Me(Me.tableSignal.strCodeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Short
            Get
                Return CType(Me(Me.tableSignal.XColumn),Short)
            End Get
            Set
                Me(Me.tableSignal.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Short
            Get
                Return CType(Me(Me.tableSignal.YColumn),Short)
            End Get
            Set
                Me(Me.tableSignal.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LigneDeFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSignal.LigneDeFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'LigneDeFeux_Id' dans la table 'Signal' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSignal.LigneDeFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LigneDeFeuxRow() As LigneDeFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("LigneDeFeux_Signal")),LigneDeFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("LigneDeFeux_Signal"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLigneDeFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tableSignal.LigneDeFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLigneDeFeux_IdNull()
            Me(Me.tableSignal.LigneDeFeux_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RougeDégagementRow
        Inherits System.Data.DataRow
        
        Private tableRougeDégagement As RougeDégagementDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRougeDégagement = CType(Me.Table,RougeDégagementDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDAdverse() As String
            Get
                Return CType(Me(Me.tableRougeDégagement.IDAdverseColumn),String)
            End Get
            Set
                Me(Me.tableRougeDégagement.IDAdverseColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RougeDégagement_text() As Short
            Get
                Return CType(Me(Me.tableRougeDégagement.RougeDégagement_textColumn),Short)
            End Get
            Set
                Me(Me.tableRougeDégagement.RougeDégagement_textColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LigneDeFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRougeDégagement.LigneDeFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'LigneDeFeux_Id' dans la table 'RougeDégagement' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableRougeDégagement.LigneDeFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LigneDeFeuxRow() As LigneDeFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("LigneDeFeux_RougeDégagement")),LigneDeFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("LigneDeFeux_RougeDégagement"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLigneDeFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tableRougeDégagement.LigneDeFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLigneDeFeux_IdNull()
            Me(Me.tableRougeDégagement.LigneDeFeux_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IncompatibleRow
        Inherits System.Data.DataRow
        
        Private tableIncompatible As IncompatibleDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIncompatible = CType(Me.Table,IncompatibleDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDAdverse() As String
            Get
                Return CType(Me(Me.tableIncompatible.IDAdverseColumn),String)
            End Get
            Set
                Me(Me.tableIncompatible.IDAdverseColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LigneDeFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIncompatible.LigneDeFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'LigneDeFeux_Id' dans la table 'Incompatible' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncompatible.LigneDeFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LigneDeFeuxRow() As LigneDeFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("LigneDeFeux_Incompatible")),LigneDeFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("LigneDeFeux_Incompatible"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLigneDeFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tableIncompatible.LigneDeFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLigneDeFeux_IdNull()
            Me(Me.tableIncompatible.LigneDeFeux_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TrajectoireRow
        Inherits System.Data.DataRow
        
        Private tableTrajectoire As TrajectoireDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTrajectoire = CType(Me.Table,TrajectoireDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDLigneDeFeux() As String
            Get
                Try 
                    Return CType(Me(Me.tableTrajectoire.IDLigneDeFeuxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IDLigneDeFeux' dans la table 'Trajectoire' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableTrajectoire.IDLigneDeFeuxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trajectoire_Id() As Integer
            Get
                Return CType(Me(Me.tableTrajectoire.Trajectoire_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableTrajectoire.Trajectoire_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTrajectoire.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'Trajectoire' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrajectoire.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_Trajectoire")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_Trajectoire"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDLigneDeFeuxNull() As Boolean
            Return Me.IsNull(Me.tableTrajectoire.IDLigneDeFeuxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDLigneDeFeuxNull()
            Me(Me.tableTrajectoire.IDLigneDeFeuxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tableTrajectoire.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tableTrajectoire.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPiétonsRows() As PiétonsRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Trajectoire_Piétons")),PiétonsRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetVéhiculesRows() As VéhiculesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Trajectoire_Véhicules")),VéhiculesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PiétonsRow
        Inherits System.Data.DataRow
        
        Private tablePiétons As PiétonsDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePiétons = CType(Me.Table,PiétonsDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDP1() As Short
            Get
                Return CType(Me(Me.tablePiétons.IDP1Column),Short)
            End Get
            Set
                Me(Me.tablePiétons.IDP1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDP2() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePiétons.IDP2Column),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IDP2' dans la table 'Piétons' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePiétons.IDP2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trajectoire_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePiétons.Trajectoire_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Trajectoire_Id' dans la table 'Piétons' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePiétons.Trajectoire_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrajectoireRow() As TrajectoireRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Trajectoire_Piétons")),TrajectoireRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Trajectoire_Piétons"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDP2Null() As Boolean
            Return Me.IsNull(Me.tablePiétons.IDP2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDP2Null()
            Me(Me.tablePiétons.IDP2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrajectoire_IdNull() As Boolean
            Return Me.IsNull(Me.tablePiétons.Trajectoire_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrajectoire_IdNull()
            Me(Me.tablePiétons.Trajectoire_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class VéhiculesRow
        Inherits System.Data.DataRow
        
        Private tableVéhicules As VéhiculesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableVéhicules = CType(Me.Table,VéhiculesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoieOrigine() As Short
            Get
                Return CType(Me(Me.tableVéhicules.VoieOrigineColumn),Short)
            End Get
            Set
                Me(Me.tableVéhicules.VoieOrigineColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VoieDestination() As Short
            Get
                Return CType(Me(Me.tableVéhicules.VoieDestinationColumn),Short)
            End Get
            Set
                Me(Me.tableVéhicules.VoieDestinationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeCourant() As String
            Get
                Return CType(Me(Me.tableVéhicules.TypeCourantColumn),String)
            End Get
            Set
                Me(Me.tableVéhicules.TypeCourantColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NatureCourant() As String
            Get
                Return CType(Me(Me.tableVéhicules.NatureCourantColumn),String)
            End Get
            Set
                Me(Me.tableVéhicules.NatureCourantColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoefGene() As Single
            Get
                Return CType(Me(Me.tableVéhicules.CoefGeneColumn),Single)
            End Get
            Set
                Me(Me.tableVéhicules.CoefGeneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Véhicules_Id() As Integer
            Get
                Return CType(Me(Me.tableVéhicules.Véhicules_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableVéhicules.Véhicules_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trajectoire_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableVéhicules.Trajectoire_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Trajectoire_Id' dans la table 'Véhicules' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableVéhicules.Trajectoire_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrajectoireRow() As TrajectoireRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Trajectoire_Véhicules")),TrajectoireRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Trajectoire_Véhicules"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrajectoire_IdNull() As Boolean
            Return Me.IsNull(Me.tableVéhicules.Trajectoire_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrajectoire_IdNull()
            Me(Me.tableVéhicules.Trajectoire_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPointManuelRows() As PointManuelRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Véhicules_PointManuel")),PointManuelRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PointManuelRow
        Inherits System.Data.DataRow
        
        Private tablePointManuel As PointManuelDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePointManuel = CType(Me.Table,PointManuelDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tablePointManuel.XColumn),Single)
            End Get
            Set
                Me(Me.tablePointManuel.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tablePointManuel.YColumn),Single)
            End Get
            Set
                Me(Me.tablePointManuel.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Véhicules_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePointManuel.Véhicules_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Véhicules_Id' dans la table 'PointManuel' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePointManuel.Véhicules_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VéhiculesRow() As VéhiculesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Véhicules_PointManuel")),VéhiculesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Véhicules_PointManuel"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVéhicules_IdNull() As Boolean
            Return Me.IsNull(Me.tablePointManuel.Véhicules_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVéhicules_IdNull()
            Me(Me.tablePointManuel.Véhicules_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class AntagonismeRow
        Inherits System.Data.DataRow
        
        Private tableAntagonisme As AntagonismeDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableAntagonisme = CType(Me.Table,AntagonismeDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trajectoire1() As Short
            Get
                Return CType(Me(Me.tableAntagonisme.Trajectoire1Column),Short)
            End Get
            Set
                Me(Me.tableAntagonisme.Trajectoire1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trajectoire2() As Short
            Get
                Return CType(Me(Me.tableAntagonisme.Trajectoire2Column),Short)
            End Get
            Set
                Me(Me.tableAntagonisme.Trajectoire2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeConflit() As Short
            Get
                Return CType(Me(Me.tableAntagonisme.TypeConflitColumn),Short)
            End Get
            Set
                Me(Me.tableAntagonisme.TypeConflitColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Antagonisme_Id() As Integer
            Get
                Return CType(Me(Me.tableAntagonisme.Antagonisme_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableAntagonisme.Antagonisme_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableAntagonisme.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'Antagonisme' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableAntagonisme.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_Antagonisme")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_Antagonisme"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tableAntagonisme.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tableAntagonisme.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpAntagoRows() As pAntagoRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Antagonisme_pAntago")),pAntagoRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pAntagoRow
        Inherits System.Data.DataRow
        
        Private tablepAntago As pAntagoDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepAntago = CType(Me.Table,pAntagoDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tablepAntago.XColumn),Single)
            End Get
            Set
                Me(Me.tablepAntago.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tablepAntago.YColumn),Single)
            End Get
            Set
                Me(Me.tablepAntago.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Antagonisme_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepAntago.Antagonisme_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Antagonisme_Id' dans la table 'pAntago' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepAntago.Antagonisme_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AntagonismeRow() As AntagonismeRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Antagonisme_pAntago")),AntagonismeRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Antagonisme_pAntago"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAntagonisme_IdNull() As Boolean
            Return Me.IsNull(Me.tablepAntago.Antagonisme_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAntagonisme_IdNull()
            Me(Me.tablepAntago.Antagonisme_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PlanFeuxRow
        Inherits System.Data.DataRow
        
        Private tablePlanFeux As PlanFeuxDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePlanFeux = CType(Me.Table,PlanFeuxDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ID() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanFeux.IDColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'ID' dans la table 'PlanFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanFeux.IDColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDTrafic() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePlanFeux.IDTraficColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IDTrafic' dans la table 'PlanFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanFeux.IDTraficColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Définitif() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePlanFeux.DéfinitifColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Définitif' dans la table 'PlanFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanFeux.DéfinitifColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomFonctionnement() As String
            Get
                Try 
                    Return CType(Me(Me.tablePlanFeux.NomFonctionnementColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'NomFonctionnement' dans la table 'PlanFeux' est DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanFeux.NomFonctionnementColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VerrouPlan() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePlanFeux.VerrouPlanColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'VerrouPlan' dans la table 'PlanFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanFeux.VerrouPlanColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VertMiniVéhiculesPlan() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePlanFeux.VertMiniVéhiculesPlanColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'VertMiniVéhiculesPlan' dans la table 'PlanFeux' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanFeux.VertMiniVéhiculesPlanColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VertMiniPiétonsPlan() As Short
            Get
                Try 
                    Return CType(Me(Me.tablePlanFeux.VertMiniPiétonsPlanColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'VertMiniPiétonsPlan' dans la table 'PlanFeux' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanFeux.VertMiniPiétonsPlanColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeux_Id() As Integer
            Get
                Return CType(Me(Me.tablePlanFeux.PlanFeux_IdColumn),Integer)
            End Get
            Set
                Me(Me.tablePlanFeux.PlanFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePlanFeux.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'PlanFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePlanFeux.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_PlanFeux")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_PlanFeux"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDNull() As Boolean
            Return Me.IsNull(Me.tablePlanFeux.IDColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDNull()
            Me(Me.tablePlanFeux.IDColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDTraficNull() As Boolean
            Return Me.IsNull(Me.tablePlanFeux.IDTraficColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDTraficNull()
            Me(Me.tablePlanFeux.IDTraficColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDéfinitifNull() As Boolean
            Return Me.IsNull(Me.tablePlanFeux.DéfinitifColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDéfinitifNull()
            Me(Me.tablePlanFeux.DéfinitifColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomFonctionnementNull() As Boolean
            Return Me.IsNull(Me.tablePlanFeux.NomFonctionnementColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomFonctionnementNull()
            Me(Me.tablePlanFeux.NomFonctionnementColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerrouPlanNull() As Boolean
            Return Me.IsNull(Me.tablePlanFeux.VerrouPlanColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerrouPlanNull()
            Me(Me.tablePlanFeux.VerrouPlanColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVertMiniVéhiculesPlanNull() As Boolean
            Return Me.IsNull(Me.tablePlanFeux.VertMiniVéhiculesPlanColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVertMiniVéhiculesPlanNull()
            Me(Me.tablePlanFeux.VertMiniVéhiculesPlanColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVertMiniPiétonsPlanNull() As Boolean
            Return Me.IsNull(Me.tablePlanFeux.VertMiniPiétonsPlanColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVertMiniPiétonsPlanNull()
            Me(Me.tablePlanFeux.VertMiniPiétonsPlanColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tablePlanFeux.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tablePlanFeux.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPhaseRows() As PhaseRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanFeux_Phase")),PhaseRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIDLigneFeuxComposéRows() As IDLigneFeuxComposéRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanFeux_IDLigneFeuxComposé")),IDLigneFeuxComposéRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetOrdreLignesRows() As OrdreLignesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanFeux_OrdreLignes")),OrdreLignesRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIncompatiblesRows() As IncompatiblesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanFeux_Incompatibles")),IncompatiblesRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRougesDégagementRows() As RougesDégagementRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanFeux_RougesDégagement")),RougesDégagementRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetTypesConflitRows() As TypesConflitRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PlanFeux_TypesConflit")),TypesConflitRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PhaseRow
        Inherits System.Data.DataRow
        
        Private tablePhase As PhaseDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePhase = CType(Me.Table,PhaseDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Durée() As Short
            Get
                Return CType(Me(Me.tablePhase.DuréeColumn),Short)
            End Get
            Set
                Me(Me.tablePhase.DuréeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Verrouillée() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePhase.VerrouilléeColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Verrouillée' dans la table 'Phase' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhase.VerrouilléeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phase_Id() As Integer
            Get
                Return CType(Me(Me.tablePhase.Phase_IdColumn),Integer)
            End Get
            Set
                Me(Me.tablePhase.Phase_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePhase.PlanFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PlanFeux_Id' dans la table 'Phase' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePhase.PlanFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeuxRow() As PlanFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanFeux_Phase")),PlanFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanFeux_Phase"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerrouilléeNull() As Boolean
            Return Me.IsNull(Me.tablePhase.VerrouilléeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerrouilléeNull()
            Me(Me.tablePhase.VerrouilléeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlanFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tablePhase.PlanFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlanFeux_IdNull()
            Me(Me.tablePhase.PlanFeux_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetIDLigneFeuxRows() As IDLigneFeuxRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Phase_IDLigneFeux")),IDLigneFeuxRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IDLigneFeuxRow
        Inherits System.Data.DataRow
        
        Private tableIDLigneFeux As IDLigneFeuxDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIDLigneFeux = CType(Me.Table,IDLigneFeuxDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DécalageOuvre() As Short
            Get
                Try 
                    Return CType(Me(Me.tableIDLigneFeux.DécalageOuvreColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DécalageOuvre' dans la table 'IDLigneFeux' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableIDLigneFeux.DécalageOuvreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DécalageFerme() As Short
            Get
                Try 
                    Return CType(Me(Me.tableIDLigneFeux.DécalageFermeColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DécalageFerme' dans la table 'IDLigneFeux' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableIDLigneFeux.DécalageFermeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDLigneFeux_text() As String
            Get
                Return CType(Me(Me.tableIDLigneFeux.IDLigneFeux_textColumn),String)
            End Get
            Set
                Me(Me.tableIDLigneFeux.IDLigneFeux_textColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Phase_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIDLigneFeux.Phase_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Phase_Id' dans la table 'IDLigneFeux' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIDLigneFeux.Phase_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PhaseRow() As PhaseRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Phase_IDLigneFeux")),PhaseRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Phase_IDLigneFeux"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDécalageOuvreNull() As Boolean
            Return Me.IsNull(Me.tableIDLigneFeux.DécalageOuvreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDécalageOuvreNull()
            Me(Me.tableIDLigneFeux.DécalageOuvreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDécalageFermeNull() As Boolean
            Return Me.IsNull(Me.tableIDLigneFeux.DécalageFermeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDécalageFermeNull()
            Me(Me.tableIDLigneFeux.DécalageFermeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPhase_IdNull() As Boolean
            Return Me.IsNull(Me.tableIDLigneFeux.Phase_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPhase_IdNull()
            Me(Me.tableIDLigneFeux.Phase_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IDLigneFeuxComposéRow
        Inherits System.Data.DataRow
        
        Private tableIDLigneFeuxComposé As IDLigneFeuxComposéDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIDLigneFeuxComposé = CType(Me.Table,IDLigneFeuxComposéDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IDLigneFeuxComposé_Column() As String
            Get
                Try 
                    Return CType(Me(Me.tableIDLigneFeuxComposé.IDLigneFeuxComposé_ColumnColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IDLigneFeuxComposé_Column' dans la table 'IDLigneFeuxC"& _ 
                            "omposé' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIDLigneFeuxComposé.IDLigneFeuxComposé_ColumnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIDLigneFeuxComposé.PlanFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PlanFeux_Id' dans la table 'IDLigneFeuxComposé' est DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tableIDLigneFeuxComposé.PlanFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeuxRow() As PlanFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanFeux_IDLigneFeuxComposé")),PlanFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanFeux_IDLigneFeuxComposé"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIDLigneFeuxComposé_ColumnNull() As Boolean
            Return Me.IsNull(Me.tableIDLigneFeuxComposé.IDLigneFeuxComposé_ColumnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIDLigneFeuxComposé_ColumnNull()
            Me(Me.tableIDLigneFeuxComposé.IDLigneFeuxComposé_ColumnColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlanFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tableIDLigneFeuxComposé.PlanFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlanFeux_IdNull()
            Me(Me.tableIDLigneFeuxComposé.PlanFeux_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class OrdreLignesRow
        Inherits System.Data.DataRow
        
        Private tableOrdreLignes As OrdreLignesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableOrdreLignes = CType(Me.Table,OrdreLignesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrdreLignes_Column() As String
            Get
                Return CType(Me(Me.tableOrdreLignes.OrdreLignes_ColumnColumn),String)
            End Get
            Set
                Me(Me.tableOrdreLignes.OrdreLignes_ColumnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableOrdreLignes.PlanFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PlanFeux_Id' dans la table 'OrdreLignes' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableOrdreLignes.PlanFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeuxRow() As PlanFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanFeux_OrdreLignes")),PlanFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanFeux_OrdreLignes"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlanFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tableOrdreLignes.PlanFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlanFeux_IdNull()
            Me(Me.tableOrdreLignes.PlanFeux_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class IncompatiblesRow
        Inherits System.Data.DataRow
        
        Private tableIncompatibles As IncompatiblesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableIncompatibles = CType(Me.Table,IncompatiblesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdLfInc1() As String
            Get
                Try 
                    Return CType(Me(Me.tableIncompatibles.IdLfInc1Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IdLfInc1' dans la table 'Incompatibles' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncompatibles.IdLfInc1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdLfInc2() As String
            Get
                Try 
                    Return CType(Me(Me.tableIncompatibles.IdLfInc2Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IdLfInc2' dans la table 'Incompatibles' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableIncompatibles.IdLfInc2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableIncompatibles.PlanFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PlanFeux_Id' dans la table 'Incompatibles' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tableIncompatibles.PlanFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeuxRow() As PlanFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanFeux_Incompatibles")),PlanFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanFeux_Incompatibles"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdLfInc1Null() As Boolean
            Return Me.IsNull(Me.tableIncompatibles.IdLfInc1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdLfInc1Null()
            Me(Me.tableIncompatibles.IdLfInc1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdLfInc2Null() As Boolean
            Return Me.IsNull(Me.tableIncompatibles.IdLfInc2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdLfInc2Null()
            Me(Me.tableIncompatibles.IdLfInc2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlanFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tableIncompatibles.PlanFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlanFeux_IdNull()
            Me(Me.tableIncompatibles.PlanFeux_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RougesDégagementRow
        Inherits System.Data.DataRow
        
        Private tableRougesDégagement As RougesDégagementDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRougesDégagement = CType(Me.Table,RougesDégagementDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdLfRouge1() As String
            Get
                Try 
                    Return CType(Me(Me.tableRougesDégagement.IdLfRouge1Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IdLfRouge1' dans la table 'RougesDégagement' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRougesDégagement.IdLfRouge1Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IdLfRouge2() As String
            Get
                Try 
                    Return CType(Me(Me.tableRougesDégagement.IdLfRouge2Column),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'IdLfRouge2' dans la table 'RougesDégagement' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableRougesDégagement.IdLfRouge2Column) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RougesDégagement_text() As Short
            Get
                Return CType(Me(Me.tableRougesDégagement.RougesDégagement_textColumn),Short)
            End Get
            Set
                Me(Me.tableRougesDégagement.RougesDégagement_textColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRougesDégagement.PlanFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PlanFeux_Id' dans la table 'RougesDégagement' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tableRougesDégagement.PlanFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeuxRow() As PlanFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanFeux_RougesDégagement")),PlanFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanFeux_RougesDégagement"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdLfRouge1Null() As Boolean
            Return Me.IsNull(Me.tableRougesDégagement.IdLfRouge1Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdLfRouge1Null()
            Me(Me.tableRougesDégagement.IdLfRouge1Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIdLfRouge2Null() As Boolean
            Return Me.IsNull(Me.tableRougesDégagement.IdLfRouge2Column)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIdLfRouge2Null()
            Me(Me.tableRougesDégagement.IdLfRouge2Column) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlanFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tableRougesDégagement.PlanFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlanFeux_IdNull()
            Me(Me.tableRougesDégagement.PlanFeux_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TypesConflitRow
        Inherits System.Data.DataRow
        
        Private tableTypesConflit As TypesConflitDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTypesConflit = CType(Me.Table,TypesConflitDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypesConflit_Column() As Short
            Get
                Try 
                    Return CType(Me(Me.tableTypesConflit.TypesConflit_ColumnColumn),Short)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TypesConflit_Column' dans la table 'TypesConflit' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTypesConflit.TypesConflit_ColumnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeux_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTypesConflit.PlanFeux_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PlanFeux_Id' dans la table 'TypesConflit' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTypesConflit.PlanFeux_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PlanFeuxRow() As PlanFeuxRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PlanFeux_TypesConflit")),PlanFeuxRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PlanFeux_TypesConflit"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypesConflit_ColumnNull() As Boolean
            Return Me.IsNull(Me.tableTypesConflit.TypesConflit_ColumnColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypesConflit_ColumnNull()
            Me(Me.tableTypesConflit.TypesConflit_ColumnColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPlanFeux_IdNull() As Boolean
            Return Me.IsNull(Me.tableTypesConflit.PlanFeux_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPlanFeux_IdNull()
            Me(Me.tableTypesConflit.PlanFeux_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class TraficRow
        Inherits System.Data.DataRow
        
        Private tableTrafic As TraficDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableTrafic = CType(Me.Table,TraficDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Verrouillé() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTrafic.VerrouilléColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Verrouillé' dans la table 'Trafic' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrafic.VerrouilléColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Return CType(Me(Me.tableTrafic.NomColumn),String)
            End Get
            Set
                Me(Me.tableTrafic.NomColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UVP() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableTrafic.UVPColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'UVP' dans la table 'Trafic' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrafic.UVPColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TraficComment() As String
            Get
                Try 
                    Return CType(Me(Me.tableTrafic.TraficCommentColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TraficComment' dans la table 'Trafic' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrafic.TraficCommentColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trafic_Id() As Integer
            Get
                Return CType(Me(Me.tableTrafic.Trafic_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableTrafic.Trafic_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Variante_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableTrafic.Variante_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Variante_Id' dans la table 'Trafic' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableTrafic.Variante_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VarianteRow() As VarianteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Variante_Trafic")),VarianteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Variante_Trafic"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVerrouilléNull() As Boolean
            Return Me.IsNull(Me.tableTrafic.VerrouilléColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVerrouilléNull()
            Me(Me.tableTrafic.VerrouilléColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUVPNull() As Boolean
            Return Me.IsNull(Me.tableTrafic.UVPColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUVPNull()
            Me(Me.tableTrafic.UVPColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTraficCommentNull() As Boolean
            Return Me.IsNull(Me.tableTrafic.TraficCommentColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTraficCommentNull()
            Me(Me.tableTrafic.TraficCommentColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVariante_IdNull() As Boolean
            Return Me.IsNull(Me.tableTrafic.Variante_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVariante_IdNull()
            Me(Me.tableTrafic.Variante_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetQPiétonRows() As QPiétonRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Trafic_QPiéton")),QPiétonRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetQVéhiculeRows() As QVéhiculeRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Trafic_QVéhicule")),QVéhiculeRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QPiétonRow
        Inherits System.Data.DataRow
        
        Private tableQPiéton As QPiétonDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQPiéton = CType(Me.Table,QPiétonDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QPiéton_Column() As Short
            Get
                Return CType(Me(Me.tableQPiéton.QPiéton_ColumnColumn),Short)
            End Get
            Set
                Me(Me.tableQPiéton.QPiéton_ColumnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trafic_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableQPiéton.Trafic_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Trafic_Id' dans la table 'QPiéton' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQPiéton.Trafic_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TraficRow() As TraficRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Trafic_QPiéton")),TraficRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Trafic_QPiéton"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrafic_IdNull() As Boolean
            Return Me.IsNull(Me.tableQPiéton.Trafic_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrafic_IdNull()
            Me(Me.tableQPiéton.Trafic_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class QVéhiculeRow
        Inherits System.Data.DataRow
        
        Private tableQVéhicule As QVéhiculeDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableQVéhicule = CType(Me.Table,QVéhiculeDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property QVéhicule_Column() As Short
            Get
                Return CType(Me(Me.tableQVéhicule.QVéhicule_ColumnColumn),Short)
            End Get
            Set
                Me(Me.tableQVéhicule.QVéhicule_ColumnColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Trafic_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableQVéhicule.Trafic_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Trafic_Id' dans la table 'QVéhicule' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableQVéhicule.Trafic_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TraficRow() As TraficRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Trafic_QVéhicule")),TraficRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Trafic_QVéhicule"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrafic_IdNull() As Boolean
            Return Me.IsNull(Me.tableQVéhicule.Trafic_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrafic_IdNull()
            Me(Me.tableQVéhicule.Trafic_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PropriétésRow
        Inherits System.Data.DataRow
        
        Private tablePropriétés As PropriétésDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePropriétés = CType(Me.Table,PropriétésDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NbBranches() As Short
            Get
                Return CType(Me(Me.tablePropriétés.NbBranchesColumn),Short)
            End Get
            Set
                Me(Me.tablePropriétés.NbBranchesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Return CType(Me(Me.tablePropriétés.NomColumn),String)
            End Get
            Set
                Me(Me.tablePropriétés.NomColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commune() As String
            Get
                Return CType(Me(Me.tablePropriétés.CommuneColumn),String)
            End Get
            Set
                Me(Me.tablePropriétés.CommuneColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnAgglo() As Boolean
            Get
                Return CType(Me(Me.tablePropriétés.EnAggloColumn),Boolean)
            End Get
            Set
                Me(Me.tablePropriétés.EnAggloColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ZoneRégulation() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.ZoneRégulationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'ZoneRégulation' dans la table 'Propriétés' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.ZoneRégulationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Commentaires() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.CommentairesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Commentaires' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.CommentairesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeControleur() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.TypeControleurColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'TypeControleur' dans la table 'Propriétés' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.TypeControleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Fabricant() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.FabricantColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Fabricant' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.FabricantColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateControleur() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.DateControleurColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DateControleur' dans la table 'Propriétés' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.DateControleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CarrefourType() As String
            Get
                Return CType(Me(Me.tablePropriétés.CarrefourTypeColumn),String)
            End Get
            Set
                Me(Me.tablePropriétés.CarrefourTypeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Numéro() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.NuméroColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Numéro' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.NuméroColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PremierService() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.PremierServiceColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PremierService' dans la table 'Propriétés' est DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.PremierServiceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CoordonnéesService() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.CoordonnéesServiceColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CoordonnéesService' dans la table 'Propriétés' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.CoordonnéesServiceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SuperviseurTravaux() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.SuperviseurTravauxColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SuperviseurTravaux' dans la table 'Propriétés' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.SuperviseurTravauxColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateEtude() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.DateEtudeColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DateEtude' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.DateEtudeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RéalisateurEtude() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.RéalisateurEtudeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'RéalisateurEtude' dans la table 'Propriétés' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.RéalisateurEtudeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ObjectifEtude() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.ObjectifEtudeColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'ObjectifEtude' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.ObjectifEtudeColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OrigineVisa() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.OrigineVisaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'OrigineVisa' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.OrigineVisaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NuméroVisa() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.NuméroVisaColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'NuméroVisa' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.NuméroVisaColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property VisaTrafics() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.VisaTraficsColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'VisaTrafics' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.VisaTraficsColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateService() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.DateServiceColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DateService' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.DateServiceColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModification() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.DateModificationColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DateModification' dans la table 'Propriétés' est DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.DateModificationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateModifPlageHoraire() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.DateModifPlageHoraireColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DateModifPlageHoraire' dans la table 'Propriétés' est "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.DateModifPlageHoraireColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NumVersion() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.NumVersionColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'NumVersion' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.NumVersionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DateVersion() As Date
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.DateVersionColumn),Date)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DateVersion' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.DateVersionColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SystèmeRégulation() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.SystèmeRégulationColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SystèmeRégulation' dans la table 'Propriétés' est DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.SystèmeRégulationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EnchainementPhases() As String
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.EnchainementPhasesColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'EnchainementPhases' dans la table 'Propriétés' est DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.EnchainementPhasesColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Propriétés_Id() As Integer
            Get
                Return CType(Me(Me.tablePropriétés.Propriétés_IdColumn),Integer)
            End Get
            Set
                Me(Me.tablePropriétés.Propriétés_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Carrefour_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePropriétés.Carrefour_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Carrefour_Id' dans la table 'Propriétés' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePropriétés.Carrefour_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CarrefourRow() As CarrefourRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Carrefour_Propriétés")),CarrefourRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Carrefour_Propriétés"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsZoneRégulationNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.ZoneRégulationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetZoneRégulationNull()
            Me(Me.tablePropriétés.ZoneRégulationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCommentairesNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.CommentairesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCommentairesNull()
            Me(Me.tablePropriétés.CommentairesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTypeControleurNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.TypeControleurColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTypeControleurNull()
            Me(Me.tablePropriétés.TypeControleurColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFabricantNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.FabricantColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFabricantNull()
            Me(Me.tablePropriétés.FabricantColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateControleurNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.DateControleurColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateControleurNull()
            Me(Me.tablePropriétés.DateControleurColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNuméroNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.NuméroColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNuméroNull()
            Me(Me.tablePropriétés.NuméroColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPremierServiceNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.PremierServiceColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPremierServiceNull()
            Me(Me.tablePropriétés.PremierServiceColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCoordonnéesServiceNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.CoordonnéesServiceColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCoordonnéesServiceNull()
            Me(Me.tablePropriétés.CoordonnéesServiceColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSuperviseurTravauxNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.SuperviseurTravauxColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSuperviseurTravauxNull()
            Me(Me.tablePropriétés.SuperviseurTravauxColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateEtudeNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.DateEtudeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateEtudeNull()
            Me(Me.tablePropriétés.DateEtudeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRéalisateurEtudeNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.RéalisateurEtudeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRéalisateurEtudeNull()
            Me(Me.tablePropriétés.RéalisateurEtudeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsObjectifEtudeNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.ObjectifEtudeColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetObjectifEtudeNull()
            Me(Me.tablePropriétés.ObjectifEtudeColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsOrigineVisaNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.OrigineVisaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetOrigineVisaNull()
            Me(Me.tablePropriétés.OrigineVisaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNuméroVisaNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.NuméroVisaColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNuméroVisaNull()
            Me(Me.tablePropriétés.NuméroVisaColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsVisaTraficsNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.VisaTraficsColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetVisaTraficsNull()
            Me(Me.tablePropriétés.VisaTraficsColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateServiceNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.DateServiceColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateServiceNull()
            Me(Me.tablePropriétés.DateServiceColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateModificationNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.DateModificationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateModificationNull()
            Me(Me.tablePropriétés.DateModificationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateModifPlageHoraireNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.DateModifPlageHoraireColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateModifPlageHoraireNull()
            Me(Me.tablePropriétés.DateModifPlageHoraireColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNumVersionNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.NumVersionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNumVersionNull()
            Me(Me.tablePropriétés.NumVersionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDateVersionNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.DateVersionColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDateVersionNull()
            Me(Me.tablePropriétés.DateVersionColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSystèmeRégulationNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.SystèmeRégulationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSystèmeRégulationNull()
            Me(Me.tablePropriétés.SystèmeRégulationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEnchainementPhasesNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.EnchainementPhasesColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEnchainementPhasesNull()
            Me(Me.tablePropriétés.EnchainementPhasesColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCarrefour_IdNull() As Boolean
            Return Me.IsNull(Me.tablePropriétés.Carrefour_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCarrefour_IdNull()
            Me(Me.tablePropriétés.Carrefour_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCentreRows() As CentreRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Propriétés_Centre")),CentreRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CentreRow
        Inherits System.Data.DataRow
        
        Private tableCentre As CentreDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentre = CType(Me.Table,CentreDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tableCentre.XColumn),Single)
            End Get
            Set
                Me(Me.tableCentre.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tableCentre.YColumn),Single)
            End Get
            Set
                Me(Me.tableCentre.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Propriétés_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentre.Propriétés_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Propriétés_Id' dans la table 'Centre' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentre.Propriétés_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PropriétésRow() As PropriétésRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Propriétés_Centre")),PropriétésRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Propriétés_Centre"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPropriétés_IdNull() As Boolean
            Return Me.IsNull(Me.tableCentre.Propriétés_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPropriétés_IdNull()
            Me(Me.tableCentre.Propriétés_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class DXFRow
        Inherits System.Data.DataRow
        
        Private tableDXF As DXFDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableDXF = CType(Me.Table,DXFDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableDXF.NomColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Nom' dans la table 'DXF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDXF.NomColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DXF_Id() As Integer
            Get
                Return CType(Me(Me.tableDXF.DXF_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableDXF.DXF_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIA_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableDXF.SchémaACONDIA_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SchémaACONDIA_Id' dans la table 'DXF' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableDXF.SchémaACONDIA_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchémaACONDIARow() As SchémaACONDIARow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SchémaACONDIA_DXF")),SchémaACONDIARow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SchémaACONDIA_DXF"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tableDXF.NomColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tableDXF.NomColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSchémaACONDIA_IdNull() As Boolean
            Return Me.IsNull(Me.tableDXF.SchémaACONDIA_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSchémaACONDIA_IdNull()
            Me(Me.tableDXF.SchémaACONDIA_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCalqueRows() As CalqueRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("DXF_Calque")),CalqueRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetBlocRows() As BlocRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("DXF_Bloc")),BlocRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLimitesRows() As LimitesRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("DXF_Limites")),LimitesRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CalqueRow
        Inherits System.Data.DataRow
        
        Private tableCalque As CalqueDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCalque = CType(Me.Table,CalqueDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Return CType(Me(Me.tableCalque.NomColumn),String)
            End Get
            Set
                Me(Me.tableCalque.NomColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Couleur() As Long
            Get
                Return CType(Me(Me.tableCalque.CouleurColumn),Long)
            End Get
            Set
                Me(Me.tableCalque.CouleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeLign() As String
            Get
                Return CType(Me(Me.tableCalque.TypeLignColumn),String)
            End Get
            Set
                Me(Me.tableCalque.TypeLignColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DXF_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCalque.DXF_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DXF_Id' dans la table 'Calque' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCalque.DXF_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DXFRow() As DXFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DXF_Calque")),DXFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DXF_Calque"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDXF_IdNull() As Boolean
            Return Me.IsNull(Me.tableCalque.DXF_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDXF_IdNull()
            Me(Me.tableCalque.DXF_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class BlocRow
        Inherits System.Data.DataRow
        
        Private tableBloc As BlocDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableBloc = CType(Me.Table,BlocDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Nom() As String
            Get
                Try 
                    Return CType(Me(Me.tableBloc.NomColumn),String)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Nom' dans la table 'Bloc' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBloc.NomColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bloc_Id() As Integer
            Get
                Return CType(Me(Me.tableBloc.Bloc_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableBloc.Bloc_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DXF_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableBloc.DXF_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DXF_Id' dans la table 'Bloc' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableBloc.DXF_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DXFRow() As DXFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DXF_Bloc")),DXFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DXF_Bloc"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNomNull() As Boolean
            Return Me.IsNull(Me.tableBloc.NomColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNomNull()
            Me(Me.tableBloc.NomColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDXF_IdNull() As Boolean
            Return Me.IsNull(Me.tableBloc.DXF_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDXF_IdNull()
            Me(Me.tableBloc.DXF_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetLIGNERows() As LIGNERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Bloc_LIGNE")),LIGNERow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetARCRows() As ARCRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Bloc_ARC")),ARCRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCERCLERows() As CERCLERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Bloc_CERCLE")),CERCLERow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPOLYARCRows() As POLYARCRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Bloc_POLYARC")),POLYARCRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetSPLINERows() As SPLINERow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Bloc_SPLINE")),SPLINERow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetINSERTRows() As INSERTRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Bloc_INSERT")),INSERTRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LIGNERow
        Inherits System.Data.DataRow
        
        Private tableLIGNE As LIGNEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLIGNE = CType(Me.Table,LIGNEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Couleur() As Long
            Get
                Return CType(Me(Me.tableLIGNE.CouleurColumn),Long)
            End Get
            Set
                Me(Me.tableLIGNE.CouleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeLign() As String
            Get
                Return CType(Me(Me.tableLIGNE.TypeLignColumn),String)
            End Get
            Set
                Me(Me.tableLIGNE.TypeLignColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCalque() As String
            Get
                Return CType(Me(Me.tableLIGNE.NomCalqueColumn),String)
            End Get
            Set
                Me(Me.tableLIGNE.NomCalqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIGNE_Id() As Integer
            Get
                Return CType(Me(Me.tableLIGNE.LIGNE_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableLIGNE.LIGNE_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bloc_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLIGNE.Bloc_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Bloc_Id' dans la table 'LIGNE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLIGNE.Bloc_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlocRow() As BlocRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Bloc_LIGNE")),BlocRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Bloc_LIGNE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBloc_IdNull() As Boolean
            Return Me.IsNull(Me.tableLIGNE.Bloc_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBloc_IdNull()
            Me(Me.tableLIGNE.Bloc_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPARows() As PARow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("LIGNE_PA")),PARow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PARow
        Inherits System.Data.DataRow
        
        Private tablePA As PADataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePA = CType(Me.Table,PADataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tablePA.XColumn),Single)
            End Get
            Set
                Me(Me.tablePA.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tablePA.YColumn),Single)
            End Get
            Set
                Me(Me.tablePA.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIGNE_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePA.LIGNE_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'LIGNE_Id' dans la table 'PA' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePA.LIGNE_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LIGNERow() As LIGNERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("LIGNE_PA")),LIGNERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("LIGNE_PA"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLIGNE_IdNull() As Boolean
            Return Me.IsNull(Me.tablePA.LIGNE_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLIGNE_IdNull()
            Me(Me.tablePA.LIGNE_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ARCRow
        Inherits System.Data.DataRow
        
        Private tableARC As ARCDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableARC = CType(Me.Table,ARCDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Couleur() As Long
            Get
                Return CType(Me(Me.tableARC.CouleurColumn),Long)
            End Get
            Set
                Me(Me.tableARC.CouleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeLign() As String
            Get
                Return CType(Me(Me.tableARC.TypeLignColumn),String)
            End Get
            Set
                Me(Me.tableARC.TypeLignColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCalque() As String
            Get
                Return CType(Me(Me.tableARC.NomCalqueColumn),String)
            End Get
            Set
                Me(Me.tableARC.NomCalqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rayon() As Single
            Get
                Return CType(Me(Me.tableARC.RayonColumn),Single)
            End Get
            Set
                Me(Me.tableARC.RayonColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AngleDépart() As Single
            Get
                Return CType(Me(Me.tableARC.AngleDépartColumn),Single)
            End Get
            Set
                Me(Me.tableARC.AngleDépartColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AngleBalayage() As Single
            Get
                Return CType(Me(Me.tableARC.AngleBalayageColumn),Single)
            End Get
            Set
                Me(Me.tableARC.AngleBalayageColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARC_Id() As Integer
            Get
                Return CType(Me(Me.tableARC.ARC_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableARC.ARC_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bloc_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableARC.Bloc_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Bloc_Id' dans la table 'ARC' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableARC.Bloc_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlocRow() As BlocRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Bloc_ARC")),BlocRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Bloc_ARC"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBloc_IdNull() As Boolean
            Return Me.IsNull(Me.tableARC.Bloc_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBloc_IdNull()
            Me(Me.tableARC.Bloc_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCentreArcRows() As CentreArcRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ARC_CentreArc")),CentreArcRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CentreArcRow
        Inherits System.Data.DataRow
        
        Private tableCentreArc As CentreArcDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentreArc = CType(Me.Table,CentreArcDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tableCentreArc.XColumn),Single)
            End Get
            Set
                Me(Me.tableCentreArc.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tableCentreArc.YColumn),Single)
            End Get
            Set
                Me(Me.tableCentreArc.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARC_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentreArc.ARC_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'ARC_Id' dans la table 'CentreArc' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentreArc.ARC_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ARCRow() As ARCRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("ARC_CentreArc")),ARCRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("ARC_CentreArc"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsARC_IdNull() As Boolean
            Return Me.IsNull(Me.tableCentreArc.ARC_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetARC_IdNull()
            Me(Me.tableCentreArc.ARC_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CERCLERow
        Inherits System.Data.DataRow
        
        Private tableCERCLE As CERCLEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCERCLE = CType(Me.Table,CERCLEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Couleur() As Long
            Get
                Return CType(Me(Me.tableCERCLE.CouleurColumn),Long)
            End Get
            Set
                Me(Me.tableCERCLE.CouleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeLign() As String
            Get
                Return CType(Me(Me.tableCERCLE.TypeLignColumn),String)
            End Get
            Set
                Me(Me.tableCERCLE.TypeLignColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCalque() As String
            Get
                Return CType(Me(Me.tableCERCLE.NomCalqueColumn),String)
            End Get
            Set
                Me(Me.tableCERCLE.NomCalqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rayon() As Single
            Get
                Return CType(Me(Me.tableCERCLE.RayonColumn),Single)
            End Get
            Set
                Me(Me.tableCERCLE.RayonColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERCLE_Id() As Integer
            Get
                Return CType(Me(Me.tableCERCLE.CERCLE_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableCERCLE.CERCLE_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bloc_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCERCLE.Bloc_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Bloc_Id' dans la table 'CERCLE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCERCLE.Bloc_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlocRow() As BlocRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Bloc_CERCLE")),BlocRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Bloc_CERCLE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBloc_IdNull() As Boolean
            Return Me.IsNull(Me.tableCERCLE.Bloc_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBloc_IdNull()
            Me(Me.tableCERCLE.Bloc_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCentreCercleRows() As CentreCercleRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CERCLE_CentreCercle")),CentreCercleRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CentreCercleRow
        Inherits System.Data.DataRow
        
        Private tableCentreCercle As CentreCercleDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCentreCercle = CType(Me.Table,CentreCercleDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tableCentreCercle.XColumn),Single)
            End Get
            Set
                Me(Me.tableCentreCercle.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tableCentreCercle.YColumn),Single)
            End Get
            Set
                Me(Me.tableCentreCercle.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERCLE_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCentreCercle.CERCLE_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'CERCLE_Id' dans la table 'CentreCercle' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCentreCercle.CERCLE_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CERCLERow() As CERCLERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CERCLE_CentreCercle")),CERCLERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CERCLE_CentreCercle"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCERCLE_IdNull() As Boolean
            Return Me.IsNull(Me.tableCentreCercle.CERCLE_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCERCLE_IdNull()
            Me(Me.tableCentreCercle.CERCLE_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class POLYARCRow
        Inherits System.Data.DataRow
        
        Private tablePOLYARC As POLYARCDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePOLYARC = CType(Me.Table,POLYARCDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Clore() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tablePOLYARC.CloreColumn),Boolean)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Clore' dans la table 'POLYARC' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePOLYARC.CloreColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Couleur() As Long
            Get
                Return CType(Me(Me.tablePOLYARC.CouleurColumn),Long)
            End Get
            Set
                Me(Me.tablePOLYARC.CouleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeLign() As String
            Get
                Return CType(Me(Me.tablePOLYARC.TypeLignColumn),String)
            End Get
            Set
                Me(Me.tablePOLYARC.TypeLignColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCalque() As String
            Get
                Return CType(Me(Me.tablePOLYARC.NomCalqueColumn),String)
            End Get
            Set
                Me(Me.tablePOLYARC.NomCalqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POLYARC_Id() As Integer
            Get
                Return CType(Me(Me.tablePOLYARC.POLYARC_IdColumn),Integer)
            End Get
            Set
                Me(Me.tablePOLYARC.POLYARC_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bloc_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePOLYARC.Bloc_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Bloc_Id' dans la table 'POLYARC' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePOLYARC.Bloc_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlocRow() As BlocRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Bloc_POLYARC")),BlocRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Bloc_POLYARC"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCloreNull() As Boolean
            Return Me.IsNull(Me.tablePOLYARC.CloreColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCloreNull()
            Me(Me.tablePOLYARC.CloreColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBloc_IdNull() As Boolean
            Return Me.IsNull(Me.tablePOLYARC.Bloc_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBloc_IdNull()
            Me(Me.tablePOLYARC.Bloc_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPIRows() As PIRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("POLYARC_PI")),PIRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PIRow
        Inherits System.Data.DataRow
        
        Private tablePI As PIDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePI = CType(Me.Table,PIDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Arrondi() As Single
            Get
                Try 
                    Return CType(Me(Me.tablePI.ArrondiColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Arrondi' dans la table 'PI' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePI.ArrondiColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Drapeau() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePI.DrapeauColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Drapeau' dans la table 'PI' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePI.DrapeauColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PI_Id() As Integer
            Get
                Return CType(Me(Me.tablePI.PI_IdColumn),Integer)
            End Get
            Set
                Me(Me.tablePI.PI_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POLYARC_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePI.POLYARC_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'POLYARC_Id' dans la table 'PI' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePI.POLYARC_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property POLYARCRow() As POLYARCRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("POLYARC_PI")),POLYARCRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("POLYARC_PI"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsArrondiNull() As Boolean
            Return Me.IsNull(Me.tablePI.ArrondiColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetArrondiNull()
            Me(Me.tablePI.ArrondiColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDrapeauNull() As Boolean
            Return Me.IsNull(Me.tablePI.DrapeauColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDrapeauNull()
            Me(Me.tablePI.DrapeauColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPOLYARC_IdNull() As Boolean
            Return Me.IsNull(Me.tablePI.POLYARC_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPOLYARC_IdNull()
            Me(Me.tablePI.POLYARC_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPRows() As PRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("PI_P")),PRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PRow
        Inherits System.Data.DataRow
        
        Private tableP As PDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableP = CType(Me.Table,PDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tableP.XColumn),Single)
            End Get
            Set
                Me(Me.tableP.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tableP.YColumn),Single)
            End Get
            Set
                Me(Me.tableP.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PI_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableP.PI_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'PI_Id' dans la table 'P' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableP.PI_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PIRow() As PIRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("PI_P")),PIRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("PI_P"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsPI_IdNull() As Boolean
            Return Me.IsNull(Me.tableP.PI_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetPI_IdNull()
            Me(Me.tableP.PI_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class SPLINERow
        Inherits System.Data.DataRow
        
        Private tableSPLINE As SPLINEDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableSPLINE = CType(Me.Table,SPLINEDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Couleur() As Long
            Get
                Return CType(Me(Me.tableSPLINE.CouleurColumn),Long)
            End Get
            Set
                Me(Me.tableSPLINE.CouleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeLign() As String
            Get
                Return CType(Me(Me.tableSPLINE.TypeLignColumn),String)
            End Get
            Set
                Me(Me.tableSPLINE.TypeLignColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCalque() As String
            Get
                Return CType(Me(Me.tableSPLINE.NomCalqueColumn),String)
            End Get
            Set
                Me(Me.tableSPLINE.NomCalqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPLINE_Id() As Integer
            Get
                Return CType(Me(Me.tableSPLINE.SPLINE_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableSPLINE.SPLINE_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bloc_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableSPLINE.Bloc_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Bloc_Id' dans la table 'SPLINE' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableSPLINE.Bloc_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlocRow() As BlocRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Bloc_SPLINE")),BlocRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Bloc_SPLINE"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBloc_IdNull() As Boolean
            Return Me.IsNull(Me.tableSPLINE.Bloc_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBloc_IdNull()
            Me(Me.tableSPLINE.Bloc_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetPtDessinéRows() As PtDessinéRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("SPLINE_PtDessiné")),PtDessinéRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class PtDessinéRow
        Inherits System.Data.DataRow
        
        Private tablePtDessiné As PtDessinéDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablePtDessiné = CType(Me.Table,PtDessinéDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tablePtDessiné.XColumn),Single)
            End Get
            Set
                Me(Me.tablePtDessiné.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tablePtDessiné.YColumn),Single)
            End Get
            Set
                Me(Me.tablePtDessiné.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPLINE_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablePtDessiné.SPLINE_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'SPLINE_Id' dans la table 'PtDessiné' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablePtDessiné.SPLINE_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SPLINERow() As SPLINERow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("SPLINE_PtDessiné")),SPLINERow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("SPLINE_PtDessiné"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSPLINE_IdNull() As Boolean
            Return Me.IsNull(Me.tablePtDessiné.SPLINE_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSPLINE_IdNull()
            Me(Me.tablePtDessiné.SPLINE_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class INSERTRow
        Inherits System.Data.DataRow
        
        Private tableINSERT As INSERTDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableINSERT = CType(Me.Table,INSERTDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Couleur() As Long
            Get
                Return CType(Me(Me.tableINSERT.CouleurColumn),Long)
            End Get
            Set
                Me(Me.tableINSERT.CouleurColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TypeLign() As String
            Get
                Return CType(Me(Me.tableINSERT.TypeLignColumn),String)
            End Get
            Set
                Me(Me.tableINSERT.TypeLignColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomCalque() As String
            Get
                Return CType(Me(Me.tableINSERT.NomCalqueColumn),String)
            End Get
            Set
                Me(Me.tableINSERT.NomCalqueColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NomBloc() As String
            Get
                Return CType(Me(Me.tableINSERT.NomBlocColumn),String)
            End Get
            Set
                Me(Me.tableINSERT.NomBlocColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Echelle() As Single
            Get
                Try 
                    Return CType(Me(Me.tableINSERT.EchelleColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Echelle' dans la table 'INSERT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINSERT.EchelleColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Rotation() As Single
            Get
                Try 
                    Return CType(Me(Me.tableINSERT.RotationColumn),Single)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Rotation' dans la table 'INSERT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINSERT.RotationColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INSERT_Id() As Integer
            Get
                Return CType(Me(Me.tableINSERT.INSERT_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableINSERT.INSERT_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Bloc_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableINSERT.Bloc_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Bloc_Id' dans la table 'INSERT' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableINSERT.Bloc_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BlocRow() As BlocRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Bloc_INSERT")),BlocRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Bloc_INSERT"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEchelleNull() As Boolean
            Return Me.IsNull(Me.tableINSERT.EchelleColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEchelleNull()
            Me(Me.tableINSERT.EchelleColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRotationNull() As Boolean
            Return Me.IsNull(Me.tableINSERT.RotationColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRotationNull()
            Me(Me.tableINSERT.RotationColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsBloc_IdNull() As Boolean
            Return Me.IsNull(Me.tableINSERT.Bloc_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetBloc_IdNull()
            Me(Me.tableINSERT.Bloc_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpInsertionRows() As pInsertionRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("INSERT_pInsertion")),pInsertionRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pInsertionRow
        Inherits System.Data.DataRow
        
        Private tablepInsertion As pInsertionDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepInsertion = CType(Me.Table,pInsertionDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tablepInsertion.XColumn),Single)
            End Get
            Set
                Me(Me.tablepInsertion.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tablepInsertion.YColumn),Single)
            End Get
            Set
                Me(Me.tablepInsertion.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INSERT_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepInsertion.INSERT_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'INSERT_Id' dans la table 'pInsertion' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepInsertion.INSERT_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property INSERTRow() As INSERTRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("INSERT_pInsertion")),INSERTRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("INSERT_pInsertion"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsINSERT_IdNull() As Boolean
            Return Me.IsNull(Me.tablepInsertion.INSERT_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetINSERT_IdNull()
            Me(Me.tablepInsertion.INSERT_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class LimitesRow
        Inherits System.Data.DataRow
        
        Private tableLimites As LimitesDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableLimites = CType(Me.Table,LimitesDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Limites_Id() As Integer
            Get
                Return CType(Me(Me.tableLimites.Limites_IdColumn),Integer)
            End Get
            Set
                Me(Me.tableLimites.Limites_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DXF_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableLimites.DXF_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'DXF_Id' dans la table 'Limites' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableLimites.DXF_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DXFRow() As DXFRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("DXF_Limites")),DXFRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("DXF_Limites"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDXF_IdNull() As Boolean
            Return Me.IsNull(Me.tableLimites.DXF_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDXF_IdNull()
            Me(Me.tableLimites.DXF_IdColumn) = System.Convert.DBNull
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpMinRows() As pMinRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Limites_pMin")),pMinRow())
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetpMaxRows() As pMaxRow()
            Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("Limites_pMax")),pMaxRow())
        End Function
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pMinRow
        Inherits System.Data.DataRow
        
        Private tablepMin As pMinDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepMin = CType(Me.Table,pMinDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tablepMin.XColumn),Single)
            End Get
            Set
                Me(Me.tablepMin.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tablepMin.YColumn),Single)
            End Get
            Set
                Me(Me.tablepMin.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Limites_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepMin.Limites_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Limites_Id' dans la table 'pMin' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepMin.Limites_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimitesRow() As LimitesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Limites_pMin")),LimitesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Limites_pMin"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimites_IdNull() As Boolean
            Return Me.IsNull(Me.tablepMin.Limites_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimites_IdNull()
            Me(Me.tablepMin.Limites_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class pMaxRow
        Inherits System.Data.DataRow
        
        Private tablepMax As pMaxDataTable
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tablepMax = CType(Me.Table,pMaxDataTable)
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property X() As Single
            Get
                Return CType(Me(Me.tablepMax.XColumn),Single)
            End Get
            Set
                Me(Me.tablepMax.XColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Y() As Single
            Get
                Return CType(Me(Me.tablepMax.YColumn),Single)
            End Get
            Set
                Me(Me.tablepMax.YColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Limites_Id() As Integer
            Get
                Try 
                    Return CType(Me(Me.tablepMax.Limites_IdColumn),Integer)
                Catch e As System.InvalidCastException
                    Throw New System.Data.StrongTypingException("La valeur pour la colonne 'Limites_Id' dans la table 'pMax' est DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tablepMax.Limites_IdColumn) = value
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LimitesRow() As LimitesRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("Limites_pMax")),LimitesRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("Limites_pMax"))
            End Set
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLimites_IdNull() As Boolean
            Return Me.IsNull(Me.tablepMax.Limites_IdColumn)
        End Function
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLimites_IdNull()
            Me(Me.tablepMax.Limites_IdColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SchémaACONDIARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SchémaACONDIARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SchémaACONDIARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SchémaACONDIARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParamétrageRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ParamétrageRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParamétrageRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParamétrageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParamFixeRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ParamFixeRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParamFixeRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParamFixeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TableCycleCapacitéRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TableCycleCapacitéRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TableCycleCapacitéRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TableCycleCapacitéRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DuréeCycleRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DuréeCycleRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DuréeCycleRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DuréeCycleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DemandeCarrefourRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DemandeCarrefourRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DemandeCarrefourRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DemandeCarrefourRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CarrefourRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CarrefourRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CarrefourRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CarrefourRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VarianteRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As VarianteRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VarianteRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VarianteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ParamDessinRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ParamDessinRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ParamDessinRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ParamDessinRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrigineReelleRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As OrigineReelleRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrigineReelleRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrigineReelleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TailleRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TailleRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TailleRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TailleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AffichageRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AffichageRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AffichageRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AffichageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class NordRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As NordRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As NordRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As NordRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pNordRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pNordRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pNordRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pNordRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SymEchelleRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SymEchelleRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SymEchelleRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SymEchelleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pSymEchelleRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pSymEchelleRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pSymEchelleRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pSymEchelleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class FondPlanRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As FondPlanRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As FondPlanRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As FondPlanRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class MonDXFRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As MonDXFRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As MonDXFRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As MonDXFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BrancheRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As BrancheRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BrancheRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BrancheRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IlotRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As IlotRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IlotRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IlotRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VoieRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As VoieRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VoieRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VoieRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ptFlechesTraficRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ptFlechesTraficRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ptFlechesTraficRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ptFlechesTraficRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrigineRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As OrigineRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrigineRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrigineRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PassageRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PassageRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PassageRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PassageRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PointRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PointRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PointRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PointRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VoieIntersecteeRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As VoieIntersecteeRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VoieIntersecteeRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VoieIntersecteeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LigneDeFeuxRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LigneDeFeuxRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LigneDeFeuxRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LigneDeFeuxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SignalRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SignalRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SignalRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SignalRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RougeDégagementRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As RougeDégagementRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RougeDégagementRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RougeDégagementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IncompatibleRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As IncompatibleRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IncompatibleRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IncompatibleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TrajectoireRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TrajectoireRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TrajectoireRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TrajectoireRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PiétonsRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PiétonsRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PiétonsRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PiétonsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class VéhiculesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As VéhiculesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As VéhiculesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As VéhiculesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PointManuelRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PointManuelRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PointManuelRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PointManuelRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class AntagonismeRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As AntagonismeRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As AntagonismeRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As AntagonismeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pAntagoRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pAntagoRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pAntagoRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pAntagoRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PlanFeuxRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PlanFeuxRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PlanFeuxRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PlanFeuxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PhaseRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PhaseRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PhaseRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PhaseRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IDLigneFeuxRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As IDLigneFeuxRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IDLigneFeuxRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IDLigneFeuxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IDLigneFeuxComposéRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As IDLigneFeuxComposéRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IDLigneFeuxComposéRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IDLigneFeuxComposéRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class OrdreLignesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As OrdreLignesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As OrdreLignesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As OrdreLignesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class IncompatiblesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As IncompatiblesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As IncompatiblesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As IncompatiblesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RougesDégagementRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As RougesDégagementRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RougesDégagementRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RougesDégagementRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TypesConflitRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TypesConflitRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TypesConflitRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TypesConflitRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class TraficRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As TraficRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As TraficRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As TraficRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QPiétonRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As QPiétonRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QPiétonRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QPiétonRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class QVéhiculeRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As QVéhiculeRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As QVéhiculeRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As QVéhiculeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PropriétésRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PropriétésRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PropriétésRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PropriétésRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CentreRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CentreRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CentreRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CentreRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class DXFRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As DXFRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As DXFRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As DXFRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CalqueRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CalqueRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CalqueRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CalqueRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class BlocRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As BlocRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As BlocRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As BlocRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LIGNERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LIGNERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LIGNERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LIGNERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PARowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PARow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PARow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PARow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ARCRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As ARCRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ARCRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ARCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CentreArcRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CentreArcRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CentreArcRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CentreArcRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CERCLERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CERCLERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CERCLERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CERCLERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CentreCercleRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As CentreCercleRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CentreCercleRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CentreCercleRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class POLYARCRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As POLYARCRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As POLYARCRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As POLYARCRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PIRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PIRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PIRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PIRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class SPLINERowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As SPLINERow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As SPLINERow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As SPLINERow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class PtDessinéRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As PtDessinéRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As PtDessinéRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As PtDessinéRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class INSERTRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As INSERTRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As INSERTRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As INSERTRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pInsertionRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pInsertionRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pInsertionRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pInsertionRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class LimitesRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As LimitesRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As LimitesRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As LimitesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pMinRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pMinRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pMinRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pMinRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class pMaxRowChangeEvent
        Inherits System.EventArgs
        
        Private eventRow As pMaxRow
        
        Private eventAction As System.Data.DataRowAction
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As pMaxRow, ByVal action As System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As pMaxRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
